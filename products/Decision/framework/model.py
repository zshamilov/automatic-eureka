# generated by datamodel-codegen:
#   filename:  https://decision-qa.k8s.datasapience.ru/api/v3/api-docs
#   timestamp: 2024-02-29T15:28:33+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import StringConstraints, BaseModel, Field
from typing_extensions import Annotated


class UserFunctionUpdateDto(BaseModel):
    """
    Объект для обновления полей функции
    """

    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    resultType: Optional[str] = Field(
        None,
        description='Тип возвращаемого пользовательской функцией значения',
        examples=['Дробный'],
    )
    description: Optional[str] = Field(
        None, description='Описание пользовательской функции', examples=['Описание']
    )


class Operation(str, Enum):
    """
    Совершаемая операция
    """

    update = 'update'
    save = 'save'
    delete = 'delete'
    deploy = 'deploy'
    validate = 'validate'
    auto_mapping = 'auto_mapping'


class ResponseDto(BaseModel):
    timeStamp: datetime = Field(..., description='Время ошибки')
    uuid: Optional[UUID] = Field(
        None,
        description='uuid присвоенный при работе с объектом',
        examples=['d8d6ba76-ea3f-4d9b-b7b7-a819ef0f5549'],
    )
    httpCode: int = Field(..., description='Дублированный http код', examples=[200])
    module: str = Field(
        ..., description='Модуль, в котором производилось действие', examples=['diagram']
    )
    operation: Operation = Field(
        ..., description='Совершаемая операция', examples=['save']
    )
    message: Optional[str] = Field(
        None,
        description='Trace ошибки',
        examples=['Unable to find a model that matches key ModelKey'],
    )
    validationPayload: Optional[Dict[str, Any]] = Field(
        None, description='Объект с ошибкой'
    )


class TestCreate(BaseModel):
    testName: str = Field(..., description='Имя теста', examples=['test_01'])
    testFile: Optional[str] = Field(
        None, description='Путь к файлу с данными для теста', examples=['/path/to/file']
    )
    testDescription: Optional[str] = Field(
        None, description='Описание теста', examples=['test description']
    )
    diagramId: UUID = Field(
        ...,
        description='Уникальный идентификатор диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    timeout: Optional[int] = Field(None, description='Таймаут в секундах', examples=[10])


class ExternalServiceHeaderFullViewDto(BaseModel):
    """
    Список заголовков внешнего сервиса
    """

    headerId: Optional[UUID] = Field(
        None,
        description='UUID заголовка',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    headerName: Annotated[str, StringConstraints(min_length=0, max_length=50)] = Field(
        ..., description='Имя заголовка', examples=['Cookie']
    )
    headerValue: str = Field(..., description='Значение заголовка', examples=['Value'])


class ServiceType(str, Enum):
    """
    Тип обмена
    """

    HTTP = 'HTTP'
    HTTPS = 'HTTPS'


class KeycloakGrantType(str, Enum):
    """
    Тип GrantType
    """

    CLIENT_CREDENTIALS = 'CLIENT_CREDENTIALS'
    PASSWORD = 'PASSWORD'


class ExternalServiceSettingsFullViewDto(BaseModel):
    """
    Список настроек подключения внешнего сервиса
    """

    environmentSettingsId: UUID = Field(
        ...,
        description='Идентификатор внешнего сервиса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    host: Annotated[str, StringConstraints(min_length=0, max_length=50)] = Field(
        ..., description='Имя хоста', examples=['192.168.0.1']
    )
    serviceType: ServiceType = Field(..., description='Тип обмена', examples=['HTTPS'])
    endpoint: Annotated[str, StringConstraints(min_length=0, max_length=50)] = Field(
        ..., description='Endpoint внешнего сервиса', examples=['diagram/node/{nodeId}']
    )
    port: Annotated[int, Field(le=65535)] = Field(
        ..., description='Порт внешнего сервиса', examples=[8080]
    )
    secondAttemptsCnt: Optional[Annotated[int, Field(le=10)]] = Field(
        None, description='Количество повторных попыток отправки сообщения', examples=[3]
    )
    transactionsPerSecond: Optional[int] = Field(
        None, description='Частота транзакций', examples=[1]
    )
    interval: Optional[int] = Field(
        None,
        description='Интервал между повторными попытками отправки в секундах',
        examples=[5],
    )
    timeout: Optional[int] = Field(
        None, description='Максимальное время ожидания ответа в секундах', examples=[5]
    )
    keycloakClientId: Optional[Annotated[str, StringConstraints(max_length=50)]] = Field(
        None, description='Keycloak client', examples=['decision.frontend']
    )
    keycloakClientSecret: Optional[Annotated[str, StringConstraints(max_length=100)]] = Field(
        None, description='Keycloak Client Secret', examples=['secret']
    )
    keycloakUser: Optional[Annotated[str, StringConstraints(max_length=32)]] = Field(
        None, description='Keycloak User', examples=['userName']
    )
    keycloakPassword: Optional[Annotated[str, StringConstraints(max_length=100)]] = Field(
        None, description='Keycloak password', examples=['password']
    )
    keycloakGrantType: Optional[KeycloakGrantType] = Field(
        None, description='Тип GrantType'
    )
    keycloakServer: Optional[Annotated[str, StringConstraints(max_length=200)]] = Field(
        None,
        description='Сервер Keycloak',
        examples=['https://auth.k8s.datasapience.ru/auth'],
    )
    keycloakRealm: Optional[Annotated[str, StringConstraints(max_length=50)]] = Field(
        None, description='Realm Keycloak', examples=['dev']
    )
    isKeyCloakAuth: Optional[bool] = Field(
        None, description='Использовать авторизацию при помощи Keycloak', examples=[False]
    )
    serviceSettingsId: UUID = Field(
        ...,
        description='Идентификатор настроек внешнего сервиса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class FileFormat(str, Enum):
    """
    Формат сообщения
    """

    JSON = 'JSON'
    XML = 'XML'


class Method(str, Enum):
    """
    Используемый метод взаимодействия
    """

    GET = 'GET'
    POST = 'POST'
    PUT = 'PUT'
    PATCH = 'PATCH'


class Protocol(str, Enum):
    """
    Протокол доступа
    """

    REST = 'REST'
    SOAP = 'SOAP'


class SyncType(str, Enum):
    """
    Тип взаимодействия
    """

    SYNC = 'SYNC'
    ASYNC = 'ASYNC'


class VariableType(str, Enum):
    """
    Тип параметра (входной, выходной, рассчитываемый)
    """

    IN = 'IN'
    OUT = 'OUT'
    CALCULATED = 'CALCULATED'
    ERROR = 'ERROR'


class ExternalServiceVariableFullViewDto(BaseModel):
    """
    Список переменных внешнего сервиса
    """

    variableName: str = Field(
        ..., description='Имя переменной', examples=['имя_переменной']
    )
    primitiveTypeId: Optional[str] = Field(
        None, description='Id простого типа переменной', examples=['1']
    )
    complexTypeVersionId: Optional[UUID] = Field(
        None,
        description='Id комплексного типа переменной',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    variableType: Optional[VariableType] = Field(
        None, description='Тип параметра (входной, выходной, рассчитываемый)'
    )
    isArray: bool = Field(
        ..., description='Является ли переменная массивом', examples=[False]
    )
    isComplex: bool = Field(
        ..., description='Является ли переменная комплексным типом', examples=[False]
    )
    sourcePath: Optional[str] = Field(
        None,
        description='Путь к значению переменной в структуре ответа сервиса',
        examples=['/'],
    )
    expression: Optional[str] = Field(
        None, description='Выражение для рассчета переменной', examples=['ln(e)']
    )
    functionIds: Optional[List[str]] = None
    variableId: Optional[UUID] = Field(
        None,
        description='Id переменной',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    childVariables: Optional[List[ExternalServiceVariableFullViewDto]] = None


class ExternalServiceUpdateUserVersionDto(BaseModel):
    """
    Объект для обновления внешнего сервиса
    """

    versionName: Optional[Annotated[str, StringConstraints(min_length=1, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )


class ScriptUpdateUserVersion(BaseModel):
    """
    Объект для обновления версии скрипта
    """

    versionName: Optional[Annotated[str, StringConstraints(min_length=1, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )


class ScriptType(str, Enum):
    """
    Язык скрипта
    """

    GROOVY = 'GROOVY'
    PYTHON = 'PYTHON'


class VariableType1(str, Enum):
    """
    Тип параметра (входной, выходной)
    """

    IN = 'IN'
    OUT = 'OUT'


class ScriptVariableFullView(BaseModel):
    """
    Список переменных скрипта канала коммуникации
    """

    variableName: str = Field(
        ..., description='Имя переменной', examples=['имя_переменной']
    )
    primitiveTypeId: Optional[int] = Field(
        None, description='Id простого типа переменной', examples=[1]
    )
    complexTypeVersionId: Optional[UUID] = Field(
        None,
        description='Id комплексного типа переменной',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    variableType: VariableType1 = Field(
        ..., description='Тип параметра (входной, выходной)'
    )
    arrayFlag: bool = Field(
        ..., description='Является ли переменная массивом', examples=[False]
    )
    variableId: Optional[UUID] = Field(
        None,
        description='Id переменной',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )


class ScriptFullView(BaseModel):
    scriptText: str = Field(..., description='Текст скрипта', examples=['Текст скрипта'])
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание скрипта', examples=['описание скрипта']
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    createDt: datetime = Field(..., description='Дата Время создания')
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    variables: Optional[List[ScriptVariableFullView]] = None
    scriptId: UUID = Field(
        ...,
        description='Идентификатор скрипта в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии скрипта в формате UUID',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )


class GroovyUpdate(BaseModel):
    """
    Объект для обновления скрипта
    """

    scriptText: str = Field(..., description='Текст скрипта', examples=['Текст скрипта'])
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание скрипта', examples=['описание скрипта']
    )
    variables: Optional[List[ScriptVariableFullView]] = None
    scriptType: ScriptType = Field(..., description='Язык скрипта')
    scriptId: UUID = Field(
        ...,
        description='Идентификатор скрипта в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии скрипта в формате UUID',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )


class PythonEnvironmentSettingsWithIdDto(BaseModel):
    """
    Список настроек окружения питона по окружению
    """

    limitsCpu: float = Field(
        ..., description='Верхняя граница количество ядер', examples=[0.1]
    )
    requestsCpu: float = Field(
        ..., description='Необходимое количество ядер', examples=[0.1]
    )
    limitsMemory: int = Field(
        ..., description='Верхняя граница количество памяти', examples=[1000]
    )
    requestsMemory: int = Field(
        ..., description='Необходимое количество ядер', examples=[500]
    )
    environmentId: UUID = Field(
        ...,
        description='Идентификатор окружения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    id: UUID = Field(
        ...,
        description='Идентификатор настроек kafka в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class PythonEnvironmentUpdateDto(BaseModel):
    name: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя окружения python', examples=['питон']
    )
    pythonVersionId: Annotated[str, StringConstraints(min_length=36, max_length=36)] = Field(
        ...,
        description='Идентификатор версии python',
        examples=['597e4cc3-98d2-42a6-9209-e803417fcba7'],
    )
    id: UUID = Field(
        ...,
        description='Идентификатор окружения python в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: Optional[str] = None
    requirementsTxt: Optional[str] = Field(
        None, description='Текст файла requirements.txt', examples=['pandas==0.2.0']
    )
    pythonEnvironmentSettings: Optional[List[PythonEnvironmentSettingsWithIdDto]] = None


class RuleTypeUpdateDto(BaseModel):
    """
    Объект для обновления типа правила
    """

    typeName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Системное имя в UTF-8', examples=['Name object']
    )
    displayName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Имя для отображения на странице', examples=['Имя объекта']
    )


class Protocol1(BaseModel):
    """
    Протокол
    """


class RestSourceSettingsFullViewDto(BaseModel):
    """
    Список настроек подключения внешнего сервиса
    """

    environmentId: UUID = Field(
        ...,
        description='Идентификатор настроек окружения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    host: Annotated[str, StringConstraints(min_length=0, max_length=50)] = Field(
        ..., description='Имя хоста', examples=['192.168.0.1']
    )
    port: Annotated[int, Field(le=65535)] = Field(
        ..., description='Порт внешнего сервиса', examples=[8080]
    )
    protocol: Protocol1
    restSourceSettingsId: UUID = Field(
        ...,
        description='Идентификатор настроек REST источника в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class RestSourceUpdateDto(BaseModel):
    """
    Объект для обновления REST источника
    """

    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание REST источника', examples=['REST источник']
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    restSourceSettings: Optional[List[RestSourceSettingsFullViewDto]] = None


class DataSourceType(str, Enum):
    """
    Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)
    """

    USER_INPUT = 'USER_INPUT'
    DICTIONARY = 'DICTIONARY'
    DIAGRAM_ELEMENT = 'DIAGRAM_ELEMENT'


class DynamicListType(str, Enum):
    """
    Тип отображения динамического списка
    """

    RADIO_BUTTON = 'RADIO_BUTTON'
    DROP_DOWN_LIST = 'DROP_DOWN_LIST'


class OfferVariableFullViewDto(BaseModel):
    """
    Список переменных шаблона предложения
    """

    variableName: str = Field(
        ..., description='Имя переменной', examples=['имя_переменной']
    )
    scriptVariableName: str = Field(
        ..., description='Имя переменной скрипта', examples=['имя_переменной_скрипта']
    )
    primitiveTypeId: Optional[str] = Field(
        None, description='Id простого типа переменной', examples=['1']
    )
    complexTypeVersionId: Optional[UUID] = Field(
        None,
        description='Id комплексного типа переменной',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    arrayFlag: bool = Field(
        ..., description='Является ли переменная массивом', examples=[False]
    )
    dataSourceType: DataSourceType = Field(
        ...,
        description='Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)',
    )
    minValue: Optional[float] = Field(
        None, description='Минимальное значение переменной', examples=[5.0]
    )
    maxValue: Optional[float] = Field(
        None, description='Максимальное значение переменной', examples=[15.0]
    )
    maxSize: Optional[int] = Field(
        None, description='Максимальная длина переменной', examples=[100]
    )
    dictionaryId: Optional[UUID] = Field(
        None,
        description='Id справочника, в котором находятся допустимые значения переменной',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    dynamicListType: Optional[DynamicListType] = Field(
        None, description='Тип отображения динамического списка'
    )
    mandatoryFlag: bool = Field(
        ..., description='Является ли переменная обязательной', examples=[False]
    )
    id: UUID = Field(
        ..., description='Id переменной', examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )


class OfferUpdateUserVersionDto(BaseModel):
    """
    Объект для обновления шаблона предложения
    """

    versionName: Optional[Annotated[str, StringConstraints(min_length=1, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )


class KafkaAdditionalSettingsWithIdDto(BaseModel):
    """
    Список дополнительных настроек Kafka
    """

    propertyName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Наименование параметра', examples=['kafka.bootstrap.servers']
    )
    propertyValue: Annotated[str, StringConstraints(max_length=1000)] = Field(
        ..., description='Значение параметра', examples=['kafka-bootstrap.server.ru']
    )
    propertySecure: Optional[bool] = Field(
        None, description='Признак конфиденциальности параметра', examples=[False]
    )
    kafkaAdditionalId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор дополнительных параметров Kafka в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class KafkaSettingsWithIdDto(BaseModel):
    """
    Список настроек Kafka по окружению
    """

    bootstrapServers: Optional[str] = Field(
        None,
        description='bootstrapServers kafka',
        examples=['bootstrapServer1:9092,bootstrapServer2:9092'],
    )
    environmentId: UUID = Field(
        ...,
        description='Идентификатор окружения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    id: UUID = Field(
        ...,
        description='Идентификатор настроек kafka в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    kafkaAdditionalSettings: Optional[List[KafkaAdditionalSettingsWithIdDto]] = None


class KafkaUpdateDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор kafka в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    name: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя kafka', examples=['local kafka']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание kafka', examples=['Kafka для тестирования']
    )
    kafkaSettings: Optional[List[KafkaSettingsWithIdDto]] = None


class IntegrationPlatformEnvironmentFullViewDto(BaseModel):
    """
    Параметры модуля интеграции
    """

    integrationUrl: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Url модуля интеграции', examples=['http://localhost:8081']
    )


class KafkaEnvironmentUpdateDto(BaseModel):
    """
    Параметры Kafka
    """

    kafkaUrl: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Url kafka', examples=['http://localhost:29092']
    )
    kafkaEnvironmentAdditionalSettings: Optional[
        List[KafkaAdditionalSettingsWithIdDto]
    ] = None


class StateStoreServerType(str, Enum):
    """
    Тип СУБД кэша агрегатов
    """

    POSTGRESQL = 'POSTGRESQL'


class StateStoreEnvironmentFullViewDto(BaseModel):
    """
    Параметры базы данных state store агрегатов
    """

    stateStoreUsername: Annotated[str, StringConstraints(min_length=0, max_length=32)] = Field(
        ...,
        description='Имя пользователя базы данных state store агрегатов',
        examples=['decision'],
    )
    stateStorePassword: Annotated[str, StringConstraints(min_length=0, max_length=32)] = Field(
        ...,
        description='Пароль пользователя базы данных state store агрегатов',
        examples=['decision'],
    )
    stateStoreSchema: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Схема базы данных state store агрегатов', examples=['decision']
    )
    stateStoreServerName: Annotated[str, StringConstraints(min_length=0, max_length=32)] = Field(
        ...,
        description='Hostname базы данных state store агрегатов',
        examples=['example.com'],
    )
    stateStoreServerPort: Annotated[str, StringConstraints(min_length=0, max_length=32)] = Field(
        ...,
        description='Hostname базы данных state store агрегатов',
        examples=['example.com'],
    )
    stateStoreAdditionalProperties: Annotated[str, StringConstraints(min_length=0, max_length=200)] = Field(
        ..., description='Допольнительные параметры подключения', examples=['/postgres']
    )
    stateStoreServerType: StateStoreServerType = Field(
        ..., description='Тип СУБД кэша агрегатов', examples=['POSTGRESQL']
    )


class StreamingPlatformEnvironmentFullViewDto(BaseModel):
    """
    Параметры модуля исполнения
    """

    streamingPlatformUsername: Optional[Annotated[str, StringConstraints(min_length=0, max_length=32)]] = Field(
        None, description='Имя пользователя модуля исполнения', examples=['decision']
    )
    streamingPlatformPassword: Optional[Annotated[str, StringConstraints(min_length=0, max_length=32)]] = Field(
        None, description='Пароль пользователя модуля исполнения', examples=['decision']
    )
    streamingPlatformUrl: Annotated[str, StringConstraints(min_length=0, max_length=1000)] = Field(
        ..., description='Url платформы', examples=['http://localhost:8083']
    )


class DiagramMetaInfo(BaseModel):
    """
    Объект метаинформации диаграммы
    """

    nodeCounter: Optional[int] = Field(None, description='Счетчик узла')


class DiagramUpdate(BaseModel):
    """
    Объект для обновления полей диаграммы
    """

    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    diagramDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=2000)]] = Field(
        None,
        description='Описание диаграммы',
        examples=['Диаграмма обладает функционалом и выполняет...'],
    )
    errorResponseFlag: bool = Field(
        ..., description='Флаг обработки аварийного ответа', examples=[True]
    )
    metaInfo: Optional[DiagramMetaInfo] = None


class DiagramUpdateUserVersion(BaseModel):
    """
    Объект для обновления полей диаграммы
    """

    versionName: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя версии', examples=['имя версии']
    )
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )


class Jwt(BaseModel):
    tokenValue: Optional[str] = None
    issuedAt: Optional[datetime] = None
    expiresAt: Optional[datetime] = None
    headers: Optional[Dict[str, Dict[str, Any]]] = None
    claims: Optional[Dict[str, Dict[str, Any]]] = None
    id: Optional[str] = None
    notBefore: Optional[datetime] = None
    issuer: Optional[str] = None
    subject: Optional[str] = None
    audience: Optional[List[str]] = None


class ParameterType(str, Enum):
    """
    Тип параметра (входной, выходной)
    """

    IN = 'IN'
    OUT = 'OUT'
    IN_OUT = 'IN_OUT'


class DiagramInnerVariableFullViewDto(BaseModel):
    parameterVersionId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор версии входного/выходного параметра',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    parameterId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор входного/выходного параметра',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    parameterName: Annotated[str, StringConstraints(max_length=40)] = Field(
        ..., description='Имя входного/выходного параметра', examples=['Client']
    )
    dictName: Optional[Annotated[str, StringConstraints(max_length=100)]] = Field(
        None, description='Наименование справочника', examples=['Справочник №1']
    )
    typeId: Annotated[str, StringConstraints(min_length=1, max_length=36)] = Field(
        ...,
        description='Уникальный идентификатор примитивного или пользовательского типа входного/выходного параметра.',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    dictId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор справочника',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    arrayFlag: bool = Field(..., description='Признак массива (true)', examples=[False])
    complexFlag: bool = Field(
        ..., description='Признак комплексного типа (true)', examples=[False]
    )
    dictFlag: bool = Field(
        ..., description='Признак справочника кастомных типов (true)', examples=[False]
    )


class InOutParamMetaInfo(BaseModel):
    """
    JSON-настройки отображения
    """

    orderNum: Optional[int] = Field(
        None,
        description='Порядковый номер записи в таблице интерфейса входные/выходные перменные. Вспомогательное поле',
    )
    isExecuteStatus: Optional[bool] = Field(
        None,
        description='Является ли переменная статусом выполнения диаграммы. Вспомогательное поле',
    )


class DiagramValidateResponseDto(BaseModel):
    timeStamp: datetime = Field(..., description='Время ошибки')
    uuid: Optional[UUID] = Field(
        None,
        description='uuid присвоенный при работе с объектом',
        examples=['d8d6ba76-ea3f-4d9b-b7b7-a819ef0f5549'],
    )
    httpCode: int = Field(..., description='Дублированный http код', examples=[200])
    module: str = Field(
        ..., description='Модуль, в котором производилось действие', examples=['diagram']
    )
    operation: Operation = Field(
        ..., description='Совершаемая операция', examples=['save']
    )
    message: Optional[str] = Field(
        None,
        description='Trace ошибки',
        examples=['Unable to find a model that matches key ModelKey'],
    )
    validationPayload: Optional[Dict[str, Any]] = Field(
        None, description='Объект с ошибкой'
    )
    invalidNodeIds: Optional[List[str]] = None


class DiagramRename(BaseModel):
    """
    Объект для обновления имени диаграммы
    """

    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )


class RetentionType(str, Enum):
    event = 'event'
    process = 'process'


class RetentionTimeUnit(str, Enum):
    ms = 'ms'
    s = 's'
    m = 'm'
    h = 'h'
    d = 'd'


class WatermarkType(str, Enum):
    monotonous = 'monotonous'
    bounded_unordered = 'bounded_unordered'
    periodic = 'periodic'
    periodic_bounded_unordered = 'periodic_bounded_unordered'


class AggregateFunction(str, Enum):
    AggAverage = 'AggAverage'
    AggCount = 'AggCount'
    AggCountDistinct = 'AggCountDistinct'
    AggCountNonNull = 'AggCountNonNull'
    AggFirstValue = 'AggFirstValue'
    AggLastValue = 'AggLastValue'
    AggMax = 'AggMax'
    AggMin = 'AggMin'
    AggMode = 'AggMode'
    AggSum = 'AggSum'
    AggStd = 'AggStd'


class AggregateComputeProperties(BaseModel):
    aggregateId: Optional[str] = None
    versionId: Optional[str] = None
    aggregateName: Optional[str] = None
    aggregateVariableType: Optional[str] = None
    diagramAggregateElement: Optional[str] = None
    aggregateElementTypeId: Optional[str] = None
    isUsedInDiagram: Optional[bool] = None
    aggregateFunction: Optional[AggregateFunction] = None


class AggregateReadingProperties(BaseModel):
    aggregateId: Optional[str] = None
    versionId: Optional[str] = None
    aggregateName: Optional[str] = None
    aggregateVariableType: Optional[str] = None
    aggregateDescription: Optional[str] = None


class ArrayConfig(BaseModel):
    field_name: Optional[str] = None


class Branch(BaseModel):
    rowKey: Optional[str] = None
    path: Optional[str] = None
    priority: Optional[int] = None


class Assigner(str, Enum):
    base_path = 'base_path'
    date_time = 'date_time'
    date_time_partitioned = 'date_time_partitioned'


class Bucket(BaseModel):
    check_interval: Optional[str] = None
    partition_column_name: Optional[str] = None
    assigner: Optional[Assigner] = None
    date_time_pattern: Optional[str] = None


class Bulk(BaseModel):
    format: Optional[str] = None


class CalculateExpression(BaseModel):
    calculateExpressionValue: Optional[str] = None
    functionIds: Optional[List[str]] = None


class CalculateNodeVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    expression: Optional[CalculateExpression] = None


class Type(str, Enum):
    hadoop = 'hadoop'
    hive = 'hive'


class Type1(str, Enum):
    SCD1 = 'SCD1'


class CdcTargetFields(BaseModel):
    capture_ts: Optional[str] = None
    apply_ts: Optional[str] = None
    source_ts: Optional[str] = None
    delete_flag: Optional[str] = None


class Mode(str, Enum):
    all = 'all'
    upsert = 'upsert'


class Changelog(BaseModel):
    mode: Optional[Mode] = None


class ChannelNodeMappingVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    nodeVariable: Optional[str] = None
    externalId: Optional[str] = None
    isVariableFromTemplate: Optional[bool] = None
    mandatoryFlag: Optional[bool] = None


class ResetStrategy(str, Enum):
    LATEST = 'LATEST'
    EARLIEST = 'EARLIEST'
    NONE = 'NONE'


class Committed(BaseModel):
    reset_strategy: Optional[ResetStrategy] = None


class EmbedEnum(str, Enum):
    LAST_TASK_STATES = 'LAST_TASK_STATES'
    TASK_STATES = 'TASK_STATES'
    BATCHES = 'BATCHES'
    TEMPLATES = 'TEMPLATES'
    CONTENTS = 'CONTENTS'
    PROPERTIES = 'PROPERTIES'
    OFFERS = 'OFFERS'
    CONTACT_INFO = 'CONTACT_INFO'


class ContactDateTimeNodeVariable(BaseModel):
    expression: Optional[str] = None
    functionIds: Optional[List[str]] = None


class Csv(BaseModel):
    delimiter: Optional[Annotated[str, StringConstraints(pattern=r'^.$')]] = None
    null_value: Optional[str] = None


class ScriptType2(str, Enum):
    GROOVY = 'GROOVY'
    PYTHON = 'PYTHON'


class DataSourceVariable(BaseModel):
    columnName: Optional[str] = None
    dataType: Optional[str] = None
    isNullable: Optional[bool] = None
    isPrimary: Optional[bool] = None


class DeJson(BaseModel):
    timestamp_pattern: Optional[str] = None


class Format(str, Enum):
    string = 'string'
    json = 'json'


class DeKey(BaseModel):
    enabled: Optional[bool] = None
    schema_: Optional[str] = Field(None, alias='schema')
    format: Optional[Format] = None
    name: Optional[str] = None
    json_: Optional[DeJson] = Field(None, alias='json')


class Format1(str, Enum):
    csv = 'csv'
    json = 'json'
    avro = 'avro'
    avro_confluent = 'avro_confluent'
    binary = 'binary'
    string = 'string'
    xml = 'xml'


class DeValue(BaseModel):
    confluent_url: Optional[str] = None
    confluent_subject: Optional[str] = None
    format: Optional[Format1] = None
    json_: Optional[DeJson] = Field(None, alias='json')
    csv: Optional[Csv] = None
    exclude_key: Optional[bool] = None


class DefaultBranch(BaseModel):
    rowKey: Optional[str] = None
    nodeId: Optional[str] = None
    linkId: Optional[str] = None


class ExecutionOptions(BaseModel):
    parallelism: Optional[int] = None
    interval: Optional[Annotated[str, StringConstraints(pattern=r'^\d+(ms|s|m|h|d)$')]] = None
    max_size: Optional[int] = None
    max_memory_mb: Optional[int] = None


class FieldMapping(BaseModel):
    flow_key: str
    table_key: str


class File(BaseModel):
    bucket: Optional[Bucket] = None
    path: Optional[str] = None
    bulk: Optional[Bulk] = None


class Type3(str, Enum):
    ARRAY = 'ARRAY'
    MAP = 'MAP'


class MissingDataStrategy(str, Enum):
    NULL = 'NULL'
    DISCARD = 'DISCARD'


class FlinkAggregate(BaseModel):
    expression: str
    alias: str


class GroupingElementsMapping(BaseModel):
    rowKey: Optional[str] = None
    aggregateElement: Optional[str] = None
    diagramElement: Optional[str] = None


class Type4(str, Enum):
    TUMBLE = 'TUMBLE'
    SESSION = 'SESSION'


class GroupingWindow(BaseModel):
    interval: Optional[str] = None
    type: Optional[Type4] = None


class EnrichmentType(str, Enum):
    OUTER = 'OUTER'
    INNER = 'INNER'


class Input(BaseModel):
    field_name: str


class JdbcConnection(BaseModel):
    provider_type: Optional[str] = None
    password: Optional[str] = None
    driver: Optional[str] = None
    user: Optional[str] = None
    url: Optional[str] = None


class QueryType(str, Enum):
    SINGLE = 'SINGLE'
    BATCH = 'BATCH'


class InputType(str, Enum):
    SQL = 'SQL'
    REQUEST_PARAMETERS = 'REQUEST_PARAMETERS'


class QueryType1(str, Enum):
    INSERT = 'INSERT'
    UPDATE = 'UPDATE'
    MERGE = 'MERGE'
    INSERT_ARRAY = 'INSERT_ARRAY'
    UPDATE_ARRAY = 'UPDATE_ARRAY'
    MERGE_ARRAY = 'MERGE_ARRAY'


class JoinConditionType(str, Enum):
    COMPLETION_OF_ALL_PREVIOUS_BLOCKS = 'COMPLETION_OF_ALL_PREVIOUS_BLOCKS'
    COMPLETION_OF_AT_LEAST_ONE_PREVIOUS_BLOCK = (
        'COMPLETION_OF_AT_LEAST_ONE_PREVIOUS_BLOCK'
    )


class JoinType(str, Enum):
    INNER = 'INNER'
    LEFT = 'LEFT'
    RIGHT = 'RIGHT'
    FULL = 'FULL'


class JoinStream(BaseModel):
    name: str
    alias: Annotated[str, StringConstraints(pattern=r'^\S+$')]
    ttl: Optional[Annotated[str, StringConstraints(pattern=r'^\d+(ms|s|m|h|d)$')]] = None


class Type5(str, Enum):
    none = 'none'
    earliest = 'earliest'
    latest = 'latest'
    committed = 'committed'
    timestamp = 'timestamp'


class KafkaConsumerOffsets(BaseModel):
    type: Optional[Type5] = None
    timestamp: Optional[int] = None
    committed: Optional[Committed] = None


class KafkaProperty(BaseModel):
    name: str
    value: str


class Semantic(str, Enum):
    EXACTLY_ONCE = 'EXACTLY_ONCE'
    AT_LEAST_ONCE = 'AT_LEAST_ONCE'
    NONE = 'NONE'


class KafkaSinkProducerCfg(BaseModel):
    semantic: Optional[Semantic] = None
    topic: Annotated[str, StringConstraints(pattern=r'^[-\w.]+$')]
    properties: Optional[List[KafkaProperty]] = None


class KafkaSourceConsumerCfg(BaseModel):
    group_id: Optional[str] = None
    start_offsets: Optional[KafkaConsumerOffsets] = None
    stop_offsets: Optional[KafkaConsumerOffsets] = None
    topic: Annotated[str, StringConstraints(pattern=r'^[-\w.]+$')]
    properties: Optional[List[KafkaProperty]] = None


class KafkaSourceKafkaNodeCfg(BaseModel):
    consumer: KafkaSourceConsumerCfg


class Boundedness(str, Enum):
    BOUNDED = 'BOUNDED'
    CONTINUOUS_UNBOUNDED = 'CONTINUOUS_UNBOUNDED'


class Key(BaseModel):
    password: Optional[str] = None


class Type6(str, Enum):
    inner = 'inner'
    outer = 'outer'


class Lookup(BaseModel):
    type: Type6


class MapConfig(BaseModel):
    value_field_name: Optional[str] = None
    key_field_name: Optional[str] = None


class MappingOperation(BaseModel):
    expression: str
    alias: Optional[Annotated[str, StringConstraints(pattern=r'^\S+$')]] = None


class NodeMappingVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    nodeVariable: Optional[str] = None
    externalId: Optional[str] = None


class OfferNodeMappingVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    nodeVariable: Optional[str] = None
    externalId: Optional[str] = None
    isVariableFromTemplate: Optional[bool] = None
    mandatoryFlag: Optional[bool] = None


class ServiceType1(str, Enum):
    OFFER_STORAGE_WRITE = 'OFFER_STORAGE_WRITE'
    COMMUNICATION_HUB = 'COMMUNICATION_HUB'
    COMMUNICATION_HUB_READ = 'COMMUNICATION_HUB_READ'
    OFFER_STORAGE_READ_BY_CLIENT_ID = 'OFFER_STORAGE_READ_BY_CLIENT_ID'
    OFFER_STORAGE_READ_BY_OFFER_ID = 'OFFER_STORAGE_READ_BY_OFFER_ID'
    POLICY_READ = 'POLICY_READ'


class OutParameterShortInfo(BaseModel):
    parameterName: Optional[str] = None
    parameterId: Optional[str] = None
    isNullValue: Optional[bool] = None


class Output(BaseModel):
    array: Optional[ArrayConfig] = None
    map: Optional[MapConfig] = None


class PartitionType(str, Enum):
    RANGE = 'RANGE'
    LIST = 'LIST'


class Plugin(BaseModel):
    name: Optional[str] = None


class Position(BaseModel):
    """
    Координаты узла
    """

    x: Optional[float] = Field(None, description='Расположение узла по оси X')
    y: Optional[float] = Field(None, description='Расположение узла по оси Y')


class Properties(BaseModel):
    """
    JSON-свойства узла в соответствии с типом узла
    """

    nodeType: str


class Property(BaseModel):
    name: str
    value: Optional[str] = None


class PythonNode(Properties):
    schema_: str = Field(..., alias='schema')
    python_environment_version_id: UUID
    python_code: Optional[str] = None
    execution_options: Optional[ExecutionOptions] = None


class Type7(str, Enum):
    STRING = 'STRING'
    INT = 'INT'
    DOUBLE = 'DOUBLE'
    LONG = 'LONG'
    BOOLEAN = 'BOOLEAN'


class Qualifier(BaseModel):
    name: str
    type: Type7


class Range(BaseModel):
    lower_bound: Optional[str] = None
    upper_bound: Optional[str] = None
    num_partitions: Optional[int] = None


class Request(BaseModel):
    endpoint: Optional[str] = None
    headers: Optional[str] = None


class Format2(str, Enum):
    txt = 'txt'
    json = 'json'


class Response(BaseModel):
    charset: Optional[str] = None
    format: Optional[Format2] = None
    field_name: Optional[str] = None
    array: Optional[bool] = None


class RestSourceNode(Properties):
    rest_service_uuid: Optional[UUID] = None
    request: Optional[Request] = None
    response: Optional[Response] = None
    execution_options: Optional[ExecutionOptions] = None


class RulesetProperties(BaseModel):
    rowKey: Optional[str] = None
    applyRule: Optional[bool] = None
    ruleName: Optional[str] = None
    ruleCode: Optional[str] = None
    ruleTypeId: Optional[str] = None
    ruleDescription: Optional[str] = None
    ruleExpression: Optional[str] = None
    functionIds: Optional[List[str]] = None
    ruleWeightFactor: Optional[float] = None


class RulesetVariableProperties(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None


class ScoreValue(BaseModel):
    rowKey: Optional[str] = None
    minValue: Optional[Dict[str, Any]] = None
    maxValue: Optional[Dict[str, Any]] = None
    includeMinValue: Optional[bool] = None
    includeMaxValue: Optional[bool] = None
    value: Optional[Dict[str, Any]] = None
    scoreValue: Optional[float] = None


class ScorecardInputVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    defaultValue: Optional[float] = None
    scoreValues: Optional[List[ScoreValue]] = None


class ScorecardOutputVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    defaultValue: Optional[float] = None


class Protocol2(str, Enum):
    plaintext = 'plaintext'
    ssl = 'ssl'


class SerJson(BaseModel):
    fail_on_missing_field: Optional[str] = None
    timestamp_pattern: Optional[str] = None


class Format3(str, Enum):
    csv = 'csv'
    json = 'json'


class SerKey(BaseModel):
    enabled: Optional[bool] = None
    format: Optional[Format3] = None
    json_: Optional[SerJson] = Field(None, alias='json')
    key_by: Optional[List[str]] = None


class Format4(str, Enum):
    xml = 'xml'
    json = 'json'
    avro = 'avro'


class SerValue(BaseModel):
    confluent_url: Optional[str] = None
    confluent_subject: Optional[str] = None
    format: Optional[Format4] = None
    json_: Optional[SerJson] = Field(None, alias='json')
    csv: Optional[Csv] = None
    exclude_key: Optional[bool] = None


class Shape(BaseModel):
    """
    Размеры для отрисовки прямоугольника
    """

    x: Optional[float] = Field(
        None, description='Параметр Х для отрисовки группы узлов'
    )
    y: Optional[float] = Field(
        None, description='Параметр Y для отрисовки группы узлов'
    )


class SimpleVariableProperties(BaseModel):
    variableName: Optional[str] = None
    variablePath: Optional[str] = None


class SinkSerde(BaseModel):
    value: Optional[SerValue] = None
    key: Optional[SerKey] = None


class Slot(BaseModel):
    name: Optional[str] = None


class Source(BaseModel):
    key_field: Optional[str] = None


class SourceSerde(BaseModel):
    value: Optional[DeValue] = None
    key: Optional[DeKey] = None


class StartNodeVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    parameterId: Optional[str] = None


class Store(BaseModel):
    location: str
    password: str


class SubDiagramOutVariableMapping(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    nodeVariable: Optional[str] = None
    externalId: Optional[str] = None
    isHide: Optional[bool] = None


class Subdiagram(Properties):
    parallelism: Optional[int] = None
    subdiagramId: Optional[str] = None
    versionId: Optional[str] = None
    inputVariablesMapping: List[NodeMappingVariable]
    outputVariablesMapping: List[SubDiagramOutVariableMapping]


class Table(BaseModel):
    name: str


class TableWithFilter(BaseModel):
    name: str
    filter: Optional[str] = None


class SearchType(str, Enum):
    INDEX_SEARCH = 'INDEX_SEARCH'
    LUA_FUNCTION_SEARCH = 'LUA_FUNCTION_SEARCH'


class LuaResultType(str, Enum):
    SCALAR = 'SCALAR'
    SCALAR_ARRAY = 'SCALAR_ARRAY'
    ROW = 'ROW'
    ROW_ARRAY = 'ROW_ARRAY'


class Predicate(str, Enum):
    EQUALS = 'EQUALS'
    GREATER_THAN = 'GREATER_THAN'
    GREATER_OR_EQUALS = 'GREATER_OR_EQUALS'
    LESS_THAN = 'LESS_THAN'
    LESS_OR_EQUALS = 'LESS_OR_EQUALS'


class TarantoolReadInputMappingVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    nodeVariable: Optional[DataSourceVariable] = None
    isNullValue: Optional[bool] = None


class DataSourceType1(str, Enum):
    USER_INPUT = 'USER_INPUT'
    DICTIONARY = 'DICTIONARY'
    DIAGRAM_ELEMENT = 'DIAGRAM_ELEMENT'


class DynamicListType1(str, Enum):
    RADIO_BUTTON = 'RADIO_BUTTON'
    DROP_DOWN_LIST = 'DROP_DOWN_LIST'


class TemplateMappingVariable(BaseModel):
    rowKey: Optional[str] = None
    id: Optional[str] = None
    displayName: Optional[str] = None
    value: Optional[Dict[str, Any]] = None
    variableName: Optional[str] = None
    primitiveTypeId: Optional[str] = None
    dataSourceType: Optional[DataSourceType1] = None
    dictionaryId: Optional[str] = None
    dynamicListType: Optional[DynamicListType1] = None
    mandatoryFlag: Optional[bool] = None
    minValue: Optional[float] = None
    maxValue: Optional[float] = None
    maxSize: Optional[int] = None


class Time(BaseModel):
    zone: Optional[str] = None


class TimeAttribute(BaseModel):
    field: Optional[str] = None
    format: Optional[str] = None


class Unit(str, Enum):
    ms = 'ms'
    s = 's'
    m = 'm'
    h = 'h'
    d = 'd'


class TimeInterval(BaseModel):
    value: Optional[int] = None
    unit: Optional[Unit] = None


class UnionNode(Properties):
    complete_schemes_equality: Optional[bool] = None


class VariablePropertiesBase(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None


class VariableViewDto(BaseModel):
    """
    Список входных параметров, доступных для назначения в качестверасчитываемого атрибута или для расчета
    """

    id: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор переменной',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    variableName: Annotated[str, StringConstraints(max_length=40)] = Field(
        ..., description='Имя переменной', examples=['Client']
    )
    typeId: UUID = Field(
        ...,
        description='Уникальный идентификатор типа переменной',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    dictId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор справочника',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    isComplex: bool = Field(
        ..., description='Признак комплексного типа (true)', examples=[False]
    )
    isDict: bool = Field(
        ..., description='Признак справочника кастомных типов (true)', examples=[False]
    )
    isArray: bool = Field(..., description='Признак массива (true)', examples=[False])
    variableRootId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор корневой переменной',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    variablePath: Optional[Annotated[str, StringConstraints(min_length=0, max_length=150)]] = Field(
        None,
        description='Путь переменной в комплексном типе',
        examples=['customer/address'],
    )


class Watermark(BaseModel):
    watermark_type: WatermarkType
    wait_duration: Optional[TimeInterval] = None
    time_passing_coefficient: Optional[float] = None


class Write(BaseModel):
    options: Optional[List[Property]] = None


class FilterSign(str, Enum):
    EQUAL = 'EQUAL'
    NOT_EQUAL = 'NOT_EQUAL'
    GREATER = 'GREATER'
    LESS = 'LESS'
    GREATER_OR_EQUAL = 'GREATER_OR_EQUAL'
    LESS_OR_EQUAL = 'LESS_OR_EQUAL'
    NOT_IN = 'NOT_IN'
    IN = 'IN'


class WriteReadVariableProperties(BaseModel):
    variableName: Optional[str] = None
    variablePath: Optional[str] = None


class NodeValidateStateResponseDto(BaseModel):
    timeStamp: datetime = Field(..., description='Время ошибки')
    uuid: Optional[UUID] = Field(
        None,
        description='uuid присвоенный при работе с объектом',
        examples=['d8d6ba76-ea3f-4d9b-b7b7-a819ef0f5549'],
    )
    httpCode: int = Field(..., description='Дублированный http код', examples=[200])
    module: str = Field(
        ..., description='Модуль, в котором производилось действие', examples=['diagram']
    )
    operation: Operation = Field(
        ..., description='Совершаемая операция', examples=['save']
    )
    message: Optional[str] = Field(
        None,
        description='Trace ошибки',
        examples=['Unable to find a model that matches key ModelKey'],
    )
    validationPayload: Optional[Dict[str, Any]] = Field(
        None, description='Объект с ошибкой'
    )
    validFlag: bool = Field(..., description='Признак корректности узла', examples=[False])


class LinkDeletedDto(BaseModel):
    """
    Список линков, которые были удалены
    """

    linkId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор ребра диаграммы',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    nextNodeId: UUID = Field(
        ...,
        description='Уникальный идентификатор последующего узла',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class NodeUpdateLeadToDiagramChangeResultDto(BaseModel):
    addedLinkIds: Optional[List[str]] = None
    deletedLinks: Optional[List[LinkDeletedDto]] = None


class NodeAutoMappingConflictViewDto(BaseModel):
    """
    Список расхождений, содержащий перечень атрибутов с ранее заполненным значением и переменных диаграммы, подходящих для маппинга
    """

    variableId: str = Field(..., examples=['Идентификатор переменной'])
    variableName: str = Field(..., examples=['Имя переменной'])
    currentVariableValue: str = Field(..., examples=['Значение переменной'])
    suggestedVariableValue: str = Field(..., examples=['Предлагаемое значение переменной'])


class NodeAutoMappingResponseDto(BaseModel):
    timeStamp: datetime = Field(..., description='Время ошибки')
    uuid: Optional[UUID] = Field(
        None,
        description='uuid присвоенный при работе с объектом',
        examples=['d8d6ba76-ea3f-4d9b-b7b7-a819ef0f5549'],
    )
    httpCode: int = Field(..., description='Дублированный http код', examples=[200])
    module: str = Field(
        ..., description='Модуль, в котором производилось действие', examples=['diagram']
    )
    operation: Operation = Field(
        ..., description='Совершаемая операция', examples=['save']
    )
    message: Optional[str] = Field(
        None,
        description='Trace ошибки',
        examples=['Unable to find a model that matches key ModelKey'],
    )
    validationPayload: Optional[Dict[str, Any]] = Field(
        None, description='Объект с ошибкой'
    )
    autoMappingConflicts: Optional[List[NodeAutoMappingConflictViewDto]] = None


class LinkMoveDto(BaseModel):
    """
    Объект для изменения таргета ребра диаграммы
    """

    linkId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор ребра диаграммы',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    diagramVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор диаграммы',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    prevNodeId: UUID = Field(
        ...,
        description='Уникальный идентификатор предыдущего узла',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    nextNodeId: UUID = Field(
        ...,
        description='Уникальный идентификатор последующего узла',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class BatchSqlGetDto(BaseModel):
    groupId: UUID = Field(
        ...,
        description='Уникальный идентификатор группы атрибутов в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    sqlSelect: Optional[Annotated[str, StringConstraints(min_length=0, max_length=4000)]] = Field(
        None, description='SQL запрос для выборки данных', examples=['select a from b']
    )
    dataProviderUuid: UUID = Field(
        ...,
        description='Уникальный идентификатор источника данных в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    diagramVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )
    id: UUID = Field(
        ...,
        description='Идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )


class BatchMappingGetDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор маппинга переменных в рамках батча в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    batchVariableId: UUID = Field(
        ...,
        description='Уникальный идентификатор переменной в рамках батча в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    groupId: UUID = Field(
        ...,
        description='Уникальный идентификатор группы атрибутов в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    mapping: Optional[Annotated[str, StringConstraints(min_length=0, max_length=255)]] = Field(
        None, description='Маппинг элемента запроса на диаграмму', examples=['mapping']
    )
    primitiveTypeId: Annotated[str, StringConstraints(min_length=0, max_length=36)] = Field(
        ..., description='Уникальный идентификатор примитивного типа', examples=['1']
    )
    name: Annotated[str, StringConstraints(min_length=0, max_length=255)] = Field(
        ..., description='Имя для отображения на странице', examples=['Имя объекта']
    )
    isNull: Optional[bool] = Field(
        None, description='Признак null значения для переменной диаграммы', examples=[True]
    )
    diagramVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )


class BatchMappingKeyUpdateDto(BaseModel):
    batchVariablesId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор переменной из списка батча в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    parentBatchVariablesId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор верхнеуровневой переменной из списка батча в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    groupId: UUID = Field(
        ...,
        description='Уникальный идентификатор группы атрибутов в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    id: Optional[UUID] = Field(
        None,
        description='Идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )


class AdditionalSettingsWithIdDto(BaseModel):
    """
    Список дополнительных настроек
    """

    id: Optional[str] = Field(
        None,
        description='Идентификатор расширенного параметра',
        examples=['2dc26a3b-aac0-4d26-8485-0e71e8815732'],
    )
    name: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Наименование параметра', examples=['hbase.client.retries.number']
    )
    value: Annotated[str, StringConstraints(max_length=1000)] = Field(
        ..., description='Значение параметра', examples=['3']
    )
    secure: Optional[bool] = Field(
        None, description='Признак конфиденциальности параметра', examples=[False]
    )


class InputType1(str, Enum):
    """
    Способ указания параметров JDBC подключения
    """

    parameters = 'parameters'
    url = 'url'


class DataProviderSettingsFullViewDto(BaseModel):
    """
    Список настроек подключения источника данных
    """

    environmentSettingsId: UUID = Field(
        ...,
        description='Идентификатор внешнего сервиса в формате UUID 4',
        examples=['a0bb1b74-bb05-42a4-9d7d-15b3ae172180'],
    )
    serverName: Annotated[str, StringConstraints(min_length=0, max_length=200)] = Field(
        ...,
        description='Hostname источника данных. Обязателен для jdbc, tarantool',
        examples=['example.com'],
    )
    hosts: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None,
        description='Список хостов кластера Mongo DB с обязательным указанием Replica Set',
        examples=['rs0/127.0.0.1:51519,127.0.0.1:51518'],
    )
    port: Optional[Annotated[str, StringConstraints(min_length=0, max_length=32)]] = Field(
        None,
        description='Порт для соединения с источником данных. Обязателен для jdbc, tarantool',
        examples=['5432'],
    )
    username: Optional[Annotated[str, StringConstraints(min_length=0, max_length=32)]] = Field(
        None, description='Логин для соединения с источником данных', examples=['login']
    )
    password: Optional[Annotated[str, StringConstraints(min_length=0, max_length=32)]] = Field(
        None, description='Логин для соединения с источником данных', examples=['password']
    )
    scheme: Optional[Annotated[str, StringConstraints(min_length=0, max_length=50)]] = Field(
        None,
        description='Схема базы данных, которая будет использоваться в источнике данных',
        examples=['test_scheme'],
    )
    additionalProperties: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None,
        description='Дополнительные параметры подключения в формате соответствующей СУБД. Имя БД должно быть указано в другом параметре. В случае Oracle здесь указывается service name и, возможно, параметры, в обоих случаях без слэша.',
        examples=['fetchSize=1000&statement_timeout=90000'],
    )
    zookeeperQuorum: Optional[str] = Field(
        None,
        description='Zookeeper Quorum. Поле обязательно для HBase',
        examples=['localhost:2181'],
    )
    zookeeperZnodeParent: Optional[str] = Field(
        None,
        description='Zookeeper Znode Parent. Поле обязательно для HBase',
        examples=['/hbase'],
    )
    additionalSettings: Optional[List[AdditionalSettingsWithIdDto]] = None
    token: Optional[str] = Field(
        None,
        description='Токен для доступа к данным. На текущий момент используется только для TDG',
        examples=['4b7b0fbf-faf2-4545-84b7-3f8f8da5a8ce'],
    )
    database: Optional[Annotated[str, StringConstraints(min_length=0, max_length=50)]] = Field(
        None,
        description='Имя базы данных в случае PostgreSQL, SQL Server, Mongo DB; SID в случае Oracle',
        examples=['master'],
    )
    inputType: Optional[InputType1] = Field(
        None, description='Способ указания параметров JDBC подключения', examples=['url']
    )
    url: Optional[str] = Field(
        None, description='JDBC URL', examples=['jdbc:postgresql://localhost/test']
    )
    sourceSettingsId: UUID = Field(
        ...,
        description='Уникальный идентификатор настроек источника данных в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class SourceType(str, Enum):
    """
    Тип источника данных
    """

    ORACLE = 'ORACLE'
    POSTGRES = 'POSTGRES'
    MSSQL = 'MSSQL'
    TARANTOOL = 'TARANTOOL'
    TARANTOOL_CARTRIDGE_CLUSTER = 'TARANTOOL_CARTRIDGE_CLUSTER'
    TARANTOOL_DATAGRID_CLUSTER = 'TARANTOOL_DATAGRID_CLUSTER'
    HBASE = 'HBASE'
    MONGO_DB = 'MONGO_DB'


class ConnectionType(str, Enum):
    """
    Тип соединения
    """

    JDBC = 'JDBC'
    NO_SQL = 'NO_SQL'


class DataProviderUpdateDto(BaseModel):
    """
    Объект для обновления полей источника данных
    """

    sourceName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя источника данных', examples=['Витрина данных']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание источника данных', examples=['Операционная БД']
    )
    sourceType: SourceType = Field(
        ..., description='Тип источника данных', examples=['ORACLE']
    )
    connectionType: ConnectionType = Field(
        ..., description='Тип соединения', examples=['JDBC']
    )
    settings: Optional[List[DataProviderSettingsFullViewDto]] = None


class CustomAttributeDictionaryValueUpdate(BaseModel):
    """
    Список значений справочника
    """

    dictValue: Dict[str, Any] = Field(
        ...,
        description='Значение справочника',
        examples=['Отображаемое наименование значения справочника'],
    )
    dictValueDisplayName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ...,
        description='Отображаемое наименование значения справочникаа',
        examples=['Отображаемое наименование значения справочника'],
    )
    id: UUID = Field(
        ...,
        description='Идентификатор значения справочника в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class AttributeCreate(BaseModel):
    """
    Лист атрибутов для инициализации при создании пользовательского типа
    """

    attributeName: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя атрибута', examples=['name']
    )
    complexFlag: bool = Field(
        ...,
        description='Флаг отображающий тип данных, к которым относится атрибут',
        examples=[True],
    )
    arrayFlag: bool = Field(
        ...,
        description='Флаг отображающий тип объекта данных, к которым относится атрибут',
        examples=[False],
    )
    primitiveTypeId: Optional[str] = Field(
        None,
        description='Уникальный идентификатор примитивного типа. Может принимать null значения',
        examples=['1'],
    )
    complexTypeVersionId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор комплексного типа, на который ссылается атрибут в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание атрибута', examples=['Имя клиента']
    )
    parentId: UUID = Field(
        ...,
        description='Уникальный идентификатор комплексного типа, от которого произведен атрибут, в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )


class ComplexTypeUpdate(BaseModel):
    """
    Объект для обновления полей сложного типа
    """

    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    displayName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Имя для отображения на странице', examples=['Имя объекта']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None,
        description='Описание объекта комплексного типа',
        examples=['Объект пользователя, который включает в себя поля FirstName, SecondName, Phone...'],
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    attributes: Optional[List[AttributeCreate]] = None


class AttributeUpdate(BaseModel):
    attributeId: UUID = Field(
        ...,
        description='Уникальный идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    attributeName: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя атрибута', examples=['name']
    )
    complexFlag: bool = Field(
        ...,
        description='Флаг отображающий тип данных, к которым относится атрибут',
        examples=[True],
    )
    arrayFlag: bool = Field(
        ...,
        description='Флаг отображающий тип объекта данных, к которым относится атрибут',
        examples=[False],
    )
    primitiveTypeId: Optional[str] = Field(
        None,
        description='Уникальный идентификатор примитивного типа. Может принимать null значения',
        examples=['1'],
    )
    complexTypeVersionId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор комплексного типа, на который ссылается атрибут в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание атрибута', examples=['Имя клиента']
    )
    parentId: UUID = Field(
        ...,
        description='Уникальный идентификатор комплексного типа, от которого произведен атрибут, в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )


class DataSourceType2(str, Enum):
    """
    Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)
    """

    USER_INPUT = 'USER_INPUT'
    DICTIONARY = 'DICTIONARY'
    DIAGRAM_ELEMENT = 'DIAGRAM_ELEMENT'


class DynamicListType2(str, Enum):
    """
    Тип отображения динамического списка
    """

    RADIO_BUTTON = 'RADIO_BUTTON'
    DROP_DOWN_LIST = 'DROP_DOWN_LIST'


class CommunicationVariableFullViewDto(BaseModel):
    """
    Список переменных канала коммуникации
    """

    variableName: str = Field(
        ..., description='Имя переменной', examples=['имя_переменной']
    )
    scriptVariableName: str = Field(
        ..., description='Имя переменной скрипта', examples=['имя_переменной_скрипта']
    )
    primitiveTypeId: Optional[str] = Field(
        None, description='Id простого типа переменной', examples=['1']
    )
    complexTypeVersionId: Optional[UUID] = Field(
        None,
        description='Id комплексного типа переменной',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    arrayFlag: bool = Field(
        ..., description='Является ли переменная массивом', examples=[False]
    )
    dataSourceType: DataSourceType2 = Field(
        ...,
        description='Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)',
    )
    minValue: Optional[float] = Field(
        None, description='Минимальное значение переменной', examples=[5.0]
    )
    maxValue: Optional[float] = Field(
        None, description='Максимальное значение переменной', examples=[15.0]
    )
    maxSize: Optional[int] = Field(
        None, description='Максимальная длина переменной', examples=[100]
    )
    dictionaryId: Optional[UUID] = Field(
        None,
        description='Id справочника, в котором находятся допустимые значения переменной',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    dynamicListType: Optional[DynamicListType2] = Field(
        None, description='Тип отображения динамического списка'
    )
    mandatoryFlag: bool = Field(
        ..., description='Является ли переменная обязательной', examples=[False]
    )
    id: UUID = Field(
        ..., description='Id переменной', examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )


class CommunicationChannelUpdateUserVersionDto(BaseModel):
    """
    Объект для обновления канала коммуникации
    """

    versionName: Optional[Annotated[str, StringConstraints(min_length=1, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )


class CatalogUpdate(BaseModel):
    """
    Объект для перемещения элемента из каталога в каталог
    """

    catalogName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя Каталога', examples=['Каталог №1']
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class CatalogMove(BaseModel):
    """
    Объект для перемещения элемента из каталога в каталог
    """

    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    elementId: Optional[UUID] = Field(
        None,
        description='Идентификатор элемента в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class AggregateFunction1(str, Enum):
    """
    Функция агрегата
    """

    AggAverage = 'AggAverage'
    AggCount = 'AggCount'
    AggCountDistinct = 'AggCountDistinct'
    AggCountNonNull = 'AggCountNonNull'
    AggFirstValue = 'AggFirstValue'
    AggLastValue = 'AggLastValue'
    AggMax = 'AggMax'
    AggMin = 'AggMin'
    AggMode = 'AggMode'
    AggSum = 'AggSum'
    AggStd = 'AggStd'


class AggregateJson(BaseModel):
    """
    Json агрегата
    """

    aggregateName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ...,
        description='Техническое наименование агрегата',
        examples=['Amount_client_24_h'],
    )
    aggregateVariableType: Annotated[str, StringConstraints(max_length=2)] = Field(
        ..., description='Тип переменной агрегата', examples=['1']
    )
    aggregateFunction: AggregateFunction1 = Field(
        ..., description='Функция агрегата', examples=['aggSum']
    )
    aggregateDescription: Annotated[str, StringConstraints(max_length=1000)] = Field(
        ...,
        description='Описание агрегата',
        examples=['Сумма операций клиента за 24 часа'],
    )
    groupingElement: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Группирующий элемент', examples=['Client_id']
    )


class AggregateUpdate(BaseModel):
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    aggregateDescription: Optional[Annotated[str, StringConstraints(max_length=1000)]] = Field(
        None,
        description='Описание агрегата (бизнес наименование)',
        examples=['описание агрегата'],
    )
    aggregateJson: AggregateJson


class ValidationType(str, Enum):
    """
    Тип валидации sql-запроса. По этому полю выбирается нужная стратегия извлечения данных, необходимых для процесса валидациии.
    """

    NODE = 'NODE'
    BATCH = 'BATCH'


class SqlValidationApiDto(BaseModel):
    validationType: ValidationType = Field(
        ...,
        description='Тип валидации sql-запроса. По этому полю выбирается нужная стратегия извлечения данных, необходимых для процесса валидациии.',
        examples=['NODE'],
    )
    dataProviderUuid: UUID = Field(
        ...,
        description='Идентификатор источника данных в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    sqlSelectQuery: str = Field(
        ...,
        description='SQL-запрос для проверки',
        examples=['select column_name from table_name'],
    )
    nodeId: Optional[UUID] = Field(
        None,
        description='Идентификатор валидируемого узла в формате UUID 4. Необходим при типе валидации NODE',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    diagramVersionId: Optional[UUID] = Field(
        None,
        description='Идентификатор версии диаграммы в формате UUID 4. Необходим при типе валидации BATCH',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class JsonGenerationVariableDto(BaseModel):
    """
    Параметры, используемые в выражении
    """

    variableName: str = Field(..., description='Имя переменной')
    variablePath: Optional[str] = Field(None, description='Путь до переменной')
    typeId: str = Field(..., description='Идентификатор типа переменной')
    isArray: Optional[bool] = Field(None, description='Признак массива')
    isComplex: Optional[bool] = Field(None, description='Признак сложного типа')
    isDict: Optional[bool] = Field(None, description='Признак словаря')
    variableRootId: Optional[str] = Field(None, description='Исходный комплексный тип')


class Status(str, Enum):
    """
    Статус валидации
    """

    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


class JsonGenerationResultValidationDto(BaseModel):
    status: Optional[Status] = Field(None, description='Статус валидации')
    result: Optional[str] = Field(None, description='Результат валидации')


class UserFunctionShortView(BaseModel):
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    jarFunctionName: str = Field(
        ...,
        description='Имя пользовательской функции в jar-файле',
        examples=['myFunction(java.lang.Integer)'],
    )
    functionClass: str = Field(
        ...,
        description='Полный путь до класса, в котором содержится функция в jar-файле',
        examples=['com.package.SomeClass'],
    )


class UserJarFunctionsDto(BaseModel):
    jarId: Optional[str] = None
    functions: Optional[List[UserFunctionShortView]] = None


class UserFunctionUploadView(BaseModel):
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    jarFunctionName: str = Field(
        ...,
        description='Имя пользовательской функции в jar-файле',
        examples=['myFunction(java.lang.Integer)'],
    )
    functionClass: str = Field(
        ...,
        description='Полный путь до класса, в котором содержится функция в jar-файле',
        examples=['com.package.SomeClass'],
    )
    resultType: Optional[str] = Field(
        None,
        description='Тип возвращаемого пользовательской функцией значения',
        examples=['Дробный'],
    )
    description: Optional[str] = Field(
        None, description='Описание пользовательской функции', examples=['Описание']
    )


class StartTestsDto(BaseModel):
    startedTests: Optional[List[str]] = Field(
        None, description='Идентификаторы запущенных'
    )
    failedToStartTests: Optional[Dict[str, str]] = Field(
        None,
        description='Тесты, которые не удалось запустить. Ключ - id теста, значение - текст причины',
    )


class Locale(str, Enum):
    en = 'en'
    ru = 'ru'


class EmptyTestCreate(BaseModel):
    locale: Locale
    diagramId: str


class EmptyTestDto(BaseModel):
    testId: UUID = Field(
        ...,
        description='Уникальный идентификатор теста в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    testName: str = Field(..., description='Имя теста', examples=['test_01'])
    timeout: Optional[int] = Field(None, description='Таймаут в секундах', examples=[10])


class Protocol3(str, Enum):
    """
    Протокол доступа
    """

    REST = 'REST'
    SOAP = 'SOAP'


class ExternalServiceHeaderViewWithoutIdDto(BaseModel):
    """
    Список заголовков внешнего сервиса
    """

    headerName: Annotated[str, StringConstraints(min_length=0, max_length=50)] = Field(
        ..., description='Имя заголовка', examples=['Cookie']
    )
    headerValue: str = Field(..., description='Значение заголовка', examples=['Value'])


class ServiceType2(str, Enum):
    """
    Тип обмена
    """

    HTTP = 'HTTP'
    HTTPS = 'HTTPS'


class ExternalServiceSettingsViewWithoutIdDto(BaseModel):
    """
    Список настроек подключения внешнего сервиса
    """

    environmentSettingsId: UUID = Field(
        ...,
        description='Идентификатор внешнего сервиса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    host: Annotated[str, StringConstraints(min_length=0, max_length=50)] = Field(
        ..., description='Имя хоста', examples=['192.168.0.1']
    )
    serviceType: ServiceType2 = Field(..., description='Тип обмена', examples=['HTTPS'])
    endpoint: Annotated[str, StringConstraints(min_length=0, max_length=50)] = Field(
        ..., description='Endpoint внешнего сервиса', examples=['diagram/node/{nodeId}']
    )
    port: Annotated[int, Field(le=65535)] = Field(
        ..., description='Порт внешнего сервиса', examples=[8080]
    )
    secondAttemptsCnt: Optional[Annotated[int, Field(le=10)]] = Field(
        None, description='Количество повторных попыток отправки сообщения', examples=[3]
    )
    transactionsPerSecond: Optional[int] = Field(
        None, description='Частота транзакций', examples=[1]
    )
    interval: Optional[int] = Field(
        None,
        description='Интервал между повторными попытками отправки в секундах',
        examples=[5],
    )
    timeout: Optional[int] = Field(
        None, description='Максимальное время ожидания ответа в секундах', examples=[5]
    )
    keycloakClientId: Optional[Annotated[str, StringConstraints(max_length=50)]] = Field(
        None, description='Keycloak client', examples=['decision.frontend']
    )
    keycloakClientSecret: Optional[Annotated[str, StringConstraints(max_length=100)]] = Field(
        None, description='Keycloak Client Secret', examples=['secret']
    )
    keycloakUser: Optional[Annotated[str, StringConstraints(max_length=32)]] = Field(
        None, description='Keycloak User', examples=['userName']
    )
    keycloakPassword: Optional[Annotated[str, StringConstraints(max_length=100)]] = Field(
        None, description='Keycloak password', examples=['password']
    )
    keycloakGrantType: Optional[KeycloakGrantType] = Field(
        None, description='Тип GrantType'
    )
    keycloakServer: Optional[Annotated[str, StringConstraints(max_length=200)]] = Field(
        None,
        description='Сервер Keycloak',
        examples=['https://auth.k8s.datasapience.ru/auth'],
    )
    keycloakRealm: Optional[Annotated[str, StringConstraints(max_length=50)]] = Field(
        None, description='Realm Keycloak', examples=['dev']
    )
    isKeyCloakAuth: Optional[bool] = Field(
        None, description='Использовать авторизацию при помощи Keycloak', examples=[False]
    )


class VariableType2(str, Enum):
    """
    Тип параметра (входной, выходной, рассчитываемый)
    """

    IN = 'IN'
    OUT = 'OUT'
    CALCULATED = 'CALCULATED'
    ERROR = 'ERROR'


class ExternalServiceVariableViewWithoutIdDto(BaseModel):
    """
    Список переменных внешнего сервиса
    """

    variableName: str = Field(
        ..., description='Имя переменной', examples=['имя_переменной']
    )
    primitiveTypeId: Optional[str] = Field(
        None, description='Id простого типа переменной', examples=['1']
    )
    complexTypeVersionId: Optional[UUID] = Field(
        None,
        description='Id комплексного типа переменной',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    variableType: Optional[VariableType2] = Field(
        None, description='Тип параметра (входной, выходной, рассчитываемый)'
    )
    isArray: bool = Field(
        ..., description='Является ли переменная массивом', examples=[False]
    )
    isComplex: bool = Field(
        ..., description='Является ли переменная комплексным типом', examples=[False]
    )
    sourcePath: Optional[str] = Field(
        None,
        description='Путь к значению переменной в структуре ответа сервиса',
        examples=['/'],
    )
    expression: Optional[str] = Field(
        None, description='Выражение для рассчета переменной', examples=['ln(e)']
    )
    functionIds: Optional[List[str]] = None
    childVariables: Optional[List[ExternalServiceVariableViewWithoutIdDto]] = None


class ExternalServiceCreateUserVersionDto(BaseModel):
    isAvailableInProperties: Optional[bool] = Field(
        None,
        description='Флаг того, что характеристики ВС будут доступны в __PROPERTIES__',
        examples=[True],
    )
    batchFlag: Optional[bool] = Field(
        None, description='Признак пакетного взаимодействия', examples=[False]
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание внешнего сервиса', examples=['Внешний сервис данных']
    )
    fileFormat: Optional[FileFormat] = Field(
        None, description='Формат сообщения', examples=['JSON']
    )
    method: Optional[Method] = Field(
        None, description='Используемый метод взаимодействия', examples=['GET']
    )
    protocol: Protocol3 = Field(..., description='Протокол доступа', examples=['REST'])
    syncType: SyncType = Field(..., description='Тип взаимодействия', examples=['SYNC'])
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    body: Optional[str] = Field(
        None, description='Тело запроса', examples=['{request_id: {requestid}}']
    )
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )
    versionName: Optional[Annotated[str, StringConstraints(min_length=1, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    serviceSettings: Optional[List[ExternalServiceSettingsFullViewDto]] = None
    headers: Optional[List[ExternalServiceHeaderViewWithoutIdDto]] = None
    variables: Optional[List[ExternalServiceVariableViewWithoutIdDto]] = None


class VariableType3(str, Enum):
    """
    Тип параметра (входной, выходной)
    """

    IN = 'IN'
    OUT = 'OUT'


class ScriptVariableViewWithoutVersionIdDto(BaseModel):
    """
    Список переменных скрипта
    """

    variableName: str = Field(
        ..., description='Имя переменной', examples=['имя_переменной']
    )
    primitiveTypeId: Optional[int] = Field(
        None, description='Id простого типа переменной', examples=[1]
    )
    complexTypeVersionId: Optional[UUID] = Field(
        None,
        description='Id комплексного типа переменной',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    variableType: VariableType3 = Field(
        ..., description='Тип параметра (входной, выходной)'
    )
    arrayFlag: bool = Field(
        ..., description='Является ли переменная массивом', examples=[False]
    )


class PythonValidate(BaseModel):
    """
    Объект для валидации
    """

    variables: Optional[List[ScriptVariableFullView]] = None
    scriptText: str = Field(..., description='Текст скрипта', examples=['Текст скрипта'])


class PythonCreateUserVersion(BaseModel):
    scriptText: str = Field(..., description='Текст скрипта', examples=['Текст скрипта'])
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание скрипта', examples=['описание скрипта']
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    variables: Optional[List[ScriptVariableViewWithoutVersionIdDto]] = None
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )
    versionName: Optional[Annotated[str, StringConstraints(min_length=1, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    pythonEnvironmentVersionId: Optional[UUID] = Field(
        None,
        description='Идентификатор версии окружения python в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    scriptId: UUID = Field(
        ...,
        description='Идентификатор скрипта в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class GroovyCreate(BaseModel):
    scriptText: str = Field(..., description='Текст скрипта', examples=['Текст скрипта'])
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание скрипта', examples=['описание скрипта']
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    variables: Optional[List[ScriptVariableViewWithoutVersionIdDto]] = None


class GroovyValidate(BaseModel):
    """
    Объект для валидации
    """

    variables: Optional[List[ScriptVariableFullView]] = None
    scriptText: str = Field(..., description='Текст скрипта', examples=['Текст скрипта'])


class GroovyCreateUserVersion(BaseModel):
    scriptText: str = Field(..., description='Текст скрипта', examples=['Текст скрипта'])
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание скрипта', examples=['описание скрипта']
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    variables: Optional[List[ScriptVariableViewWithoutVersionIdDto]] = None
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )
    versionName: Optional[Annotated[str, StringConstraints(min_length=1, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    scriptId: UUID = Field(
        ...,
        description='Идентификатор скрипта в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class PythonVersionFullViewDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор версии python в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionName: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя версии python', examples=['Python 3.6']
    )
    image: Annotated[str, StringConstraints(min_length=1, max_length=200)] = Field(
        ...,
        description='Адрес образа python',
        examples=['harbor.k8s.datasapience.ru/datasapience-registry/st-di/udf-server'],
    )


class PythonEnvironmentSettingsWithoutIdDto(BaseModel):
    """
    Список настроек окружения питона по окружению
    """

    limitsCpu: float = Field(
        ..., description='Верхняя граница количество ядер', examples=[0.1]
    )
    requestsCpu: float = Field(
        ..., description='Необходимое количество ядер', examples=[0.1]
    )
    limitsMemory: int = Field(
        ..., description='Верхняя граница количество памяти', examples=[1000]
    )
    requestsMemory: int = Field(
        ..., description='Необходимое количество ядер', examples=[500]
    )
    environmentId: UUID = Field(
        ...,
        description='Идентификатор окружения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class RuleTypeCreateDto(BaseModel):
    """
    Объект для создания нового типа правила
    """

    typeName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Системное имя в UTF-8', examples=['Name object']
    )
    displayName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Имя для отображения на странице', examples=['Имя объекта']
    )


class RestSourceSettingsViewWithoutIdDto(BaseModel):
    """
    Список настроек подключения внешнего сервиса
    """

    environmentId: UUID = Field(
        ...,
        description='Идентификатор настроек окружения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    host: Annotated[str, StringConstraints(min_length=0, max_length=50)] = Field(
        ..., description='Имя хоста', examples=['192.168.0.1']
    )
    port: Annotated[int, Field(le=65535)] = Field(
        ..., description='Порт внешнего сервиса', examples=[8080]
    )
    protocol: Protocol1


class OfferVariableWithoutIdDto(BaseModel):
    """
    Список переменных шаблона предложения
    """

    variableName: str = Field(
        ..., description='Имя переменной', examples=['имя_переменной']
    )
    scriptVariableName: str = Field(
        ..., description='Имя переменной скрипта', examples=['имя_переменной_скрипта']
    )
    primitiveTypeId: Optional[str] = Field(
        None, description='Id простого типа переменной', examples=['1']
    )
    complexTypeVersionId: Optional[UUID] = Field(
        None,
        description='Id комплексного типа переменной',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    arrayFlag: bool = Field(
        ..., description='Является ли переменная массивом', examples=[False]
    )
    dataSourceType: DataSourceType2 = Field(
        ...,
        description='Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)',
    )
    minValue: Optional[float] = Field(
        None, description='Минимальное значение переменной', examples=[5.0]
    )
    maxValue: Optional[float] = Field(
        None, description='Максимальное значение переменной', examples=[15.0]
    )
    maxSize: Optional[int] = Field(
        None, description='Максимальная длина переменной', examples=[100]
    )
    dictionaryId: Optional[UUID] = Field(
        None,
        description='Id справочника, в котором находятся допустимые значения переменной',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    dynamicListType: Optional[DynamicListType2] = Field(
        None, description='Тип отображения динамического списка'
    )
    mandatoryFlag: bool = Field(
        ..., description='Является ли переменная обязательной', examples=[False]
    )


class OfferCreateUserVersionDto(BaseModel):
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    scriptVersionId: UUID = Field(
        ...,
        description='Идентификатор версии скрипта, связанного с шаблоном предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    scriptName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ...,
        description='Имя скрипта, связанного с шаблоном предложения в формате UUID 4',
        examples=['Код создания предложения Автокредит'],
    )
    scriptId: UUID = Field(
        ...,
        description='Идентификатор скрипта, связанного с шаблоном предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    offerComplexTypeVersionId: UUID = Field(
        ...,
        description='Id комплексного типа предложения',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    id: UUID = Field(
        ...,
        description='Идентификатор шаблона предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionName: Optional[Annotated[str, StringConstraints(min_length=1, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )
    offerVariables: Optional[List[OfferVariableWithoutIdDto]] = None


class ObjectType(str, Enum):
    """
    Тип объекта
    """

    DEPLOY = 'DEPLOY'
    DIAGRAM = 'DIAGRAM'
    AGGREGATE = 'AGGREGATE'
    CUSTOM_CODE = 'CUSTOM_CODE'
    COMPLEX_TYPE = 'COMPLEX_TYPE'
    SERVICE = 'SERVICE'
    REST_SOURCE = 'REST_SOURCE'
    DATA_PROVIDER = 'DATA_PROVIDER'
    CUSTOM_ATTRIBUTE_DICTIONARY = 'CUSTOM_ATTRIBUTE_DICTIONARY'
    COMMUNICATION_CHANNEL = 'COMMUNICATION_CHANNEL'
    OFFER = 'OFFER'
    USER_FUNCTION = 'USER_FUNCTION'
    DATA_PROVIDER_RELATION = 'DATA_PROVIDER_RELATION'
    CATALOG = 'CATALOG'
    KAFKA = 'KAFKA'
    PYTHON_ENVIRONMENT = 'PYTHON_ENVIRONMENT'
    PYTHON_ENVIRONMENT_RELATION = 'PYTHON_ENVIRONMENT_RELATION'
    DIAGRAM_RELATION = 'DIAGRAM_RELATION'
    CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS = 'CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS'
    OFFER_RELATION = 'OFFER_RELATION'
    SERVICE_RELATION = 'SERVICE_RELATION'
    REST_SOURCE_RELATION = 'REST_SOURCE_RELATION'
    CUSTOM_CODE_RELATION = 'CUSTOM_CODE_RELATION'
    COMMUNICATION_RELATION = 'COMMUNICATION_RELATION'
    AGGREGATE_RELATION = 'AGGREGATE_RELATION'
    MESSAGE_BROKER = 'MESSAGE_BROKER'
    LOCKING = 'LOCKING'


class ObjectVersionType(str, Enum):
    """
    Тип версии объекта
    """

    TEMP = 'TEMP'
    DEPLOYED = 'DEPLOYED'
    LATEST = 'LATEST'
    USER_LOCAL = 'USER_LOCAL'
    USER_TEMP = 'USER_TEMP'
    USER_GLOBAL = 'USER_GLOBAL'
    TEST_DEPLOYED = 'TEST_DEPLOYED'


class ConfirmImportObjectInfo(BaseModel):
    """
    Список предложений
    """

    objectType: ObjectType = Field(..., description='Тип объекта')
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Диаграмма расчета платежа']
    )
    objectId: UUID = Field(
        ...,
        description='Уникальный идентификатор объекта',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии объекта',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectVersionName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Уникальный идентификатор версии объекта', examples=['Версия 1.0']
    )
    objectVersionType: ObjectVersionType = Field(..., description='Тип версии объекта')
    rootObjects: Optional[Dict[str, str]] = None
    isExists: bool = Field(
        ...,
        description='Признак наличия объекта или версии объекта на контуре импорта',
        examples=[True],
    )


class Status1(str, Enum):
    """
    Статус операции над объектом
    """

    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    CANCELED = 'CANCELED'


class ImportObjectInfo(BaseModel):
    """
    Список предложений
    """

    objectType: ObjectType = Field(..., description='Тип объекта')
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Диаграмма расчета платежа']
    )
    objectId: UUID = Field(
        ...,
        description='Уникальный идентификатор объекта',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии объекта',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectVersionName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Уникальный идентификатор версии объекта', examples=['Версия 1.0']
    )
    objectVersionType: ObjectVersionType = Field(..., description='Тип версии объекта')
    rootObjects: Optional[Dict[str, str]] = None
    isExists: bool = Field(
        ...,
        description='Признак наличия объекта или версии объекта на контуре импорта',
        examples=[True],
    )
    isSelected: bool = Field(
        ..., description='Признак выбранного объекта', examples=[True]
    )
    status: Status1 = Field(..., description='Статус операции над объектом')


class SelectedImportStatusDto(BaseModel):
    deploys: Optional[List[ImportObjectInfo]] = None
    diagrams: Optional[List[ImportObjectInfo]] = None
    complexTypes: Optional[List[ImportObjectInfo]] = None
    dictionaries: Optional[List[ImportObjectInfo]] = None
    scripts: Optional[List[ImportObjectInfo]] = None
    externalServices: Optional[List[ImportObjectInfo]] = None
    aggregates: Optional[List[ImportObjectInfo]] = None
    dataProviders: Optional[List[ImportObjectInfo]] = None
    communications: Optional[List[ImportObjectInfo]] = None
    offers: Optional[List[ImportObjectInfo]] = None


class ObjectsType(str, Enum):
    """
    Тип экспортируемого объекта
    """

    DEPLOY = 'DEPLOY'
    DIAGRAM = 'DIAGRAM'
    AGGREGATE = 'AGGREGATE'
    CUSTOM_CODE = 'CUSTOM_CODE'
    COMPLEX_TYPE = 'COMPLEX_TYPE'
    SERVICE = 'SERVICE'
    REST_SOURCE = 'REST_SOURCE'
    DATA_PROVIDER = 'DATA_PROVIDER'
    CUSTOM_ATTRIBUTE_DICTIONARY = 'CUSTOM_ATTRIBUTE_DICTIONARY'
    COMMUNICATION_CHANNEL = 'COMMUNICATION_CHANNEL'
    OFFER = 'OFFER'
    USER_FUNCTION = 'USER_FUNCTION'
    DATA_PROVIDER_RELATION = 'DATA_PROVIDER_RELATION'
    CATALOG = 'CATALOG'
    KAFKA = 'KAFKA'
    PYTHON_ENVIRONMENT = 'PYTHON_ENVIRONMENT'
    PYTHON_ENVIRONMENT_RELATION = 'PYTHON_ENVIRONMENT_RELATION'
    DIAGRAM_RELATION = 'DIAGRAM_RELATION'
    CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS = 'CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS'
    OFFER_RELATION = 'OFFER_RELATION'
    SERVICE_RELATION = 'SERVICE_RELATION'
    REST_SOURCE_RELATION = 'REST_SOURCE_RELATION'
    CUSTOM_CODE_RELATION = 'CUSTOM_CODE_RELATION'
    COMMUNICATION_RELATION = 'COMMUNICATION_RELATION'
    AGGREGATE_RELATION = 'AGGREGATE_RELATION'
    MESSAGE_BROKER = 'MESSAGE_BROKER'
    LOCKING = 'LOCKING'


class GenerateConfirmExportDtoRequest(BaseModel):
    """
    Объект для запроса списка экспортируемых объектов
    """

    objectsType: ObjectsType = Field(..., description='Тип экспортируемого объекта')
    objectIds: List[str]
    isIncludeAllVersions: bool = Field(
        ..., description='Признак экспорта всех версий объекта', examples=[False]
    )
    isIncludeDependencies: bool = Field(
        ..., description='Признак включения зависимых объектов', examples=[False]
    )


class BasicMigrationObjectInfo(BaseModel):
    """
    Список предложений
    """

    objectType: ObjectType = Field(..., description='Тип объекта')
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Диаграмма расчета платежа']
    )
    objectId: UUID = Field(
        ...,
        description='Уникальный идентификатор объекта',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии объекта',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectVersionName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Уникальный идентификатор версии объекта', examples=['Версия 1.0']
    )
    objectVersionType: ObjectVersionType = Field(..., description='Тип версии объекта')
    rootObjects: Optional[Dict[str, str]] = None


class ConfirmExportDto(BaseModel):
    deploys: Optional[List[BasicMigrationObjectInfo]] = None
    diagrams: Optional[List[BasicMigrationObjectInfo]] = None
    complexTypes: Optional[List[BasicMigrationObjectInfo]] = None
    dictionaries: Optional[List[BasicMigrationObjectInfo]] = None
    scripts: Optional[List[BasicMigrationObjectInfo]] = None
    externalServices: Optional[List[BasicMigrationObjectInfo]] = None
    aggregates: Optional[List[BasicMigrationObjectInfo]] = None
    dataProviders: Optional[List[BasicMigrationObjectInfo]] = None
    communications: Optional[List[BasicMigrationObjectInfo]] = None
    offers: Optional[List[BasicMigrationObjectInfo]] = None


class ExportObjectInfo(BaseModel):
    """
    Список предложений
    """

    objectType: ObjectType = Field(..., description='Тип объекта')
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Диаграмма расчета платежа']
    )
    objectId: UUID = Field(
        ...,
        description='Уникальный идентификатор объекта',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии объекта',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectVersionName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Уникальный идентификатор версии объекта', examples=['Версия 1.0']
    )
    objectVersionType: ObjectVersionType = Field(..., description='Тип версии объекта')
    rootObjects: Optional[Dict[str, str]] = None
    isSelected: bool = Field(
        ..., description='Признак выбранного объекта', examples=[True]
    )
    status: Status1 = Field(..., description='Статус операции над объектом')


class ExportStatusDto(BaseModel):
    deploys: Optional[List[ExportObjectInfo]] = None
    diagrams: Optional[List[ExportObjectInfo]] = None
    complexTypes: Optional[List[ExportObjectInfo]] = None
    dictionaries: Optional[List[ExportObjectInfo]] = None
    scripts: Optional[List[ExportObjectInfo]] = None
    externalServices: Optional[List[ExportObjectInfo]] = None
    aggregates: Optional[List[ExportObjectInfo]] = None
    dataProviders: Optional[List[ExportObjectInfo]] = None
    communications: Optional[List[ExportObjectInfo]] = None
    offers: Optional[List[ExportObjectInfo]] = None


class ExportResponseDto(BaseModel):
    exportStatus: Optional[ExportStatusDto] = None
    totalNumberOfObjects: Optional[int] = None
    numberOfSelectedObjects: Optional[int] = None
    numberOfExportedObjects: Optional[int] = None
    fileName: Optional[str] = None


class LockingDtoShortView(BaseModel):
    timeStamp: datetime = Field(..., description='Время ошибки')
    uuid: Optional[UUID] = Field(
        None,
        description='uuid присвоенный при работе с объектом',
        examples=['d8d6ba76-ea3f-4d9b-b7b7-a819ef0f5549'],
    )
    httpCode: int = Field(..., description='Дублированный http код', examples=[200])
    module: str = Field(
        ..., description='Модуль, в котором производилось действие', examples=['diagram']
    )
    operation: Operation = Field(
        ..., description='Совершаемая операция', examples=['save']
    )
    message: Optional[str] = Field(
        None,
        description='Trace ошибки',
        examples=['Unable to find a model that matches key ModelKey'],
    )
    validationPayload: Optional[Dict[str, Any]] = Field(
        None, description='Объект с ошибкой'
    )
    objectName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Тестовая диаграмма']
    )
    createByUser: Optional[str] = None


class ObjectType4(str, Enum):
    DEPLOY = 'DEPLOY'
    DIAGRAM = 'DIAGRAM'
    AGGREGATE = 'AGGREGATE'
    CUSTOM_CODE = 'CUSTOM_CODE'
    COMPLEX_TYPE = 'COMPLEX_TYPE'
    SERVICE = 'SERVICE'
    REST_SOURCE = 'REST_SOURCE'
    DATA_PROVIDER = 'DATA_PROVIDER'
    CUSTOM_ATTRIBUTE_DICTIONARY = 'CUSTOM_ATTRIBUTE_DICTIONARY'
    COMMUNICATION_CHANNEL = 'COMMUNICATION_CHANNEL'
    OFFER = 'OFFER'
    USER_FUNCTION = 'USER_FUNCTION'
    DATA_PROVIDER_RELATION = 'DATA_PROVIDER_RELATION'
    CATALOG = 'CATALOG'
    KAFKA = 'KAFKA'
    PYTHON_ENVIRONMENT = 'PYTHON_ENVIRONMENT'
    PYTHON_ENVIRONMENT_RELATION = 'PYTHON_ENVIRONMENT_RELATION'
    DIAGRAM_RELATION = 'DIAGRAM_RELATION'
    CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS = 'CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS'
    OFFER_RELATION = 'OFFER_RELATION'
    SERVICE_RELATION = 'SERVICE_RELATION'
    REST_SOURCE_RELATION = 'REST_SOURCE_RELATION'
    CUSTOM_CODE_RELATION = 'CUSTOM_CODE_RELATION'
    COMMUNICATION_RELATION = 'COMMUNICATION_RELATION'
    AGGREGATE_RELATION = 'AGGREGATE_RELATION'
    MESSAGE_BROKER = 'MESSAGE_BROKER'
    LOCKING = 'LOCKING'


class LockedObjectEntity(BaseModel):
    objectType: Optional[ObjectType4] = None
    objectId: Optional[str] = None


class KafkaAdditionalSettingsWithoutIdDto(BaseModel):
    """
    Список дополнительных настроек Kafka
    """

    propertyName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Наименование параметра', examples=['kafka.bootstrap.servers']
    )
    propertyValue: Annotated[str, StringConstraints(max_length=1000)] = Field(
        ..., description='Значение параметра', examples=['kafka-bootstrap.server.ru']
    )
    propertySecure: Optional[bool] = Field(
        None, description='Признак конфиденциальности параметра', examples=[False]
    )


class KafkaSettingsWithoutIdDto(BaseModel):
    """
    Список настроек Kafka по окружению
    """

    bootstrapServers: Optional[str] = Field(
        None,
        description='bootstrapServers kafka',
        examples=['bootstrapServer1:9092,bootstrapServer2:9092'],
    )
    environmentId: UUID = Field(
        ...,
        description='Идентификатор окружения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    kafkaAdditionalSettings: Optional[List[KafkaAdditionalSettingsWithoutIdDto]] = None


class KafkaEnvironmentCreateDto(BaseModel):
    """
    Параметры Kafka
    """

    kafkaUrl: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Url kafka', examples=['http://localhost:29092']
    )
    kafkaEnvironmentAdditionalSettings: Optional[
        List[KafkaAdditionalSettingsWithoutIdDto]
    ] = None


class DiagramCreateNewVersion(BaseModel):
    """
    Новая диаграмма
    """

    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    diagramId: UUID = Field(
        ...,
        description='Идентификатор диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )
    diagramDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=2000)]] = Field(
        None,
        description='Описание диаграммы',
        examples=['Диаграмма обладает функционалом и выполняет...'],
    )
    errorResponseFlag: bool = Field(
        ..., description='Флаг обработки аварийного ответа', examples=[True]
    )
    metaInfo: Optional[DiagramMetaInfo] = None


class VersionType(str, Enum):
    """
    Тип версии
    """

    TEMP = 'TEMP'
    DEPLOYED = 'DEPLOYED'
    LATEST = 'LATEST'
    USER_LOCAL = 'USER_LOCAL'
    USER_TEMP = 'USER_TEMP'
    USER_GLOBAL = 'USER_GLOBAL'
    TEST_DEPLOYED = 'TEST_DEPLOYED'


class LinkViewDto(BaseModel):
    linkId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор ребра диаграммы',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    prevNodeId: UUID = Field(
        ...,
        description='Уникальный идентификатор предыдущего узла',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    nextNodeId: UUID = Field(
        ...,
        description='Уникальный идентификатор последующего узла',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class DeployType(str, Enum):
    """
    Тип деплоя
    """

    REALTIME = 'REALTIME'
    MANUAL_BATCH = 'MANUAL_BATCH'
    AUTO_BATCH = 'AUTO_BATCH'


class DeployVariablesFullDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    name: str = Field(..., description='Имя переменной', examples=['name'])
    value: Dict[str, Any] = Field(..., description='Значение переменной', examples=[2])
    primitiveTypeId: Annotated[str, StringConstraints(min_length=0, max_length=36)] = Field(
        ..., description='Уникальный идентификатор примитивного типа', examples=['1']
    )
    dictId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор справочника',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class DiagramVariableValidationDto(BaseModel):
    """
    Объект для валидации имени переменной
    """

    diagramVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )
    parameterName: Annotated[str, StringConstraints(max_length=40)] = Field(
        ..., description='Имя входного/выходного параметра', examples=['Client']
    )


class JsonNode(BaseModel):
    """
    JSON содержимое схемы
    """


class SchemaSaveDto(BaseModel):
    """
    Объект для сохранения схемы
    """

    name: str = Field(..., description='Имя схемы', examples=['schema-name'])
    version: Annotated[str, StringConstraints(pattern=r'([0-9]+\.)*[0-9]+')] = Field(
        ..., description='Версия схемы', examples=['1']
    )
    schemaJson: JsonNode


class SchemaIdDto(BaseModel):
    id: int = Field(..., description='Уникальный идентификатор схемы', examples=[10])


class NodesPasteRequestDto(BaseModel):
    """
    Тело запроса на вставку
    """

    copyId: UUID = Field(
        ...,
        description='Идентификатор слепка',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    diagramVersionId: UUID = Field(
        ...,
        description='Идентификатор версии диаграммы, в которую вставляются узлы и линки',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    position: Position


class NodesCopyDto(BaseModel):
    """
    Тело запроса с перечнем копируемых узлов и линков
    """

    nodeIds: List[str] = None
    linkIds: Optional[List[str]] = None
    diagramVersionId: UUID = Field(
        ...,
        description='Идентификатор версии диаграммы, из которой копируются узлы и линки',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class LinkCreateDto(BaseModel):
    """
    Объект для создания ребра диаграммы
    """

    linkId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор ребра диаграммы',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    diagramVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор диаграммы',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    prevNodeId: UUID = Field(
        ...,
        description='Уникальный идентификатор предыдущего узла',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    nextNodeId: UUID = Field(
        ...,
        description='Уникальный идентификатор последующего узла',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class DiagramCreateAsNew(BaseModel):
    """
    Новая диаграмма
    """

    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    diagramId: UUID = Field(
        ...,
        description='Идентификатор диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )
    diagramDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=2000)]] = Field(
        None,
        description='Описание диаграммы',
        examples=['Диаграмма обладает функционалом и выполняет...'],
    )
    errorResponseFlag: bool = Field(
        ..., description='Флаг обработки аварийного ответа', examples=[True]
    )
    metaInfo: Optional[DiagramMetaInfo] = None
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class DiagramCreateAsLatest(BaseModel):
    """
    Новая диаграмма
    """

    diagramId: UUID = Field(
        ...,
        description='Идентификатор диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )


class DiagramCreateUserVersion(BaseModel):
    """
    Пользовательская версия диаграммы
    """

    diagramId: UUID = Field(
        ...,
        description='Идентификатор диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )
    versionName: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя версии', examples=['имя версии']
    )
    globalFlag: bool = Field(
        ..., description='Флаг хранения версий вложенных объектов', examples=[True]
    )
    errorResponseFlag: bool = Field(
        ..., description='Флаг обработки аварийного ответа', examples=[True]
    )


class BatchAdditionalParameterFullDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    name: Annotated[str, StringConstraints(min_length=0, max_length=255)] = Field(
        ..., description='Имя для отображения на странице', examples=['Имя объекта']
    )
    primitiveTypeId: Annotated[str, StringConstraints(min_length=0, max_length=36)] = Field(
        ..., description='Уникальный идентификатор примитивного типа', examples=['1']
    )
    dictId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор справочника',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    dictFlag: bool = Field(
        ..., description='Признак справочника кастомных типов (true)', examples=[False]
    )
    diagramVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )


class BatchTableCreateDto(BaseModel):
    tableName: Annotated[str, StringConstraints(min_length=0, max_length=255)] = Field(
        ..., description='Название таблицы из источника данных', examples=['table']
    )
    dataProviderUuid: UUID = Field(
        ...,
        description='Уникальный идентификатор источника данных в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    groupId: UUID = Field(
        ...,
        description='Уникальный идентификатор группы атрибутов в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    diagramVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )


class BatchSqlCreateDto(BaseModel):
    groupId: UUID = Field(
        ...,
        description='Уникальный идентификатор группы атрибутов в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    sqlSelect: Optional[Annotated[str, StringConstraints(min_length=0, max_length=4000)]] = Field(
        None, description='SQL запрос для выборки данных', examples=['select a from b']
    )
    dataProviderUuid: UUID = Field(
        ...,
        description='Уникальный идентификатор источника данных в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    diagramVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )


class BatchMappingKeyCreateDto(BaseModel):
    batchVariablesId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор переменной из списка батча в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    parentBatchVariablesId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор верхнеуровневой переменной из списка батча в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    groupId: UUID = Field(
        ...,
        description='Уникальный идентификатор группы атрибутов в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )


class ScoreMapping(BaseModel):
    variable: Optional[str] = None
    scoreValues: Optional[List[ScoreValue]] = None


class JsonGenerationDto(BaseModel):
    jsonVariables: Optional[List[JsonGenerationVariableDto]] = None


class JsonGenerationResultDto(BaseModel):
    json_: Optional[str] = Field(None, alias='json', description='Сгенерированный json')


class DataProviderSettingsViewWithoutIdDto(BaseModel):
    """
    Список настроек подключения источника данных
    """

    environmentSettingsId: UUID = Field(
        ...,
        description='Идентификатор внешнего сервиса в формате UUID 4',
        examples=['a0bb1b74-bb05-42a4-9d7d-15b3ae172180'],
    )
    serverName: Annotated[str, StringConstraints(min_length=0, max_length=200)] = Field(
        ...,
        description='Hostname источника данных. Обязателен для jdbc, tarantool',
        examples=['example.com'],
    )
    hosts: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None,
        description='Список хостов кластера Mongo DB с обязательным указанием Replica Set',
        examples=['rs0/127.0.0.1:51519,127.0.0.1:51518'],
    )
    port: Optional[Annotated[str, StringConstraints(min_length=0, max_length=32)]] = Field(
        None,
        description='Порт для соединения с источником данных. Обязателен для jdbc, tarantool',
        examples=['5432'],
    )
    username: Optional[Annotated[str, StringConstraints(min_length=0, max_length=32)]] = Field(
        None, description='Логин для соединения с источником данных', examples=['login']
    )
    password: Optional[Annotated[str, StringConstraints(min_length=0, max_length=32)]] = Field(
        None, description='Логин для соединения с источником данных', examples=['password']
    )
    scheme: Optional[Annotated[str, StringConstraints(min_length=0, max_length=50)]] = Field(
        None,
        description='Схема базы данных, которая будет использоваться в источнике данных',
        examples=['test_scheme'],
    )
    additionalProperties: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None,
        description='Дополнительные параметры подключения в формате соответствующей СУБД. Имя БД должно быть указано в другом параметре. В случае Oracle здесь указывается service name и, возможно, параметры, в обоих случаях без слэша.',
        examples=['fetchSize=1000&statement_timeout=90000'],
    )
    zookeeperQuorum: Optional[str] = Field(
        None,
        description='Zookeeper Quorum. Поле обязательно для HBase',
        examples=['localhost:2181'],
    )
    zookeeperZnodeParent: Optional[str] = Field(
        None,
        description='Zookeeper Znode Parent. Поле обязательно для HBase',
        examples=['/hbase'],
    )
    additionalSettings: Optional[List[AdditionalSettingsWithIdDto]] = None
    token: Optional[str] = Field(
        None,
        description='Токен для доступа к данным. На текущий момент используется только для TDG',
        examples=['4b7b0fbf-faf2-4545-84b7-3f8f8da5a8ce'],
    )
    database: Optional[Annotated[str, StringConstraints(min_length=0, max_length=50)]] = Field(
        None,
        description='Имя базы данных в случае PostgreSQL, SQL Server, Mongo DB; SID в случае Oracle',
        examples=['master'],
    )
    inputType: Optional[InputType1] = Field(
        None, description='Способ указания параметров JDBC подключения', examples=['url']
    )
    url: Optional[str] = Field(
        None, description='JDBC URL', examples=['jdbc:postgresql://localhost/test']
    )


class TestConnectionRequestDto(BaseModel):
    sourceType: SourceType = Field(
        ..., description='Тип источника данных', examples=['ORACLE']
    )
    connectionType: ConnectionType = Field(
        ..., description='Тип соединения', examples=['JDBC']
    )
    settings: Optional[List[DataProviderSettingsViewWithoutIdDto]] = None


class TypesRetrieveType(str, Enum):
    """
    Стратегия извлечения доступных типов данных для колонки
    """

    TABLE = 'TABLE'
    QUERY = 'QUERY'
    TARANTOOL = 'TARANTOOL'


class AvailableTypesRequestDto(BaseModel):
    sourceId: UUID = Field(
        ...,
        description='Уникальный идентификатор источника данных в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    typesRetrieveType: TypesRetrieveType = Field(
        ...,
        description='Стратегия извлечения доступных типов данных для колонки',
        examples=['TABLE'],
    )
    tableName: Optional[str] = Field(
        None, description='Имя таблицы', examples=['test-table']
    )
    scheme: Optional[Annotated[str, StringConstraints(min_length=0, max_length=50)]] = Field(
        None,
        description='Схема базы данных, которая будет использоваться в источнике данных',
        examples=['test_scheme'],
    )
    query: Optional[str] = Field(
        None,
        description='SQL-запрос для для извлечения колонок и доступных для них типов данных',
        examples=['select column_name from table_name'],
    )
    columnName: str = Field(..., description='Название колонки', examples=['column_name'])


class CustomAttributeDictionaryValueCreate(BaseModel):
    """
    Список значений справочника
    """

    dictValue: Dict[str, Any] = Field(
        ...,
        description='Значение справочника',
        examples=['Отображаемое наименование значения справочника'],
    )
    dictValueDisplayName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ...,
        description='Отображаемое наименование значения справочникаа',
        examples=['Отображаемое наименование значения справочника'],
    )


class ComplexTypeCreate(BaseModel):
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    displayName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Имя для отображения на странице', examples=['Имя объекта']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None,
        description='Описание объекта комплексного типа',
        examples=['Объект пользователя, который включает в себя поля FirstName, SecondName, Phone...'],
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    attributes: Optional[List[AttributeCreate]] = None


class CommunicationVariableViewWithoutIdDto(BaseModel):
    """
    Список переменных канала коммуникации
    """

    variableName: str = Field(
        ..., description='Имя переменной', examples=['имя_переменной']
    )
    scriptVariableName: str = Field(
        ..., description='Имя переменной скрипта', examples=['имя_переменной_скрипта']
    )
    primitiveTypeId: Optional[str] = Field(
        None, description='Id простого типа переменной', examples=['1']
    )
    complexTypeVersionId: Optional[UUID] = Field(
        None,
        description='Id комплексного типа переменной',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    arrayFlag: bool = Field(
        ..., description='Является ли переменная массивом', examples=[False]
    )
    dataSourceType: DataSourceType2 = Field(
        ...,
        description='Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)',
    )
    minValue: Optional[float] = Field(
        None, description='Минимальное значение переменной', examples=[5.0]
    )
    maxValue: Optional[float] = Field(
        None, description='Максимальное значение переменной', examples=[15.0]
    )
    maxSize: Optional[int] = Field(
        None, description='Максимальная длина переменной', examples=[100]
    )
    dictionaryId: Optional[UUID] = Field(
        None,
        description='Id справочника, в котором находятся допустимые значения переменной',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    dynamicListType: Optional[DynamicListType2] = Field(
        None, description='Тип отображения динамического списка'
    )
    mandatoryFlag: bool = Field(
        ..., description='Является ли переменная обязательной', examples=[False]
    )


class CommunicationChannelCreateUserVersionDto(BaseModel):
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None,
        description='Описание канала коммуникации',
        examples=['Канал коммуникации PUSH'],
    )
    scriptVersionId: UUID = Field(
        ...,
        description='Идентификатор версии скрипта, связанного с каналом коммуникации в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionName: Optional[Annotated[str, StringConstraints(min_length=1, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )
    communicationVariables: Optional[List[CommunicationVariableViewWithoutIdDto]] = None


class CatalogCreate(BaseModel):
    """
    Новая каталог
    """

    catalogName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя Каталога', examples=['Каталог №1']
    )
    parentCatalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор родительского каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class AggregateCreate(BaseModel):
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    aggregateDescription: Optional[Annotated[str, StringConstraints(max_length=1000)]] = Field(
        None,
        description='Описание агрегата (бизнес наименование)',
        examples=['описание агрегата'],
    )
    aggregateJson: AggregateJson
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class EnvironmentVersion(BaseModel):
    environmentId: Optional[str] = None
    environmentName: Optional[str] = None
    spVersion: Optional[str] = None
    integrationModuleVersion: Optional[str] = None


class VersionsDto(BaseModel):
    decisionBackendVersion: Optional[str] = None
    environments: Optional[List[EnvironmentVersion]] = None


class DiagramDto(BaseModel):
    pass


class UserFullView(BaseModel):
    userId: UUID = Field(
        ...,
        description='Идентификатор пользователя в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    userName: str = Field(..., description='Имя пользователя', examples=['Иванов Иван'])


class UserJarFullViewDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    jarName: str = Field(
        ..., description='Название jar-файла', examples=['user_jar_file.jar']
    )
    jarPath: str = Field(
        ..., description='Путь до jar-файла', examples=['opt/user-jars/user_jar_file.jar']
    )
    createDt: datetime = Field(..., description='Дата Время создания')
    createByUser: str = Field(
        ..., description='Пользователь, загрузивший jar-файл', examples=['Иванов Иван']
    )


class UserFunctionShortInfo(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    jarName: str = Field(
        ...,
        description='Название jar-файла, в котором находится функция',
        examples=['jar_file.jar'],
    )
    resultType: Optional[str] = Field(
        None,
        description='Тип возвращаемого пользовательской функцией значения',
        examples=['Дробный'],
    )
    description: Optional[str] = Field(
        None, description='Описание пользовательской функции', examples=['Описание']
    )
    lastChangeByUser: Optional[str] = Field(
        None,
        description='Последний пользователь, внесший изменения',
        examples=['Иванов Иван'],
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')


class UserFunctionShortWithIsUploadedView(BaseModel):
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    jarFunctionName: str = Field(
        ...,
        description='Имя пользовательской функции в jar-файле',
        examples=['myFunction(java.lang.Integer)'],
    )
    functionClass: str = Field(
        ...,
        description='Полный путь до класса, в котором содержится функция в jar-файле',
        examples=['com.package.SomeClass'],
    )
    isUploaded: Optional[bool] = Field(
        None, description='Была ли функция загружена ранее>', examples=[False]
    )


class UserFunctionCatalogShortInfo(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    jarName: str = Field(
        ...,
        description='Название jar-файла, в котором находится функция',
        examples=['jar_file.jar'],
    )
    resultType: Optional[str] = Field(
        None,
        description='Тип возвращаемого пользовательской функцией значения',
        examples=['Дробный'],
    )
    description: Optional[str] = Field(
        None, description='Описание пользовательской функции', examples=['Описание']
    )
    lastChangeByUser: Optional[str] = Field(
        None,
        description='Последний пользователь, изменивший объект',
        examples=['Иван Иванов'],
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    elementId: Optional[UUID] = Field(
        None,
        description='Идентификатор элемента в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    catalogFlag: bool = Field(..., description='Признак каталога', examples=[True])


class Status3(str, Enum):
    DEPLOYING = 'DEPLOYING'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCESS = 'SUCCESS'
    FAIL = 'FAIL'
    CREATED = 'CREATED'
    MANUAL_STOP = 'MANUAL_STOP'
    EMERGENCY_STOP = 'EMERGENCY_STOP'


class TestInfo(BaseModel):
    testId: UUID = Field(
        ...,
        description='Уникальный идентификатор теста в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    testName: str = Field(..., description='Имя теста', examples=['test_01'])
    testFile: Optional[str] = Field(
        None, description='Путь к файлу с данными для теста', examples=['/path/to/file']
    )
    testDescription: Optional[str] = Field(
        None, description='Описание теста', examples=['test description']
    )
    timeout: Optional[int] = Field(None, description='Таймаут в секундах', examples=[10])
    lastExecutionDt: Optional[datetime] = None
    status: Optional[Status3] = None


class TestCaseInfo(BaseModel):
    caseId: UUID = Field(
        ...,
        description='Уникальный идентификатор тест-кейса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    caseResult: bool = Field(
        ..., description='Статус выполнения тест-кейса', examples=[True]
    )


class TestStatusDto(BaseModel):
    testId: Optional[str] = None
    timeStart: Optional[datetime] = None
    timeFinish: Optional[datetime] = None
    timeout: Optional[datetime] = None
    status: Optional[Status3] = None


class TestCaseGetFullView(BaseModel):
    caseId: UUID = Field(
        ...,
        description='Уникальный идентификатор тест-кейса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    caseResult: bool = Field(
        ..., description='Статус выполнения тест-кейса', examples=[True]
    )
    caseRequestJson: str = Field(..., description='Json тест-кейса', examples=['{}'])
    caseExpResponseJson: str = Field(
        ..., description='Json ожидаемого ответа тест-кейса', examples=['{}']
    )
    caseFactResponseJson: str = Field(
        ..., description='Json фактического ответа тест-кейса', examples=['{}']
    )


class TestCaseNodeInputDataFullView(BaseModel):
    """
    Список входящих сообщений
    """

    nodeId: UUID = Field(
        ...,
        description='Уникальный идентификатор узла, с которого пришли данные',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    nodeName: str = Field(
        ..., description='Название узла, с которого пришли данные', examples=['Начало']
    )
    inputData: Optional[str] = Field(
        None, description='Данные, пришедшие с узла', examples=['{"vhod1":1,"vhod2":1}']
    )


class SwaggerResource(BaseModel):
    name: Optional[str] = None
    url: Optional[str] = None
    swaggerVersion: Optional[str] = None
    location: Optional[str] = Field(None, deprecated=True)


class DefaultModelRendering(str, Enum):
    example = 'example'
    model = 'model'


class DocExpansion(str, Enum):
    none = 'none'
    list = 'list'
    full = 'full'


class OperationsSorter(str, Enum):
    alpha = 'alpha'
    method = 'method'


class TagsSorter(str, Enum):
    alpha = 'alpha'


class UiConfiguration(BaseModel):
    deepLinking: Optional[bool] = None
    displayOperationId: Optional[bool] = None
    defaultModelsExpandDepth: Optional[int] = None
    defaultModelExpandDepth: Optional[int] = None
    defaultModelRendering: Optional[DefaultModelRendering] = None
    displayRequestDuration: Optional[bool] = None
    docExpansion: Optional[DocExpansion] = None
    filter: Optional[Dict[str, Any]] = None
    maxDisplayedTags: Optional[int] = None
    operationsSorter: Optional[OperationsSorter] = None
    showExtensions: Optional[bool] = None
    showCommonExtensions: Optional[bool] = None
    tagsSorter: Optional[TagsSorter] = None
    validatorUrl: Optional[str] = None
    supportedSubmitMethods: Optional[List[str]] = None
    swaggerBaseUiUrl: Optional[str] = None


class SecurityConfiguration(BaseModel):
    apiKey: Optional[str] = Field(None, deprecated=True)
    apiKeyVehicle: Optional[str] = Field(None, deprecated=True)
    apiKeyName: Optional[str] = Field(None, deprecated=True)
    clientId: Optional[str] = None
    clientSecret: Optional[str] = None
    realm: Optional[str] = None
    appName: Optional[str] = None
    scopeSeparator: Optional[str] = None
    additionalQueryStringParams: Optional[Dict[str, Dict[str, Any]]] = None
    useBasicAuthenticationWithAccessCodeGrant: Optional[bool] = None
    enableCsrfSupport: Optional[bool] = None


class ExternalServiceShortInfoDto(BaseModel):
    serviceId: UUID = Field(
        ...,
        description='Идентификатор внешнего сервиса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии внешнего сервиса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    uri: Optional[List[str]] = None
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None


class ExternalServiceFullViewDto(BaseModel):
    isAvailableInProperties: Optional[bool] = Field(
        None,
        description='Флаг того, что характеристики ВС будут доступны в __PROPERTIES__',
        examples=[True],
    )
    serviceId: UUID = Field(
        ...,
        description='Идентификатор внешнего сервиса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии внешнего сервиса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание внешнего сервиса', examples=['Внешний сервис данных']
    )
    syncType: SyncType = Field(..., description='Тип взаимодействия', examples=['SYNC'])
    protocol: Protocol3 = Field(..., description='Протокол доступа', examples=['REST'])
    method: Optional[Method] = Field(
        None, description='Используемый метод взаимодействия', examples=['GET']
    )
    fileFormat: Optional[FileFormat] = Field(
        None, description='Формат сообщения', examples=['JSON']
    )
    batchFlag: Optional[bool] = Field(
        None, description='Признак пакетного взаимодействия', examples=[False]
    )
    body: Optional[str] = Field(
        None, description='Тело запроса', examples=['{request_id: {requestid}}']
    )
    serviceSettings: Optional[List[ExternalServiceSettingsFullViewDto]] = None
    headers: Optional[List[ExternalServiceHeaderFullViewDto]] = None
    variables: Optional[List[ExternalServiceVariableFullViewDto]] = None


class ExternalServiceGetIdWithVariables(BaseModel):
    serviceId: UUID = Field(
        ...,
        description='Идентификатор внешнего сервиса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии внешнего сервиса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    variables: Optional[List[ExternalServiceVariableFullViewDto]] = None


class ExternalServiceShortInfoVersionDto(BaseModel):
    serviceId: UUID = Field(
        ...,
        description='Идентификатор внешнего сервиса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии внешнего сервиса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    uri: Optional[List[str]] = None
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None
    versionType: VersionType = Field(..., description='Тип версии')
    versionName: Optional[Annotated[str, StringConstraints(min_length=1, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )


class ExternalServiceTechDto(BaseModel):
    """
    Тип технического сервиса сервиса
    """


class ExternalServiceTechFullViewDto(BaseModel):
    serviceId: UUID = Field(
        ...,
        description='Идентификатор внешнего сервиса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии внешнего сервиса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    variables: Optional[List[ExternalServiceVariableFullViewDto]] = None
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    serviceType: ExternalServiceTechDto


class ExternalServiceCatalogShortInfoDto(BaseModel):
    serviceId: UUID = Field(
        ...,
        description='Идентификатор внешнего сервиса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии внешнего сервиса в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    uri: Optional[List[str]] = None
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = Field(
        None,
        description='Последний пользователь, изменивший объект',
        examples=['Иван Иванов'],
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    elementId: Optional[UUID] = Field(
        None,
        description='Идентификатор элемента в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    catalogFlag: bool = Field(..., description='Признак каталога', examples=[True])


class ScriptType3(str, Enum):
    """
    Язык скрипта
    """

    GROOVY = 'GROOVY'
    PYTHON = 'PYTHON'


class ScriptShortInfoDto(BaseModel):
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание скрипта', examples=['описание скрипта']
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = Field(
        None,
        description='Последний пользователь, изменивший объект',
        examples=['Иван Иванов'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    scriptType: ScriptType3 = Field(..., description='Язык скрипта')
    scriptId: UUID = Field(
        ...,
        description='Идентификатор скрипта в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии скрипта в формате UUID',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )


class ScriptWithIdWithVariables(BaseModel):
    variables: Optional[List[ScriptVariableFullView]] = None
    scriptId: UUID = Field(
        ...,
        description='Идентификатор скрипта в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии скрипта в формате UUID',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )


class ScriptFullVersionView(BaseModel):
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание скрипта', examples=['описание скрипта']
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = Field(
        None,
        description='Последний пользователь, изменивший объект',
        examples=['Иван Иванов'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    scriptType: ScriptType3 = Field(..., description='Язык скрипта')
    versionType: VersionType = Field(..., description='Тип версии')
    versionName: Optional[Annotated[str, StringConstraints(min_length=1, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )
    scriptId: UUID = Field(
        ...,
        description='Идентификатор скрипта в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии скрипта в формате UUID',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )


class ScriptCatalogShortInfoDto(BaseModel):
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание скрипта', examples=['описание скрипта']
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = Field(
        None,
        description='Последний пользователь, изменивший объект',
        examples=['Иван Иванов'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    scriptType: ScriptType3 = Field(..., description='Язык скрипта')
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    elementId: Optional[UUID] = Field(
        None,
        description='Идентификатор элемента в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    catalogFlag: bool = Field(..., description='Признак каталога', examples=[True])
    scriptId: UUID = Field(
        ...,
        description='Идентификатор скрипта в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии скрипта в формате UUID',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )


class PythonEnvironmentShortInfoDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор окружения python в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии окружения python  в формате UUID',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    name: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя окружения python', examples=['питон']
    )
    pythonVersionName: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя версии python', examples=['Python 3.6']
    )
    createDt: datetime = Field(..., description='Дата Время создания')
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None


class PythonEnvironmentGetFullViewDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор окружения python в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии окружения python  в формате UUID',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    name: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя окружения python', examples=['питон']
    )
    pythonVersionName: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя версии python', examples=['Python 3.6']
    )
    createDt: datetime = Field(..., description='Дата Время создания')
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    requirementsTxt: Optional[str] = Field(
        None, description='Текст файла requirements.txt', examples=['pandas==0.2.0']
    )
    pythonVersionId: Optional[str] = None
    pythonEnvironmentSettings: Optional[List[PythonEnvironmentSettingsWithIdDto]] = None


class PythonEnvironmentVersionViewDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор окружения python в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии окружения python  в формате UUID',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    name: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя окружения python', examples=['питон']
    )
    pythonVersionName: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя версии python', examples=['Python 3.6']
    )
    createDt: datetime = Field(..., description='Дата Время создания')
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    versionType: VersionType = Field(..., description='Тип версии')
    versionName: Optional[Annotated[str, StringConstraints(min_length=1, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )
    rootObjectVersionId: UUID = Field(
        ...,
        description='Идентификатор родительского объекта версии окружения питона в формате UUID',
        examples=['9d4ade21-cf23-4819-ac9d-f052dba69002'],
    )


class RuleTypeGetFullView(BaseModel):
    typeName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Системное имя в UTF-8', examples=['Name object']
    )
    displayName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Имя для отображения на странице', examples=['Имя объекта']
    )
    typeId: UUID = Field(
        ...,
        description='Уникальный идентификатор типа правила',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    createByUser: UUID = Field(
        ...,
        description='Пользователь, который создал тип правила',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    lastChangeByUser: UUID = Field(
        ...,
        description='Последний пользователь, который внес изменения в тип правила',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    createDt: datetime = Field(..., description='Дата Время создания')
    changeDt: datetime = Field(..., description='Дата Время обновления')


class RestSourceShortInfoDto(BaseModel):
    restSourceId: UUID = Field(
        ...,
        description='Идентификатор REST источника в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    createDt: datetime = Field(..., description='Дата Время создания')
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None


class RestSourceFullViewDto(BaseModel):
    restSourceId: UUID = Field(
        ...,
        description='Идентификатор REST источника в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание REST источника', examples=['REST источник']
    )
    createDt: datetime = Field(..., description='Дата Время создания')
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    restSourceSettings: Optional[List[RestSourceSettingsFullViewDto]] = None


class RestSourceCatalogShortInfoDto(BaseModel):
    restSourceId: UUID = Field(
        ...,
        description='Идентификатор REST источника в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    createDt: datetime = Field(..., description='Дата Время создания')
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = Field(
        None,
        description='Последний пользователь, изменивший объект',
        examples=['Иван Иванов'],
    )
    createByUser: Optional[str] = Field(
        None,
        description='Последний пользователь, создавший объект',
        examples=['Иван Иванов'],
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    elementId: Optional[UUID] = Field(
        None,
        description='Идентификатор элемента в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    catalogFlag: bool = Field(..., description='Признак каталога', examples=[True])


class NodeTypeGetFullView(BaseModel):
    typeId: int = Field(..., description='Уникальный идентификатор', examples=[2])
    typeName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Системное имя в UTF-8', examples=['Name object']
    )
    displayName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Имя для отображения на странице', examples=['Имя объекта']
    )


class FunctionGetFullView(BaseModel):
    functionId: UUID = Field(
        ..., description='Уникальный идентификатор списка функий. '
    )
    functionName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Наименование функции', examples=['Функция №1']
    )
    description: Annotated[str, StringConstraints(max_length=200)] = Field(
        ...,
        description='Описание функции в формате <Наименование функции>(<тип параметра 1>{, ...<тип параметра N>}) <Краткое описание что делает данная функция>',
    )
    resultType: Annotated[str, StringConstraints(max_length=15)] = Field(
        ..., description='Тип результирующего значения функции'
    )
    isExternal: Optional[bool] = Field(
        None, description='Является ли функция загруженной пользователем'
    )


class DataTypeGetFullView(BaseModel):
    typeId: UUID = Field(
        ...,
        description='Уникальный идентификатор списка типов данных. Объединяет в себе примитивные и комплексные списки. ID может принимать числовое значение в строковом формате, либо UUID',
    )
    typeName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Системное имя в UTF-8', examples=['Name object']
    )
    displayName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Имя для отображения на странице', examples=['Имя объекта']
    )
    complexFlag: bool = Field(
        ...,
        description='Флаг, определяющий сложность типа. true - тип данных сложный, false - тип данных примитивный',
        examples=[False],
    )


class AttributeValuesFullViewDto(BaseModel):
    """
    Список атрибутов
    """

    key: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Техническое название атрибута', examples=['Attribute key']
    )
    name: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Название канала атрибута', examples=['Attribute value']
    )


class OfferShortInfoDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор шаблона предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии шаблона предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None


class OfferFullViewDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор шаблона предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии шаблона предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    scriptVersionId: UUID = Field(
        ...,
        description='Идентификатор версии скрипта, связанного с шаблоном предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    scriptId: UUID = Field(
        ...,
        description='Идентификатор скрипта, связанного с шаблоном предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    scriptName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ...,
        description='Имя скрипта, связанного с шаблоном предложения в формате UUID 4',
        examples=['Код создания предложения Автокредит'],
    )
    offerComplexTypeVersionId: UUID = Field(
        ...,
        description='Id комплексного типа предложения',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    offerVariables: Optional[List[OfferVariableFullViewDto]] = None
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class OfferWithVariablesDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор шаблона предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии шаблона предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    offerComplexTypeVersionId: UUID = Field(
        ...,
        description='Id комплексного типа предложения',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    offerVariables: Optional[List[OfferVariableFullViewDto]] = None


class OfferShortInfoVersionDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор шаблона предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии шаблона предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None
    versionName: Optional[Annotated[str, StringConstraints(min_length=1, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    versionType: VersionType = Field(..., description='Тип версии')
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )


class DiagramShortInfoView(BaseModel):
    diagramId: UUID = Field(
        ...,
        description='Идентификатор диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )
    lastChangeByUser: Optional[str] = None
    changeDt: datetime = Field(..., description='Дата Время обновления')
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    diagramDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=2000)]] = Field(
        None,
        description='Описание диаграммы',
        examples=['Диаграмма обладает функционалом и выполняет...'],
    )


class OfferCatalogPage(BaseModel):
    content: Optional[List[DiagramShortInfoView]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class OfferStorageClientIdTypeFullDto(BaseModel):
    """
    Список типов клиентов
    """

    code: str = Field(..., description='Код типа идентификатора клиента', examples=['1'])
    description: str = Field(
        ..., description='Описание типа идентификатора клиента', examples=['subscriber']
    )


class OfferStorageClientIdTypesFullDto(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Детальное описание ошибки',
        examples=['Не передано обязательное для передачи поле'],
    )
    title: Optional[str] = Field(
        None, description='Название ошибки', examples=['Constraint Violation']
    )
    type: Optional[str] = Field(
        None, description='Тип ошибки', examples=['/problems/bad-request']
    )
    instance: Optional[str] = Field(
        None, description='Инстанс', examples=['/api/campaign-runs']
    )
    status: Optional[int] = Field(None, description='HTTP-статус', examples=[200])
    clientIdTypes: Optional[List[OfferStorageClientIdTypeFullDto]] = None


class ObjectToVersionType(str, Enum):
    """
    Тип версии зависимого объекта
    """

    TEMP = 'TEMP'
    DEPLOYED = 'DEPLOYED'
    LATEST = 'LATEST'
    USER_LOCAL = 'USER_LOCAL'
    USER_TEMP = 'USER_TEMP'
    USER_GLOBAL = 'USER_GLOBAL'
    TEST_DEPLOYED = 'TEST_DEPLOYED'


class ObjectToType(str, Enum):
    """
    Тип объекта ребенка
    """

    DEPLOY = 'DEPLOY'
    DIAGRAM = 'DIAGRAM'
    AGGREGATE = 'AGGREGATE'
    CUSTOM_CODE = 'CUSTOM_CODE'
    COMPLEX_TYPE = 'COMPLEX_TYPE'
    SERVICE = 'SERVICE'
    REST_SOURCE = 'REST_SOURCE'
    DATA_PROVIDER = 'DATA_PROVIDER'
    CUSTOM_ATTRIBUTE_DICTIONARY = 'CUSTOM_ATTRIBUTE_DICTIONARY'
    COMMUNICATION_CHANNEL = 'COMMUNICATION_CHANNEL'
    OFFER = 'OFFER'
    USER_FUNCTION = 'USER_FUNCTION'
    DATA_PROVIDER_RELATION = 'DATA_PROVIDER_RELATION'
    CATALOG = 'CATALOG'
    KAFKA = 'KAFKA'
    PYTHON_ENVIRONMENT = 'PYTHON_ENVIRONMENT'
    PYTHON_ENVIRONMENT_RELATION = 'PYTHON_ENVIRONMENT_RELATION'
    DIAGRAM_RELATION = 'DIAGRAM_RELATION'
    CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS = 'CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS'
    OFFER_RELATION = 'OFFER_RELATION'
    SERVICE_RELATION = 'SERVICE_RELATION'
    REST_SOURCE_RELATION = 'REST_SOURCE_RELATION'
    CUSTOM_CODE_RELATION = 'CUSTOM_CODE_RELATION'
    COMMUNICATION_RELATION = 'COMMUNICATION_RELATION'
    AGGREGATE_RELATION = 'AGGREGATE_RELATION'
    MESSAGE_BROKER = 'MESSAGE_BROKER'
    LOCKING = 'LOCKING'


class AggregateType(str, Enum):
    """
    Тип агрегата
    """

    CALC = 'CALC'
    READ = 'READ'


class ObjectRelationsFullViewDto(BaseModel):
    objectFromVersionId: UUID = Field(
        ...,
        description='Идентификатор версии родителя в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    objectName: str = Field(
        ..., description='Название зависимого объекта', examples=['Object display name']
    )
    objectToVersionId: UUID = Field(
        ...,
        description='Идентификатор версии ребенка в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    objectToVersionType: ObjectToVersionType = Field(
        ..., description='Тип версии зависимого объекта', examples=['USER_GLOBAL']
    )
    objectToType: ObjectToType = Field(
        ..., description='Тип объекта ребенка', examples=['AGGREGATE']
    )
    nodeName: str = Field(
        ...,
        description='Имя узла, в котором вызывается объект',
        examples=['Узел предложения'],
    )
    aggregateType: AggregateType = Field(
        ..., description='Тип агрегата', examples=['Чтение']
    )


class LockingDto(BaseModel):
    pass


class LockingDictionaryPage(BaseModel):
    content: Optional[List[LockingDtoShortView]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class KafkaShortInfoDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор kafka в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    name: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя kafka', examples=['local kafka']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание kafka', examples=['Kafka для тестирования']
    )
    createDt: datetime = Field(..., description='Дата Время создания')
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None


class KafkaGetFullViewDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор kafka в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    name: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя kafka', examples=['local kafka']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание kafka', examples=['Kafka для тестирования']
    )
    createDt: datetime = Field(..., description='Дата Время создания')
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    kafkaSettings: Optional[List[KafkaSettingsWithIdDto]] = None


class EnvironmentShortInfoDto(BaseModel):
    environmentId: UUID = Field(
        ...,
        description='Уникальный идентификатор среды развертывания в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    environmentName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='название среды развертывания', examples=['prod']
    )
    defaultFlag: Optional[bool] = Field(
        None, description='Флаг дефолтного окружения', examples=[True]
    )
    kafkaUrl: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Url kafka', examples=['http://localhost:29092']
    )
    stateStoreUrl: Optional[str] = Field(
        None,
        description='Url базы данных state store агрегатов',
        examples=['http://localhost:5432/decision_aggregate?currentSchema=decision'],
    )
    integrationUrl: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Url модуля интеграции', examples=['http://localhost:8081']
    )
    streamingPlatformUrl: Annotated[str, StringConstraints(min_length=0, max_length=1000)] = Field(
        ..., description='Url платформы', examples=['http://localhost:8083']
    )


class KafkaEnvironmentFullViewDto(BaseModel):
    """
    Параметры Kafka
    """

    kafkaUrl: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Url kafka', examples=['http://localhost:29092']
    )
    kafkaEnvironmentAdditionalSettings: Optional[
        List[KafkaAdditionalSettingsWithIdDto]
    ] = None


class DiagramPage(BaseModel):
    content: Optional[List[DiagramShortInfoView]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class DiagramShortInfoVersionsView(BaseModel):
    diagramId: UUID = Field(
        ...,
        description='Идентификатор диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )
    lastChangeByUser: Optional[str] = None
    changeDt: datetime = Field(..., description='Дата Время обновления')
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    diagramDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=2000)]] = Field(
        None,
        description='Описание диаграммы',
        examples=['Диаграмма обладает функционалом и выполняет...'],
    )
    versionType: VersionType = Field(..., description='Тип версии')
    versionName: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя версии', examples=['имя версии']
    )
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )


class SchemaInfoDto(BaseModel):
    id: int = Field(..., description='Уникальный идентификатор схемы', examples=[10])
    name: str = Field(..., description='Имя схемы', examples=['schema-name'])
    version: Annotated[str, StringConstraints(pattern=r'([0-9]+\.)*[0-9]+')] = Field(
        ..., description='Версия схемы', examples=['1']
    )
    url: str = Field(
        ..., description='Url схемы', examples=['http://sp:8083/schema/10/content']
    )


class SchemaFullDto(BaseModel):
    id: int = Field(..., description='Уникальный идентификатор схемы', examples=[10])
    name: str = Field(..., description='Имя схемы', examples=['schema-name'])
    version: Annotated[str, StringConstraints(pattern=r'([0-9]+\.)*[0-9]+')] = Field(
        ..., description='Версия схемы', examples=['1']
    )
    url: str = Field(
        ..., description='Url схемы', examples=['http://sp:8083/schema/10/content']
    )
    schemaJson: JsonNode


class NodeValidationPayload(BaseModel):
    """
    JSON-детализаия валидации
    """

    nodeValidationMap: Optional[Dict[str, Dict[str, Any]]] = None
    commonNodeValidationMessages: Optional[List[str]] = None


class DiagramCatalogShortInfoView(BaseModel):
    diagramId: UUID = Field(
        ...,
        description='Идентификатор диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )
    lastChangeByUser: Optional[str] = Field(
        None,
        description='Последний пользователь, изменивший объект',
        examples=['Иван Иванов'],
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    diagramDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=2000)]] = Field(
        None,
        description='Описание диаграммы',
        examples=['Диаграмма обладает функционалом и выполняет...'],
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    elementId: Optional[UUID] = Field(
        None,
        description='Идентификатор элемента в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    catalogFlag: bool = Field(..., description='Признак каталога', examples=[True])


class BatchOccupancyStatus(str, Enum):
    """
    Тип заполненности
    """

    IN_PROGRESS = 'IN_PROGRESS'
    FULL = 'FULL'
    EMPTY = 'EMPTY'


class BatchVariableGetDto(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    diagramVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    groupId: UUID = Field(
        ...,
        description='Уникальный идентификатор группы атрибутов в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    parentGroupId: UUID = Field(
        ...,
        description='Уникальный идентификатор родительской группы атрибутов в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    primitiveTypeId: Annotated[str, StringConstraints(min_length=0, max_length=36)] = Field(
        ...,
        description='Уникальный идентификатор примитивного типа в формате UUID 4',
        examples=['1'],
    )
    name: Annotated[str, StringConstraints(min_length=36, max_length=36)] = Field(
        ..., description='Имя для отображения на странице', examples=['Имя объекта']
    )
    parameterVersionId: Optional[str] = None
    complexTypeVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор пользовательского типа ',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    batchOccupancyStatus: BatchOccupancyStatus = Field(
        ..., description='Тип заполненности'
    )
    batchVariableList: Optional[List[BatchVariableGetDto]] = None


class BatchTableGetFullView(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор таблицы в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    tableName: Annotated[str, StringConstraints(min_length=0, max_length=255)] = Field(
        ..., description='Название таблицы из источника данных', examples=['table']
    )
    dataProviderUuid: UUID = Field(
        ...,
        description='Уникальный идентификатор источника данных в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    groupId: UUID = Field(
        ...,
        description='Уникальный идентификатор группы атрибутов в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    diagramVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )


class BatchMappingKeyGetDto(BaseModel):
    id: Optional[UUID] = Field(
        None,
        description='Идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    batchVariablesId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор переменной из списка батча в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    parentBatchVariablesId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор верхнеуровневой переменной из списка батча в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    groupId: UUID = Field(
        ...,
        description='Уникальный идентификатор группы атрибутов в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    mapping: UUID = Field(..., description='Маппинг элемента запроса на диаграмму')
    primitiveTypeId: Annotated[str, StringConstraints(max_length=36)] = Field(
        ...,
        description='Уникальный идентификатор примитивного типа в формате UUID 4',
        examples=['1'],
    )
    name: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Имя для отображения на странице', examples=['Имя объекта']
    )
    diagramVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )


class DeployStatus(str, Enum):
    """
    Статус деплоя
    """

    CREATED = 'CREATED'
    ERROR = 'ERROR'
    CANCELED = 'CANCELED'
    STOPPED = 'STOPPED'
    STOPPING = 'STOPPING'
    READY_FOR_DEPLOY = 'READY_FOR_DEPLOY'
    TEST_DEPLOYED = 'TEST_DEPLOYED'
    INHERIT_DEPLOYED = 'INHERIT_DEPLOYED'
    DEPLOYED_WITH_ERROR_IN_REPLICAS = 'DEPLOYED_WITH_ERROR_IN_REPLICAS'
    IN_PROGRESS = 'IN_PROGRESS'
    DEPLOYED = 'DEPLOYED'


class DiagramVersionNameView(BaseModel):
    """
    Информация о диаграмме
    """

    diagramId: UUID = Field(
        ...,
        description='Идентификатор диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    versionName: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя версии', examples=['имя версии']
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )


class IntegrationFullDto(BaseModel):
    inTopicName: str = Field(
        ...,
        description='Входящий топик диаграммы',
        examples=['b73b4500-27f7-42b6-abbe-938f3705955e'],
    )
    outTopicName: str = Field(
        ...,
        description='Входящий топик диаграммы',
        examples=['b73b4500-27f7-42b6-abbe-938f3705955e'],
    )
    callUri: UUID = Field(
        ...,
        description='Идентификатор вызова диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    timeout: Optional[int] = Field(
        None, description='Тайм-аут исполнения диаграммы', examples=[100]
    )
    deployType: DeployType = Field(..., description='Тип деплоя')
    jobId: int = Field(..., description='Id джоба в оркестраторе', examples=[1])


# class IntegrationMapDto(BaseModel):
#     __root__: Optional[Dict[str, IntegrationFullDto]] = None


class DataProviderGetFullView(BaseModel):
    sourceId: UUID = Field(
        ...,
        description='Уникальный идентификатор источника данных в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    sourceName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя источника данных', examples=['Витрина данных']
    )
    createDt: datetime = Field(..., description='Дата Время создания')
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание источника данных', examples=['Операционная БД']
    )
    sourceType: SourceType = Field(
        ..., description='Тип источника данных', examples=['ORACLE']
    )
    connectionType: ConnectionType = Field(
        ..., description='Тип соединения', examples=['JDBC']
    )
    settings: Optional[List[DataProviderSettingsFullViewDto]] = None


class TablesDto(BaseModel):
    tableName: str = Field(
        ..., description='Название таблицы', examples=['RTDM_APPLICATIONS']
    )
    schemaName: Optional[str] = Field(
        None, description='Название схемы', examples=['public']
    )


class IndexDto(BaseModel):
    indexName: str = Field(..., description='Название индекса', examples=['primary'])
    columns: Optional[List[str]] = None
    isUnique: bool = Field(..., description='Признак уникального индекса', examples=[True])
    isPrimary: bool = Field(..., description='Признак первичного индекса', examples=[True])


class ColumnsDto(BaseModel):
    columnName: str = Field(
        ..., description='Название поля в таблице', examples=['RUN_ID']
    )
    dataType: str = Field(..., description='Тип поля', examples=['VARCHAR'])
    isPrimary: Optional[bool] = Field(
        None, description='Признак первичного ключа', examples=[True]
    )
    isNullable: Optional[bool] = Field(
        None, description='Признак возможности null-значения', examples=[True]
    )
    isAutoIncrement: Optional[bool] = Field(
        None, description='Признак авто-увеличения значения', examples=[True]
    )
    haveDefault: Optional[bool] = Field(
        None, description='Признак наличия значения по умолчанию', examples=[True]
    )


class FunctionsDto(BaseModel):
    name: Optional[str] = Field(None, description='Название функции', examples=['sum'])
    body: Optional[str] = Field(
        None, description='Тело функции', examples=['function(a, b) return a + b end']
    )
    arguments: Optional[List[str]] = None


class CustomAttributeDictionaryShortInfo(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор справочника в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    dictName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя справочника', examples=['Справочник №1']
    )
    dictValueTypeId: Annotated[str, StringConstraints(min_length=1, max_length=1)] = Field(
        ..., description='Идентификатор типа значений справочника', examples=['1']
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    createDt: datetime = Field(..., description='Дата Время создания')
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None


class CustomAttributeDictionaryValueFullView(BaseModel):
    """
    Список значений справочника
    """

    id: UUID = Field(
        ...,
        description='Идентификатор значения справочника в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    dictExpression: Annotated[str, StringConstraints(min_length=0, max_length=2000)] = Field(
        ...,
        description='Выражение значения справочника',
        examples=['Выражение значения справочника'],
    )
    dictValue: Dict[str, Any] = Field(
        ...,
        description='Значение справочника',
        examples=['Отображаемое наименование значения справочника'],
    )
    dictValueDisplayName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ...,
        description='Отображаемое наименование значения справочникаа',
        examples=['Отображаемое наименование значения справочника'],
    )


class CounterFullViewDto(BaseModel):
    successCounter: int = Field(
        ..., description='Счетчик успешных прохождений заявки', examples=[123]
    )


class AttributeShortView(BaseModel):
    """
    Лист атрибутов входящий в состав комплексного типа
    """

    attributeId: UUID = Field(
        ...,
        description='Уникальный идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    attributeName: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя атрибута', examples=['name']
    )
    complexFlag: bool = Field(
        ...,
        description='Флаг отображающий тип данных, к которым относится атрибут',
        examples=[True],
    )
    arrayFlag: bool = Field(
        ...,
        description='Флаг отображающий тип объекта данных, к которым относится атрибут',
        examples=[False],
    )
    primitiveTypeId: Optional[str] = Field(
        None,
        description='Уникальный идентификатор примитивного типа. Может принимать null значения',
        examples=['1'],
    )
    complexTypeVersionId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор комплексного типа, на который ссылается атрибут в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )


class ComplexTypeGetFullView(BaseModel):
    typeId: UUID = Field(
        ...,
        description='Идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    displayName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Имя для отображения на странице', examples=['Имя объекта']
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None,
        description='Описание объекта комплексного типа',
        examples=['Объект пользователя, который включает в себя поля FirstName, SecondName, Phone...'],
    )
    createByUser: Optional[str] = None
    attributes: Optional[List[AttributeShortView]] = None


class ComplexTypePage(BaseModel):
    content: Optional[List[ComplexTypeGetFullView]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class ComplexTypeMap(BaseModel):
    typeId: UUID = Field(
        ...,
        description='Идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    displayName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Имя для отображения на странице', examples=['Имя объекта']
    )
    attributes: Optional[List[AttributeCreate]] = None


class AttributeGetFullView(BaseModel):
    attributeId: UUID = Field(
        ...,
        description='Уникальный идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    attributeName: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя атрибута', examples=['name']
    )
    complexFlag: bool = Field(
        ...,
        description='Флаг отображающий тип данных, к которым относится атрибут',
        examples=[True],
    )
    arrayFlag: bool = Field(
        ...,
        description='Флаг отображающий тип объекта данных, к которым относится атрибут',
        examples=[False],
    )
    primitiveTypeId: Optional[str] = Field(
        None,
        description='Уникальный идентификатор примитивного типа. Может принимать null значения',
        examples=['1'],
    )
    complexTypeVersionId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор комплексного типа, на который ссылается атрибут в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание атрибута', examples=['Имя клиента']
    )
    parentId: UUID = Field(
        ...,
        description='Уникальный идентификатор комплексного типа, от которого произведен атрибут, в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )


class ComplexTypeGetFullVersionView(BaseModel):
    typeId: UUID = Field(
        ...,
        description='Идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    displayName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Имя для отображения на странице', examples=['Имя объекта']
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None
    versionType: VersionType = Field(..., description='Тип версии')
    versionName: Optional[Annotated[str, StringConstraints(min_length=0, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=1, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )


class ComplexTypeCatalogShortView(BaseModel):
    typeId: UUID = Field(
        ...,
        description='Идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    displayName: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Имя для отображения на странице', examples=['Имя объекта']
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = Field(
        None,
        description='Последний пользователь, изменивший объект',
        examples=['Иван Иванов'],
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    elementId: Optional[UUID] = Field(
        None,
        description='Идентификатор элемента в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    catalogFlag: bool = Field(..., description='Признак каталога', examples=[True])


class CommunicationChannelShortInfoDto(BaseModel):
    communicationChannelId: UUID = Field(
        ...,
        description='Идентификатор канала коммуникации в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии канала коммуникации в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None


class CommunicationPage(BaseModel):
    content: Optional[List[CommunicationChannelShortInfoDto]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class CommunicationChannelFullViewDto(BaseModel):
    communicationChannelId: UUID = Field(
        ...,
        description='Идентификатор канала коммуникации в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии канала коммуникации в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None,
        description='Описание канала коммуникации',
        examples=['Канал коммуникации PUSH'],
    )
    scriptId: UUID = Field(
        ...,
        description='Идентификатор скрипта, связанного с каналом коммуникации в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    scriptVersionId: UUID = Field(
        ...,
        description='Идентификатор версии скрипта, связанного с каналом коммуникации в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    scriptName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ...,
        description='Имя скрипта, связанного с каналом коммуникации в формате UUID 4',
        examples=['Код вызова канала коммуникации PUSH'],
    )
    communicationVariables: Optional[List[CommunicationVariableFullViewDto]] = None


class CommunicationChannelWithVariablesDto(BaseModel):
    communicationChannelId: UUID = Field(
        ...,
        description='Идентификатор канала коммуникации в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии канала коммуникации в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    communicationVariables: Optional[List[CommunicationVariableFullViewDto]] = None
    communicationScriptVariables: List[ScriptVariableFullView]


class CommunicationChannelShortInfoVersionDto(BaseModel):
    communicationChannelId: UUID = Field(
        ...,
        description='Идентификатор канала коммуникации в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии канала коммуникации в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None
    versionName: Optional[Annotated[str, StringConstraints(min_length=1, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    versionType: VersionType = Field(..., description='Тип версии')
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )


class ChannelFullViewDto(BaseModel):
    key: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Техническое название канала коммуникации', examples=['SMS']
    )
    name: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Название канала коммуникации', examples=['СМС']
    )


class CommunicationChannelCatalogShortInfoDto(BaseModel):
    communicationChannelId: UUID = Field(
        ...,
        description='Идентификатор канала коммуникации в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии канала коммуникации в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = Field(
        None,
        description='Последний пользователь, изменивший объект',
        examples=['Иван Иванов'],
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    elementId: Optional[UUID] = Field(
        None,
        description='Идентификатор элемента в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    catalogFlag: bool = Field(..., description='Признак каталога', examples=[True])


class CatalogShortView(BaseModel):
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    catalogName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя Каталога', examples=['Каталог №1']
    )


class AggregateShortView(BaseModel):
    aggregateId: UUID = Field(
        ...,
        description='Идентификатор агрегата в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии агрегата в формате UUID',
        examples=['9d4ade21-cf23-4819-ac9d-f052dba69002'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    aggregateDescription: Optional[Annotated[str, StringConstraints(max_length=1000)]] = Field(
        None,
        description='Описание агрегата (бизнес наименование)',
        examples=['описание агрегата'],
    )
    aggregateJson: AggregateJson
    changeDt: datetime = Field(..., description='Дата Время обновления')


class AggregateGetFullView(BaseModel):
    aggregateId: UUID = Field(
        ...,
        description='Идентификатор агрегата в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии агрегата в формате UUID',
        examples=['9d4ade21-cf23-4819-ac9d-f052dba69002'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    aggregateDescription: Optional[Annotated[str, StringConstraints(max_length=1000)]] = Field(
        None,
        description='Описание агрегата (бизнес наименование)',
        examples=['описание агрегата'],
    )
    aggregateJson: AggregateJson
    changeDt: datetime = Field(..., description='Дата Время обновления')
    createDt: datetime = Field(..., description='Дата Время создания')
    createByUser: Optional[str] = None
    lastChangeByUser: Optional[str] = None


class AggregateGetFullVersionView(BaseModel):
    aggregateId: UUID = Field(
        ...,
        description='Идентификатор агрегата в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии агрегата в формате UUID',
        examples=['9d4ade21-cf23-4819-ac9d-f052dba69002'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    aggregateDescription: Optional[Annotated[str, StringConstraints(max_length=1000)]] = Field(
        None,
        description='Описание агрегата (бизнес наименование)',
        examples=['описание агрегата'],
    )
    aggregateJson: AggregateJson
    changeDt: datetime = Field(..., description='Дата Время обновления')
    createDt: datetime = Field(..., description='Дата Время создания')
    createByUser: Optional[str] = None
    lastChangeByUser: Optional[str] = None
    versionType: VersionType = Field(..., description='Тип версии')
    versionName: Optional[Annotated[str, StringConstraints(min_length=1, max_length=100)]] = Field(
        None, description='Имя версии', examples=['имя версии']
    )
    versionDescription: Optional[Annotated[str, StringConstraints(min_length=1, max_length=1000)]] = Field(
        None, description='Описание версии', examples=['описание версии']
    )
    rootObjectVersionId: UUID = Field(
        ...,
        description='Идентификатор родительского объекта версии агрегата в формате UUID',
        examples=['9d4ade21-cf23-4819-ac9d-f052dba69002'],
    )


class AggregateCatalogGetFullView(BaseModel):
    aggregateId: UUID = Field(
        ...,
        description='Идентификатор агрегата в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии агрегата в формате UUID',
        examples=['9d4ade21-cf23-4819-ac9d-f052dba69002'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    aggregateDescription: Optional[Annotated[str, StringConstraints(max_length=1000)]] = Field(
        None,
        description='Описание агрегата (бизнес наименование)',
        examples=['описание агрегата'],
    )
    aggregateJson: AggregateJson
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    elementId: Optional[UUID] = Field(
        None,
        description='Идентификатор элемента в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    catalogFlag: bool = Field(..., description='Признак каталога', examples=[True])
    changeDt: datetime = Field(..., description='Дата Время обновления')


class AggregateCatalogPage(BaseModel):
    content: Optional[List[AggregateCatalogGetFullView]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class ExternalServiceUpdateDto(BaseModel):
    """
    Объект для обновления внешнего сервиса
    """

    isAvailableInProperties: Optional[bool] = Field(
        None,
        description='Флаг того, что характеристики ВС будут доступны в __PROPERTIES__',
        examples=[True],
    )
    batchFlag: Optional[bool] = Field(
        None, description='Признак пакетного взаимодействия', examples=[False]
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание внешнего сервиса', examples=['Внешний сервис данных']
    )
    fileFormat: Optional[FileFormat] = Field(
        None, description='Формат сообщения', examples=['JSON']
    )
    method: Optional[Method] = Field(
        None, description='Используемый метод взаимодействия', examples=['GET']
    )
    protocol: Protocol = Field(..., description='Протокол доступа', examples=['REST'])
    syncType: SyncType = Field(..., description='Тип взаимодействия', examples=['SYNC'])
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    body: Optional[str] = Field(
        None, description='Тело запроса', examples=['{request_id: {requestid}}']
    )
    serviceSettings: Optional[List[ExternalServiceSettingsFullViewDto]] = None
    headers: Optional[List[ExternalServiceHeaderFullViewDto]] = None
    variables: Optional[List[ExternalServiceVariableFullViewDto]] = None


class PythonUpdate(BaseModel):
    """
    Объект для обновления скрипта
    """

    scriptText: str = Field(..., description='Текст скрипта', examples=['Текст скрипта'])
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание скрипта', examples=['описание скрипта']
    )
    variables: Optional[List[ScriptVariableFullView]] = None
    scriptType: ScriptType = Field(..., description='Язык скрипта')
    pythonEnvironmentVersionId: Optional[UUID] = Field(
        None,
        description='Идентификатор версии окружения python в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    scriptId: UUID = Field(
        ...,
        description='Идентификатор скрипта в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии скрипта в формате UUID',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )


class OfferUpdateDto(BaseModel):
    """
    Объект для обновления шаблона предложения
    """

    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    scriptVersionId: UUID = Field(
        ...,
        description='Идентификатор версии скрипта, связанного с шаблоном предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    scriptName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ...,
        description='Имя скрипта, связанного с шаблоном предложения в формате UUID 4',
        examples=['Код создания предложения Автокредит'],
    )
    scriptId: UUID = Field(
        ...,
        description='Идентификатор скрипта, связанного с шаблоном предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    offerComplexTypeVersionId: UUID = Field(
        ...,
        description='Id комплексного типа предложения',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    offerVariables: Optional[List[OfferVariableFullViewDto]] = None
    versionId: Optional[str] = None


class EnvironmentUpdateDto(BaseModel):
    """
    Объект для обновления полей среды развертывания
    """

    environmentName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='название среды развертывания', examples=['prod']
    )
    integrationPlatformEnvSettings: IntegrationPlatformEnvironmentFullViewDto
    stateStoreEnvSettings: StateStoreEnvironmentFullViewDto
    streamingPlatformEnvSettings: StreamingPlatformEnvironmentFullViewDto
    defaultFlag: Optional[bool] = Field(
        None, description='Флаг дефолтного окружения', examples=[True]
    )
    kafkaEnvSettings: KafkaEnvironmentUpdateDto


class DiagramInOutParameterFullViewDto(BaseModel):
    parameterVersionId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор версии входного/выходного параметра',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    parameterId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор входного/выходного параметра',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    parameterName: Annotated[str, StringConstraints(max_length=40)] = Field(
        ..., description='Имя входного/выходного параметра', examples=['Client']
    )
    dictName: Optional[Annotated[str, StringConstraints(max_length=100)]] = Field(
        None, description='Наименование справочника', examples=['Справочник №1']
    )
    typeId: Annotated[str, StringConstraints(min_length=1, max_length=36)] = Field(
        ...,
        description='Уникальный идентификатор примитивного или пользовательского типа входного/выходного параметра.',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    dictId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор справочника',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    arrayFlag: bool = Field(..., description='Признак массива (true)', examples=[False])
    complexFlag: bool = Field(
        ..., description='Признак комплексного типа (true)', examples=[False]
    )
    dictFlag: bool = Field(
        ..., description='Признак справочника кастомных типов (true)', examples=[False]
    )
    parameterType: ParameterType = Field(
        ..., description='Тип параметра (входной, выходной)'
    )
    defaultValue: Optional[str] = Field(
        None, description='Значение по умолчанию', examples=['12.89']
    )
    functionIds: Optional[List[str]] = Field(
        None,
        description='Множество идентификаторов пользовательских функций, использующихся в поле аварийного ответа',
        examples=[['f8df6383-c59e-45bb-bc0e-1fe052fe1a68']]
        
    )
    metaInfo: Optional[InOutParamMetaInfo] = None


class DiagramParameterDto(BaseModel):
    inOutParameters: Optional[List[DiagramInOutParameterFullViewDto]] = None
    innerVariables: Optional[List[DiagramInnerVariableFullViewDto]] = None


class AdditionalParameters(BaseModel):
    key: Optional[str] = None
    rowKey: Optional[str] = None
    isValueFromDict: Optional[bool] = None
    value: Optional[SimpleVariableProperties] = None


class AggregateComputeOutputVariableMapping(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    aggregate: Optional[AggregateComputeProperties] = None


class AggregateReadOutputVariableMapping(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    aggregate: Optional[AggregateReadingProperties] = None


class AggregateReading(Properties):
    parallelism: Optional[int] = None
    groupingElements: Optional[List[GroupingElementsMapping]] = None
    outputVariablesMapping: Optional[List[AggregateReadOutputVariableMapping]] = None


class AggregationNode(Properties):
    partition_by: List[str]
    retention_type: RetentionType
    window_interval: TimeInterval
    time_attribute: Optional[TimeAttribute] = None
    watermark: Optional[Watermark] = None
    mappings: List[FlinkAggregate]


class Calculates(Properties):
    parallelism: Optional[int] = None
    calculate: List[CalculateNodeVariable]


class Catalog(BaseModel):
    name: Optional[str] = None
    type: Type
    warehouse: Optional[str] = None
    uri: Optional[str] = None
    table: Table
    properties: Optional[List[Property]] = None


class CdcMultiTable(BaseModel):
    target_fields: Optional[CdcTargetFields] = None
    type: Optional[Type1] = None


class CdcSimple(BaseModel):
    target_fields: Optional[CdcTargetFields] = None
    type: Optional[Type1] = None


class ColumnFamily(BaseModel):
    name: str
    alias: Optional[str] = None
    qualifiers: List[Qualifier]


class Communication(Properties):
    parallelism: Optional[int] = None
    communicationChannelName: Optional[str] = None
    channelId: Optional[str] = None
    channelVersionId: Optional[str] = None
    communicationFields: Optional[List[TemplateMappingVariable]] = None
    nodeVariablesMapping: Optional[List[ChannelNodeMappingVariable]] = None
    outputVariablesMapping: Optional[List[NodeMappingVariable]] = None


class CommunicationHub(Properties):
    parallelism: Optional[int] = None
    serviceId: Optional[str] = None
    versionId: Optional[str] = None
    inputVariableMapping: Optional[NodeMappingVariable] = None
    errorVariablesMapping: Optional[List[NodeMappingVariable]] = None


class CommunicationHubRead(Properties):
    parallelism: Optional[int] = None
    serviceId: Optional[str] = None
    versionId: Optional[str] = None
    outputVariableMapping: Optional[NodeMappingVariable] = None
    clientId: Optional[VariablePropertiesBase] = None
    clientIdType: Optional[str] = None
    isControlGroup: Optional[bool] = None
    isTargetGroup: Optional[bool] = None
    createdAtBefore: Optional[str] = None
    createdAtAfter: Optional[str] = None
    source: Optional[str] = None
    channel: Optional[List[str]] = None
    embed: Optional[List[EmbedEnum]] = None
    errorVariablesMapping: Optional[List[NodeMappingVariable]] = None
    inputVariablesMapping: Optional[List[NodeMappingVariable]] = None


class CustomCode(Properties):
    parallelism: Optional[int] = None
    customCodeId: Optional[str] = None
    versionId: Optional[str] = None
    scriptType: Optional[ScriptType2] = None
    inputVariablesMapping: Optional[List[NodeMappingVariable]] = None
    outputVariablesMapping: Optional[List[NodeMappingVariable]] = None


class Debezium(BaseModel):
    properties: Optional[List[Property]] = None


class DecisionTable(Properties):
    pass


class Decoding(BaseModel):
    plugin: Optional[Plugin] = None


class ExternalService(Properties):
    parallelism: Optional[int] = None
    serviceId: Optional[str] = None
    versionId: Optional[str] = None
    inputVariablesMapping: Optional[List[NodeMappingVariable]] = None
    outputVariablesMapping: Optional[List[NodeMappingVariable]] = None
    errorVariablesMapping: Optional[List[NodeMappingVariable]] = None


class FileSinkNode(Properties):
    file: Optional[File] = None


class FilterNode(Properties):
    filter: str


class FinishNodeVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    parameter: OutParameterShortInfo


class FlatMapNodeConfig(BaseModel):
    type: Optional[Type3] = None
    debatch: Optional[bool] = None
    missing_data_strategy: Optional[MissingDataStrategy] = None
    output: Optional[Output] = None
    input: Optional[Input] = None


class Fork(Properties):
    branches: Optional[List[DefaultBranch]] = None
    defaultJoinPath: Optional[DefaultBranch] = None
    nodeIdsWithJoinNodeIds: Optional[List[str]] = None


class GroovyNode(Properties):
    script_text: str
    additional_schema: str
    in_: List[str] = Field(..., alias='in')
    out: List[str]
    execution_options: Optional[ExecutionOptions] = None


class GroupingNode(Properties):
    mapping: List[MappingOperation]
    group_by: str
    having: Optional[str] = None
    window: Optional[GroupingWindow] = None


class HBaseLookupNode(Properties):
    connection_uuid: UUID
    enrichment_type: EnrichmentType
    table_name: str
    key: str
    column_family_list: List[ColumnFamily]
    execution_options: Optional[ExecutionOptions] = None


class HBaseSinkNode(Properties):
    connection_uuid: UUID
    table_name: str
    key: str
    column_family_list: List[ColumnFamily]
    execution_options: Optional[ExecutionOptions] = None


class IcebergSinkNode(Properties):
    catalog: Catalog
    write: Optional[Write] = None


class JoinFlowNodeVariableMapping(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    variableToMergeName: Optional[str] = None
    arrayVariable: Optional[SimpleVariableProperties] = None
    variablePathWithOutRoot: Optional[str] = None


class JoinNode(Properties):
    join_type: JoinType
    mapping: List[MappingOperation]
    join_condition: str
    left_stream: JoinStream
    right_stream: JoinStream


class KafkaSinkKafkaNodeCfg(BaseModel):
    producer: KafkaSinkProducerCfg


class MappingNode(Properties):
    mapping: List[MappingOperation]


class NodeMetaInfo(BaseModel):
    """
    JSON-настройки отображения
    """

    position: Optional[Position] = None
    shape: Optional[Shape] = None
    extent: Optional[str] = Field(None, description='Параметр для группировки')
    parentNode: Optional[str] = Field(None, description='Указатель на родителя')
    blockInnerMeta: Optional[str] = Field(
        None, description='Внутренняя метаинформация узла'
    )


class Offer(Properties):
    parallelism: Optional[int] = None
    offerId: Optional[str] = None
    offerName: Optional[str] = None
    versionId: Optional[str] = None
    offerComplexTypeVersionId: Optional[str] = None
    offerVariables: Optional[List[TemplateMappingVariable]] = None
    nodeVariablesMapping: Optional[List[OfferNodeMappingVariable]] = None
    outputVariableMapping: Optional[NodeMappingVariable] = None


class OfferStorageRead(Properties):
    parallelism: Optional[int] = None
    serviceId: Optional[str] = None
    versionId: Optional[str] = None
    serviceType: Optional[ServiceType1] = None
    offerReadOutputVariableMapping: Optional[NodeMappingVariable] = None
    externalOfferId: Optional[NodeMappingVariable] = None
    clientId: Optional[NodeMappingVariable] = None
    clientIdType: Optional[str] = None
    activeChannel: Optional[bool] = None
    active: Optional[bool] = None
    control: Optional[bool] = None
    getDefaultOffers: Optional[bool] = None
    offerCount: Optional[int] = None
    errorVariablesMapping: Optional[List[NodeMappingVariable]] = None


class OfferStorageWrite(Properties):
    parallelism: Optional[int] = None
    serviceId: Optional[str] = None
    versionId: Optional[str] = None
    offerVariableMapping: Optional[NodeMappingVariable] = None
    continueWithPartialWrittenOffers: Optional[bool] = None
    errorVariablesMapping: Optional[List[NodeMappingVariable]] = None


class Partition(BaseModel):
    partition_type: Optional[PartitionType] = None
    values: Optional[List[List[str]]] = None
    field_name: Optional[str] = None
    range: Optional[Range] = None


class PolicyRead(Properties):
    parallelism: Optional[int] = None
    serviceId: Optional[str] = None
    versionId: Optional[str] = None
    outputVariableMapping: Optional[VariablePropertiesBase] = None
    clientId: Optional[VariablePropertiesBase] = None
    dryRun: Optional[bool] = None
    weak: Optional[bool] = None
    isInstantDispatch: Optional[bool] = None
    contactDateTime: Optional[ContactDateTimeNodeVariable] = None
    additionalParameters: Optional[List[AdditionalParameters]] = None
    errorVariablesMapping: Optional[List[NodeMappingVariable]] = None


class ReadMappingVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    nodeVariable: Optional[str] = None
    externalId: Optional[str] = None
    isJdbcArrayKey: Optional[bool] = None
    arrayVariable: Optional[WriteReadVariableProperties] = None
    nodeVariableType: Optional[str] = None


class Ruleset(Properties):
    parallelism: Optional[int] = None
    ruleVariable: Optional[RulesetVariableProperties] = None
    rules: Optional[List[RulesetProperties]] = None


class Scorecard(Properties):
    outputVariable: Optional[ScorecardOutputVariable] = None
    inputVariablesMapping: Optional[List[ScorecardInputVariable]] = None


class Server(BaseModel):
    time: Optional[Time] = None


class Ssl(BaseModel):
    truststore: Optional[Store] = None
    keystore: Optional[Store] = None
    key: Optional[Key] = None


class Start(Properties):
    parallelism: Optional[int] = None
    mappingVariables: Optional[List[StartNodeVariable]] = None


class TarantoolReadByIndexInputMappingVariable(BaseModel):
    rowKey: Optional[str] = None
    indexName: Optional[str] = None
    predicate: Optional[Predicate] = None
    order: Optional[int] = None
    inputVariablesMapping: Optional[List[TarantoolReadInputMappingVariable]] = None


class WriteFilterVariableProperties(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    expression: Optional[str] = None
    filterSign: Optional[FilterSign] = None
    arrayVariable: Optional[WriteReadVariableProperties] = None


class WriteNodeVariableMapping(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    arrayVariable: Optional[WriteReadVariableProperties] = None
    nodeVariable: Optional[DataSourceVariable] = None


class CustomAttributeDictionaryUpdate(BaseModel):
    """
    Объект для обновления справочника
    """

    dictName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя справочника', examples=['Справочник №1']
    )
    dictValueTypeId: Annotated[str, StringConstraints(min_length=1, max_length=1)] = Field(
        ..., description='Идентификатор типа значений справочника', examples=['1']
    )
    id: UUID = Field(
        ...,
        description='Идентификатор справочника в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    values: List[CustomAttributeDictionaryValueUpdate]


class CommunicationChannelUpdateDto(BaseModel):
    """
    Объект для обновления канала коммуникации
    """

    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None,
        description='Описание канала коммуникации',
        examples=['Канал коммуникации PUSH'],
    )
    scriptVersionId: UUID = Field(
        ...,
        description='Идентификатор версии скрипта, связанного с каналом коммуникации в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    communicationVariables: Optional[List[CommunicationVariableFullViewDto]] = None


class JsonGenerationValidationDto(BaseModel):
    expression: str = Field(..., description='Валидируемое выражение')
    functionIds: Optional[List[str]] = None
    json_: Optional[str] = Field(None, alias='json', description='Заполненный json')
    calculatedParameter: JsonGenerationVariableDto
    jsonVariables: Optional[List[JsonGenerationVariableDto]] = Field(
        None, description='Параметры, используемые в выражении'
    )


class ExternalServiceCreateDto(BaseModel):
    isAvailableInProperties: Optional[bool] = Field(
        None,
        description='Флаг того, что характеристики ВС будут доступны в __PROPERTIES__',
        examples=[True],
    )
    batchFlag: Optional[bool] = Field(
        None, description='Признак пакетного взаимодействия', examples=[False]
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание внешнего сервиса', examples=['Внешний сервис данных']
    )
    fileFormat: Optional[FileFormat] = Field(
        None, description='Формат сообщения', examples=['JSON']
    )
    method: Optional[Method] = Field(
        None, description='Используемый метод взаимодействия', examples=['GET']
    )
    protocol: Protocol3 = Field(..., description='Протокол доступа', examples=['REST'])
    syncType: SyncType = Field(..., description='Тип взаимодействия', examples=['SYNC'])
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    body: Optional[str] = Field(
        None, description='Тело запроса', examples=['{request_id: {requestid}}']
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    serviceSettings: Optional[List[ExternalServiceSettingsViewWithoutIdDto]] = None
    headers: Optional[List[ExternalServiceHeaderViewWithoutIdDto]] = None
    variables: Optional[List[ExternalServiceVariableViewWithoutIdDto]] = None


class PythonCreate(BaseModel):
    scriptText: str = Field(..., description='Текст скрипта', examples=['Текст скрипта'])
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Описание скрипта', examples=['описание скрипта']
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    variables: Optional[List[ScriptVariableViewWithoutVersionIdDto]] = None
    pythonEnvironmentVersionId: Optional[UUID] = Field(
        None,
        description='Идентификатор версии окружения python в формате UUID',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class PythonEnvironmentCreateDto(BaseModel):
    name: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя окружения python', examples=['питон']
    )
    pythonVersionId: Annotated[str, StringConstraints(min_length=36, max_length=36)] = Field(
        ...,
        description='Идентификатор версии python',
        examples=['597e4cc3-98d2-42a6-9209-e803417fcba7'],
    )
    requirementsTxt: Optional[str] = Field(
        None, description='Текст файла requirements.txt', examples=['pandas==0.2.0']
    )
    pythonEnvironmentSettings: Optional[
        List[PythonEnvironmentSettingsWithoutIdDto]
    ] = None


class RestSourceCreateDto(BaseModel):
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание REST источника', examples=['REST источник']
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    restSourceSettings: Optional[List[RestSourceSettingsViewWithoutIdDto]] = None
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class OfferCreateDto(BaseModel):
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    scriptVersionId: UUID = Field(
        ...,
        description='Идентификатор версии скрипта, связанного с шаблоном предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    scriptName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ...,
        description='Имя скрипта, связанного с шаблоном предложения в формате UUID 4',
        examples=['Код создания предложения Автокредит'],
    )
    scriptId: UUID = Field(
        ...,
        description='Идентификатор скрипта, связанного с шаблоном предложения в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    offerComplexTypeVersionId: UUID = Field(
        ...,
        description='Id комплексного типа предложения',
        examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'],
    )
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    offerVariables: Optional[List[OfferVariableWithoutIdDto]] = None


class ConfirmImportAllObjectInfo(BaseModel):
    deploys: Optional[List[ConfirmImportObjectInfo]] = None
    diagrams: Optional[List[ConfirmImportObjectInfo]] = None
    complexTypes: Optional[List[ConfirmImportObjectInfo]] = None
    dictionaries: Optional[List[ConfirmImportObjectInfo]] = None
    scripts: Optional[List[ConfirmImportObjectInfo]] = None
    externalServices: Optional[List[ConfirmImportObjectInfo]] = None
    aggregates: Optional[List[ConfirmImportObjectInfo]] = None
    dataProviders: Optional[List[ConfirmImportObjectInfo]] = None
    communications: Optional[List[ConfirmImportObjectInfo]] = None
    offers: Optional[List[ConfirmImportObjectInfo]] = None


class ConfirmImportResponseDto(BaseModel):
    objectsInfo: Optional[ConfirmImportAllObjectInfo] = None
    fileName: Optional[str] = None


class SelectedImportDto(BaseModel):
    objectsInfo: SelectedImportStatusDto
    fileName: str


class ImportResponseDto(BaseModel):
    importStatus: Optional[SelectedImportDto] = None
    totalNumberOfObjects: Optional[int] = None
    numberOfSelectedObjects: Optional[int] = None
    numberOfImportedObjects: Optional[int] = None


class KafkaCreateDto(BaseModel):
    name: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя kafka', examples=['local kafka']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание kafka', examples=['Kafka для тестирования']
    )
    kafkaSettings: Optional[List[KafkaSettingsWithoutIdDto]] = None


class EnvironmentCreateDto(BaseModel):
    environmentName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='название среды развертывания', examples=['prod']
    )
    integrationPlatformEnvSettings: IntegrationPlatformEnvironmentFullViewDto
    stateStoreEnvSettings: StateStoreEnvironmentFullViewDto
    streamingPlatformEnvSettings: StreamingPlatformEnvironmentFullViewDto
    defaultFlag: Optional[bool] = Field(
        None, description='Флаг дефолтного окружения', examples=[True]
    )
    kafkaEnvSettings: KafkaEnvironmentCreateDto


class NodeViewShortInfo(BaseModel):
    nodeId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор узла',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    nodeName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя узла', examples=['Узел первичной фильтрации']
    )
    validFlag: bool = Field(..., description='Признак корректности узла', examples=[False])
    nodeTypeId: int = Field(
        ..., description='Уникальный идентификатор типа узла', examples=[10]
    )
    inputLinks: Optional[List[str]] = None
    outputLinks: Optional[List[str]] = None
    metaInfo: Optional[NodeMetaInfo] = None


class DeployConfigurationFullDto(BaseModel):
    deployType: DeployType = Field(..., description='Тип деплоя')
    deployId: UUID = Field(
        ...,
        description='Уникальный идентификатор деплоя в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    diagramId: Optional[UUID] = Field(
        None,
        description='Идентификатор диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    lastConfigDeployId: Optional[str] = None
    parallelism: int = Field(..., description='Параллелизм', examples=[2])
    detailedLogging: Optional[bool] = Field(
        None, description='Включение подробного логирования', examples=[True]
    )
    taskManagerMemory: int = Field(
        ..., description='Память task manager в мегабайтах', examples=[512]
    )
    jobManagerMemory: int = Field(
        ..., description='Память job manager в мегабайтах', examples=[512]
    )
    arguments: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None, description='Параметры запуска Флинк', examples=['-Djob.manager.key=value']
    )
    taskManagerCpuLimit: Optional[float] = Field(
        None,
        description='Выделяемый ресурс ядер на диаграмму task manager (верхняя граница)',
        examples=[1],
    )
    taskManagerCpu: Optional[float] = Field(
        None,
        description='Выделяемый ресурс ядер на диаграмму task manager (базово-запрашиваемое число)',
        examples=[1],
    )
    jobManagerCpuLimit: Optional[float] = Field(
        None,
        description='Выделяемый ресурс ядер на диаграмму job manager (верхняя граница)',
        examples=[1],
    )
    jobManagerCpu: Optional[float] = Field(
        None,
        description='Выделяемый ресурс ядер на диаграмму job manager (базово-запрашиваемое число)',
        examples=[1],
    )
    parallelDeployFlag: Optional[bool] = Field(
        None, description='Параметр параллельного деплоя', examples=[True]
    )
    callUri: UUID = Field(
        ...,
        description='Идентификатор вызова диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    timeout: Optional[int] = Field(
        None, description='Тайм-аут исполнения диаграммы', examples=[100]
    )
    replicationCount: Annotated[int, Field(ge=1)] = Field(
        ..., description='Количество репликаций', examples=[2]
    )
    useLastTopics: Optional[bool] = Field(
        None, description='Использовать последние топики', examples=[True]
    )
    deployVariables: Optional[List[DeployVariablesFullDto]] = None
    subDiagramConfigurations: Optional[List[DeployConfigurationFullDto]] = None


class DiagramInOutParametersViewDto(BaseModel):
    diagramId: UUID = Field(
        ...,
        description='Идентификатор диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )
    lastChangeByUser: Optional[str] = None
    changeDt: datetime = Field(..., description='Дата Время обновления')
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    diagramDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=2000)]] = Field(
        None,
        description='Описание диаграммы',
        examples=['Диаграмма обладает функционалом и выполняет...'],
    )
    createByUser: Optional[str] = None
    createDt: datetime = Field(..., description='Дата Время создания')
    inOutParameters: Optional[List[DiagramInOutParameterFullViewDto]] = None
    errorResponseFlag: bool = Field(
        ..., description='Флаг обработки аварийного ответа', examples=[True]
    )
    id: Optional[str] = None


class DataProviderCreateDto(BaseModel):
    sourceName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя источника данных', examples=['Витрина данных']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание источника данных', examples=['Операционная БД']
    )
    sourceType: SourceType = Field(
        ..., description='Тип источника данных', examples=['ORACLE']
    )
    connectionType: ConnectionType = Field(
        ..., description='Тип соединения', examples=['JDBC']
    )
    settings: Optional[List[DataProviderSettingsViewWithoutIdDto]] = None


class CustomAttributeDictionaryCreate(BaseModel):
    dictName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя справочника', examples=['Справочник №1']
    )
    dictValueTypeId: Annotated[str, StringConstraints(min_length=1, max_length=1)] = Field(
        ..., description='Идентификатор типа значений справочника', examples=['1']
    )
    values: List[CustomAttributeDictionaryValueCreate]


class CommunicationChannelCreateDto(BaseModel):
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None,
        description='Описание канала коммуникации',
        examples=['Канал коммуникации PUSH'],
    )
    scriptVersionId: UUID = Field(
        ...,
        description='Идентификатор версии скрипта, связанного с каналом коммуникации в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    communicationVariables: Optional[List[CommunicationVariableViewWithoutIdDto]] = None
    catalogId: Optional[UUID] = Field(
        None,
        description='Идентификатор каталога в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class UserFunctionPage(BaseModel):
    content: Optional[List[UserFunctionShortInfo]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class UserFunctionCatalogPage(BaseModel):
    content: Optional[List[UserFunctionCatalogShortInfo]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class TestCaseDebugNodeInfoFullView(BaseModel):
    """
    Отладочная информация по узлам (ключ - уникальный идентификатор узла)
    """

    successFlag: bool = Field(
        ...,
        description='Признак успешного прохождения заявки через узел (в случае ошибки - false)',
        examples=[True],
    )
    inputData: Optional[List[TestCaseNodeInputDataFullView]] = None
    calculatedData: Optional[str] = Field(
        None,
        description='Рассчитанные на узле данные',
        examples=['{"vyhod1":1,"vyhod2":1}'],
    )
    errorMessage: Optional[str] = Field(
        None, description='Информация об ошибке', examples=['Exception occurred']
    )


class ExternalServicePage(BaseModel):
    content: Optional[List[ExternalServiceShortInfoDto]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class ExternalServiceCatalogPage(BaseModel):
    content: Optional[List[ExternalServiceCatalogShortInfoDto]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class ScriptPage(BaseModel):
    content: Optional[List[ScriptShortInfoDto]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class ScriptCatalogPage(BaseModel):
    content: Optional[List[ScriptCatalogShortInfoDto]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class PythonEnvironmentPage(BaseModel):
    content: Optional[List[PythonEnvironmentShortInfoDto]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class RestSourcePage(BaseModel):
    content: Optional[List[RestSourceShortInfoDto]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class RestSourceCatalogPage(BaseModel):
    content: Optional[List[RestSourceCatalogShortInfoDto]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class AttributeFullViewDto(BaseModel):
    key: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Техническое название атрибута', examples=['Attribute key']
    )
    name: Annotated[str, StringConstraints(max_length=100)] = Field(
        ..., description='Название канала атрибута', examples=['Attribute value']
    )
    values: List[AttributeValuesFullViewDto]


class OfferPage(BaseModel):
    content: Optional[List[OfferShortInfoDto]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class ObjectRelationPage(BaseModel):
    content: Optional[List[ObjectRelationsFullViewDto]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class KafkaPage(BaseModel):
    content: Optional[List[KafkaShortInfoDto]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class EnvironmentFullViewDto(BaseModel):
    environmentId: UUID = Field(
        ...,
        description='Уникальный идентификатор среды развертывания в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    environmentName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='название среды развертывания', examples=['prod']
    )
    createDt: datetime = Field(..., description='Дата Время создания')
    changeDt: datetime = Field(..., description='Дата Время обновления')
    createByUser: Optional[str] = None
    lastChangeByUser: str
    defaultFlag: Optional[bool] = Field(
        None, description='Флаг дефолтного окружения', examples=[True]
    )
    streamingPlatformEnvSettings: StreamingPlatformEnvironmentFullViewDto
    integrationPlatformEnvSettings: IntegrationPlatformEnvironmentFullViewDto
    kafkaEnvSettings: KafkaEnvironmentFullViewDto
    stateStoreEnvSettings: StateStoreEnvironmentFullViewDto


class NodeViewWithVariablesDto(BaseModel):
    nodeId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор узла',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    nodeName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя узла', examples=['Узел первичной фильтрации']
    )
    nodeDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None,
        description='Описание узла',
        examples=['Узел фильтрации данных по первичному признаку'],
    )
    validFlag: bool = Field(..., description='Признак корректности узла', examples=[False])
    nodeTypeId: int = Field(
        ..., description='Уникальный идентификатор типа узла', examples=[10]
    )
    properties: Optional[Properties] = None
    inputLinks: Optional[List[str]] = None
    outputLinks: Optional[List[str]] = None
    metaInfo: Optional[NodeMetaInfo] = None
    validationPayload: Optional[NodeValidationPayload] = None
    availableToMap: Optional[List[VariableViewDto]] = None
    availableToCalc: Optional[List[VariableViewDto]] = None


class DiagramCatalogPage(BaseModel):
    content: Optional[List[DiagramCatalogShortInfoView]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class DeployInnerInfo(BaseModel):
    deployId: UUID = Field(
        ...,
        description='Уникальный идентификатор деплоя в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    diagram: Optional[DiagramVersionNameView] = None
    deployStatus: DeployStatus = Field(..., description='Статус деплоя')


class DeployViewDto(BaseModel):
    deployId: UUID = Field(
        ...,
        description='Уникальный идентификатор деплоя в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    diagram: Optional[DiagramVersionNameView] = None
    deployStatus: DeployStatus = Field(..., description='Статус деплоя')
    deployDt: datetime = Field(..., description='Дата Время деплоя')
    changeDt: datetime = Field(..., description='Дата Время обновления')
    deployUser: str = Field(
        ..., description='Пользователь, задеплоивший диаграмму', examples=['Иван Иванов']
    )
    createUser: str = Field(
        ..., description='Пользователь, задеплоивший диаграмму', examples=['Иван Иванов']
    )
    deployType: DeployType = Field(..., description='Тип деплоя')
    callUri: Optional[UUID] = Field(
        None,
        description='Идентификатор вызова диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    flinkTrackingUrl: Optional[str] = None
    childDeploys: Optional[List[DeployInnerInfo]] = None
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None


class DataProviderGetFullViewWithTables(BaseModel):
    sourceId: UUID = Field(
        ...,
        description='Уникальный идентификатор источника данных в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    sourceName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя источника данных', examples=['Витрина данных']
    )
    createDt: datetime = Field(..., description='Дата Время создания')
    changeDt: datetime = Field(..., description='Дата Время обновления')
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    description: Optional[Annotated[str, StringConstraints(min_length=0, max_length=200)]] = Field(
        None, description='Описание источника данных', examples=['Операционная БД']
    )
    sourceType: SourceType = Field(
        ..., description='Тип источника данных', examples=['ORACLE']
    )
    connectionType: ConnectionType = Field(
        ..., description='Тип соединения', examples=['JDBC']
    )
    settings: Optional[List[DataProviderSettingsFullViewDto]] = None
    tables: Optional[List[TablesDto]] = None
    isConnectionSucceeded: Optional[bool] = Field(
        None, description='Признак успещного соединения', examples=[True]
    )


class CustomAttributeDictionaryPage(BaseModel):
    content: Optional[List[CustomAttributeDictionaryShortInfo]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class CustomAttributeDictionaryFullView(BaseModel):
    id: UUID = Field(
        ...,
        description='Идентификатор справочника в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    dictName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя справочника', examples=['Справочник №1']
    )
    dictValueTypeId: Annotated[str, StringConstraints(min_length=1, max_length=1)] = Field(
        ..., description='Идентификатор типа значений справочника', examples=['1']
    )
    changeDt: datetime = Field(..., description='Дата Время обновления')
    createDt: datetime = Field(..., description='Дата Время создания')
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    values: List[CustomAttributeDictionaryValueFullView]


class ComplexTypeCatalogPage(BaseModel):
    content: Optional[List[ComplexTypeCatalogShortView]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class CommunicationCatalogPage(BaseModel):
    content: Optional[List[CommunicationChannelCatalogShortInfoDto]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class CatalogPage(BaseModel):
    content: Optional[List[CatalogShortView]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class AggregatePage(BaseModel):
    content: Optional[List[AggregateShortView]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class AggregateCompute(Properties):
    parallelism: Optional[int] = None
    groupingElements: Optional[List[GroupingElementsMapping]] = None
    outputVariablesMapping: Optional[List[AggregateComputeOutputVariableMapping]] = None
    retentionTimeField: Optional[str] = None
    retentionType: Optional[RetentionType] = None
    retentionTimeValue: Optional[int] = None
    retentionTimeUnit: Optional[RetentionTimeUnit] = None
    watermarkType: Optional[WatermarkType] = None
    duration: Optional[int] = None
    coefficient: Optional[float] = None


class CdcApplyMultiTableNode(Properties):
    jdbc_connection_uuid: Optional[UUID] = None
    cdc: Optional[CdcMultiTable] = None
    execution_options: Optional[ExecutionOptions] = None


class CdcMongoDbNode(Properties):
    connection_uuid: UUID
    table_name: str
    timezone: Optional[str] = None
    debezium: Optional[Debezium] = None


class CdcMsSqlNode(Properties):
    jdbc_connection_uuid: UUID
    timezone: Optional[str] = None
    table_schema: Optional[str] = None
    table_name: str
    debezium: Optional[Debezium] = None


class Finish(Properties):
    mappingVariables: Optional[List[FinishNodeVariable]] = None


class FlatMapNode(Properties):
    flatmap: Optional[FlatMapNodeConfig] = None


class JdbcRead(Properties):
    parallelism: Optional[int] = None
    dataProviderUuid: Optional[str] = None
    timeout: Optional[int] = None
    maxRetries: Optional[int] = None
    selectedTableNames: Optional[List[str]] = None
    allowMultiResultResponse: Optional[bool] = None
    outputVariablesMapping: List[ReadMappingVariable]
    query: Optional[str] = None


class JdbcStatement(BaseModel):
    input_type: InputType
    parameter_types: Optional[List[str]] = None
    query: Optional[str] = None
    fetch_size: Optional[int] = None
    table: Optional[TableWithFilter] = None
    partition: Optional[Partition] = None


class JdbcWrite(Properties):
    parallelism: Optional[int] = None
    dataProviderUuid: Optional[str] = None
    timeout: Optional[int] = None
    maxRetries: Optional[int] = None
    tableName: Optional[str] = None
    schemaName: Optional[str] = None
    queryType: Optional[QueryType1] = None
    arrayFlag: Optional[bool] = None
    syncWriteFlag: Optional[bool] = None
    inputVariablesUpdateMapping: Optional[List[WriteNodeVariableMapping]] = None
    inputVariablesConditionMapping: Optional[List[WriteNodeVariableMapping]] = None
    filterVariables: Optional[List[WriteFilterVariableProperties]] = None


class JoinFlow(Properties):
    parallelism: Optional[int] = None
    joinConditionType: Optional[JoinConditionType] = None
    timeout: Optional[int] = None
    mergeArrays: Optional[bool] = None
    specifyKeys: Optional[bool] = None
    branches: Optional[List[Branch]] = None
    keyVariableMapping: Optional[List[JoinFlowNodeVariableMapping]] = None


class Postgres(BaseModel):
    server: Optional[Server] = None
    changelog: Optional[Changelog] = None
    slot: Optional[Slot] = None
    decoding: Optional[Decoding] = None
    table: Table
    username: Optional[str] = None
    password: Optional[str] = None
    url: Optional[str] = None


class SecurityCfg(BaseModel):
    protocol: Optional[Protocol2] = None
    ssl: Optional[Ssl] = None


class TarantoolRead(Properties):
    parallelism: Optional[int] = None
    dataProviderUuid: Optional[str] = None
    timeout: Optional[int] = None
    maxRetries: Optional[int] = None
    selectedTableNames: Optional[List[str]] = None
    allowMultiResultResponse: Optional[bool] = None
    outputVariablesMapping: List[ReadMappingVariable]
    searchType: Optional[SearchType] = None
    dataProviderName: Optional[str] = None
    selectedSearcherName: Optional[str] = None
    inputVariablesMapping: Optional[List[TarantoolReadInputMappingVariable]] = None
    readByIndexInputMappingVariables: Optional[
        List[TarantoolReadByIndexInputMappingVariable]
    ] = None
    luaResultType: Optional[LuaResultType] = None


class TarantoolWrite(Properties):
    parallelism: Optional[int] = None
    dataProviderUuid: Optional[str] = None
    timeout: Optional[int] = None
    maxRetries: Optional[int] = None
    tableName: Optional[str] = None
    schemaName: Optional[str] = None
    queryType: Optional[QueryType1] = None
    arrayFlag: Optional[bool] = None
    syncWriteFlag: Optional[bool] = None
    inputVariablesUpdateMapping: Optional[List[WriteNodeVariableMapping]] = None
    inputVariablesConditionMapping: Optional[List[WriteNodeVariableMapping]] = None
    filterVariables: Optional[List[WriteFilterVariableProperties]] = None
    selectedIndexName: Optional[str] = None


class DiagramViewDto(BaseModel):
    diagramId: UUID = Field(
        ...,
        description='Идентификатор диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы в формате UUID 4',
        examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'],
    )
    lastChangeByUser: Optional[str] = None
    changeDt: datetime = Field(..., description='Дата Время обновления')
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    diagramDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=2000)]] = Field(
        None,
        description='Описание диаграммы',
        examples=['Диаграмма обладает функционалом и выполняет...'],
    )
    versionType: VersionType = Field(..., description='Тип версии')
    nodes: Optional[Dict[str, NodeViewShortInfo]] = None
    links: Optional[Dict[str, LinkViewDto]] = None
    metaInfo: Optional[DiagramMetaInfo] = None
    createByUser: Optional[str] = None
    createDt: datetime = Field(..., description='Дата Время создания')
    errorResponseFlag: bool = Field(
        ..., description='Флаг обработки аварийного ответа', examples=[True]
    )


class NodesPasteResponseDto(BaseModel):
    diagram: Optional[DiagramViewDto] = None
    nodeIds: Optional[List[str]] = None
    linkIds: Optional[List[str]] = None
    oldParameters: Optional[List[DiagramInOutParameterFullViewDto]] = None


class TestCaseDebugFullView(BaseModel):
    diagramVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии диаграммы',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    testName: str = Field(..., description='Имя теста', examples=['test_01'])
    testCaseNumber: Optional[int] = Field(
        None, description='Номер тестового набора', examples=[22]
    )
    debugNodeInfo: Optional[Dict[str, TestCaseDebugNodeInfoFullView]] = Field(
        None,
        description='Отладочная информация по узлам (ключ - уникальный идентификатор узла)',
    )


class DeployPage(BaseModel):
    content: Optional[List[DeployViewDto]] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None
    currentPageNumber: Optional[int] = None


class Cdc(BaseModel):
    postgres: Postgres


class CdcOracleMultiTableNode(Properties):
    jdbc_connection_uuid: UUID
    cdc: Cdc
    debezium: Optional[Debezium] = None


class CdcOracleNode(Properties):
    jdbc_connection_uuid: UUID
    cdc: Cdc
    debezium: Optional[Debezium] = None


class CdcPostgresMultiTableNode(Properties):
    jdbc_connection_uuid: UUID
    cdc: Cdc
    debezium: Optional[Debezium] = None


class CdcPostgresNode(Properties):
    jdbc_connection_uuid: UUID
    cdc: Cdc
    debezium: Optional[Debezium] = None


class Jdbc(BaseModel):
    statement: JdbcStatement
    source: Optional[Source] = None


class JdbcLookupNode(Properties):
    jdbc_connection_uuid: str
    lookup: Lookup
    query_type: QueryType
    jdbc: Jdbc
    key_mappings: Optional[List[FieldMapping]] = Field(None, max_length=1, min_length=1)
    field_mappings: Optional[List[FieldMapping]] = Field(
        None, max_length=2147483647, min_length=1
    )
    execution_options: Optional[ExecutionOptions] = None


class JdbcParallelSourceNode(Properties):
    jdbc_connection_uuid: UUID
    jdbc: Jdbc
    execution_options: Optional[ExecutionOptions] = None


class JdbcPostgresSourceNode(Properties):
    jdbc_connection_uuid: UUID
    jdbc: Jdbc
    execution_options: Optional[ExecutionOptions] = None


class JdbcSimple(BaseModel):
    connection: Optional[JdbcConnection] = None
    statement: Optional[JdbcStatement] = None


class JdbcSinkNode(Properties):
    jdbc_connection_uuid: UUID
    execution_options: Optional[ExecutionOptions] = None
    jdbc: Jdbc


class KafkaSinkNode(Properties):
    kafka_connection_uuid: UUID
    execution_options: Optional[ExecutionOptions] = None
    serde: Optional[SinkSerde] = None
    kafka: KafkaSinkKafkaNodeCfg
    security: Optional[SecurityCfg] = None


class KafkaSourceNode(Properties):
    kafka_connection_uuid: UUID
    schema_: str = Field(..., alias='schema')
    execution_options: Optional[ExecutionOptions] = None
    boundedness: Boundedness
    serde: Optional[SourceSerde] = None
    kafka: KafkaSourceKafkaNodeCfg
    security: Optional[SecurityCfg] = None


class CdcApplyNode(Properties):
    jdbc_connection_uuid: Optional[UUID] = None
    cdc: Optional[CdcSimple] = None
    execution_options: Optional[ExecutionOptions] = None
    jdbc: Optional[JdbcSimple] = None


class NodeUpdateDto(BaseModel):
    """
    Объект для обновления узла диаграммы
    """

    nodeTypeId: int = Field(
        ..., description='Уникальный идентификатор типа узла', examples=[10]
    )
    diagramVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    nodeName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя узла', examples=['Узел первичной фильтрации']
    )
    nodeDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None,
        description='Описание узла',
        examples=['Узел фильтрации данных по первичному признаку'],
    )
    properties: Optional[
        Union[
            AggregateCompute,
            AggregateReading,
            AggregationNode,
            Calculates,
            CdcApplyMultiTableNode,
            CdcApplyNode,
            CdcMongoDbNode,
            CdcMsSqlNode,
            CdcOracleMultiTableNode,
            CdcOracleNode,
            CdcPostgresMultiTableNode,
            CdcPostgresNode,
            Communication,
            CommunicationHub,
            CommunicationHubRead,
            CustomCode,
            DecisionTable,
            ExternalService,
            FileSinkNode,
            FilterNode,
            Finish,
            FlatMapNode,
            Fork,
            GroovyNode,
            GroupingNode,
            HBaseLookupNode,
            HBaseSinkNode,
            IcebergSinkNode,
            JdbcLookupNode,
            JdbcParallelSourceNode,
            JdbcPostgresSourceNode,
            JdbcRead,
            JdbcSinkNode,
            JdbcWrite,
            JoinFlow,
            JoinNode,
            KafkaSinkNode,
            KafkaSourceNode,
            MappingNode,
            Offer,
            OfferStorageRead,
            OfferStorageWrite,
            PolicyRead,
            PythonNode,
            RestSourceNode,
            Ruleset,
            Scorecard,
            Start,
            Subdiagram,
            TarantoolRead,
            TarantoolWrite,
            UnionNode,
        ]
    ] = None
    metaInfo: Optional[NodeMetaInfo] = None
    validFlag: bool = Field(..., description='Признак корректности узла', examples=[False])
    addedVariables: Optional[List[VariableViewDto]] = None


class NodeValidateDto(BaseModel):
    """
    Объект для валидации узла диаграммы
    """

    nodeTypeId: int = Field(
        ..., description='Уникальный идентификатор типа узла', examples=[10]
    )
    properties: Optional[
        Union[
            AggregateCompute,
            AggregateReading,
            AggregationNode,
            Calculates,
            CdcApplyMultiTableNode,
            CdcApplyNode,
            CdcMongoDbNode,
            CdcMsSqlNode,
            CdcOracleMultiTableNode,
            CdcOracleNode,
            CdcPostgresMultiTableNode,
            CdcPostgresNode,
            Communication,
            CommunicationHub,
            CommunicationHubRead,
            CustomCode,
            DecisionTable,
            ExternalService,
            FileSinkNode,
            FilterNode,
            Finish,
            FlatMapNode,
            Fork,
            GroovyNode,
            GroupingNode,
            HBaseLookupNode,
            HBaseSinkNode,
            IcebergSinkNode,
            JdbcLookupNode,
            JdbcParallelSourceNode,
            JdbcPostgresSourceNode,
            JdbcRead,
            JdbcSinkNode,
            JdbcWrite,
            JoinFlow,
            JoinNode,
            KafkaSinkNode,
            KafkaSourceNode,
            MappingNode,
            Offer,
            OfferStorageRead,
            OfferStorageWrite,
            PolicyRead,
            PythonNode,
            RestSourceNode,
            Ruleset,
            Scorecard,
            Start,
            Subdiagram,
            TarantoolRead,
            TarantoolWrite,
            UnionNode,
        ]
    ] = None
    addedVariables: Optional[List[VariableViewDto]] = None


class NodeRemapDto(BaseModel):
    """
    Объект для ремапинга свойств узла диаграммы
    """

    nodeTypeId: int = Field(
        ..., description='Уникальный идентификатор типа узла', examples=[10]
    )
    properties: Optional[
        Union[
            AggregateCompute,
            AggregateReading,
            AggregationNode,
            Calculates,
            CdcApplyMultiTableNode,
            CdcApplyNode,
            CdcMongoDbNode,
            CdcMsSqlNode,
            CdcOracleMultiTableNode,
            CdcOracleNode,
            CdcPostgresMultiTableNode,
            CdcPostgresNode,
            Communication,
            CommunicationHub,
            CommunicationHubRead,
            CustomCode,
            DecisionTable,
            ExternalService,
            FileSinkNode,
            FilterNode,
            Finish,
            FlatMapNode,
            Fork,
            GroovyNode,
            GroupingNode,
            HBaseLookupNode,
            HBaseSinkNode,
            IcebergSinkNode,
            JdbcLookupNode,
            JdbcParallelSourceNode,
            JdbcPostgresSourceNode,
            JdbcRead,
            JdbcSinkNode,
            JdbcWrite,
            JoinFlow,
            JoinNode,
            KafkaSinkNode,
            KafkaSourceNode,
            MappingNode,
            Offer,
            OfferStorageRead,
            OfferStorageWrite,
            PolicyRead,
            PythonNode,
            RestSourceNode,
            Ruleset,
            Scorecard,
            Start,
            Subdiagram,
            TarantoolRead,
            TarantoolWrite,
            UnionNode,
        ]
    ] = None
    objectId: UUID = Field(
        ...,
        description='Уникальный идентификатор объекта в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    objectVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии объекта в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class NodeAutoMappingDto(BaseModel):
    """
    Объект для ремапинга свойств узла диаграммы
    """

    forceAutoMappingVariableIds: Optional[List[str]] = None
    skipAutoMappingVariableIds: Optional[List[str]] = None
    collectionName: str = Field(
        ...,
        description='Наименовании коллекции маппинга на узле',
        examples=['inputVariablesMapping'],
    )
    properties: Optional[
        Union[
            AggregateCompute,
            AggregateReading,
            AggregationNode,
            Calculates,
            CdcApplyMultiTableNode,
            CdcApplyNode,
            CdcMongoDbNode,
            CdcMsSqlNode,
            CdcOracleMultiTableNode,
            CdcOracleNode,
            CdcPostgresMultiTableNode,
            CdcPostgresNode,
            Communication,
            CommunicationHub,
            CommunicationHubRead,
            CustomCode,
            DecisionTable,
            ExternalService,
            FileSinkNode,
            FilterNode,
            Finish,
            FlatMapNode,
            Fork,
            GroovyNode,
            GroupingNode,
            HBaseLookupNode,
            HBaseSinkNode,
            IcebergSinkNode,
            JdbcLookupNode,
            JdbcParallelSourceNode,
            JdbcPostgresSourceNode,
            JdbcRead,
            JdbcSinkNode,
            JdbcWrite,
            JoinFlow,
            JoinNode,
            KafkaSinkNode,
            KafkaSourceNode,
            MappingNode,
            Offer,
            OfferStorageRead,
            OfferStorageWrite,
            PolicyRead,
            PythonNode,
            RestSourceNode,
            Ruleset,
            Scorecard,
            Start,
            Subdiagram,
            TarantoolRead,
            TarantoolWrite,
            UnionNode,
        ]
    ] = None
    nodeTypeId: int = Field(
        ..., description='Уникальный идентификатор типа узла', examples=[10]
    )


class NodeCreateDto(BaseModel):
    """
    Объект для создания узла диаграммы
    """

    nodeTypeId: int = Field(
        ..., description='Уникальный идентификатор типа узла', examples=[10]
    )
    diagramVersionId: UUID = Field(
        ...,
        description='Уникальный идентификатор диаграммы в формате UUID 4',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )
    nodeName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя узла', examples=['Узел первичной фильтрации']
    )
    nodeDescription: Optional[Annotated[str, StringConstraints(min_length=0, max_length=1000)]] = Field(
        None,
        description='Описание узла',
        examples=['Узел фильтрации данных по первичному признаку'],
    )
    properties: Optional[
        Union[
            AggregateCompute,
            AggregateReading,
            AggregationNode,
            Calculates,
            CdcApplyMultiTableNode,
            CdcApplyNode,
            CdcMongoDbNode,
            CdcMsSqlNode,
            CdcOracleMultiTableNode,
            CdcOracleNode,
            CdcPostgresMultiTableNode,
            CdcPostgresNode,
            Communication,
            CommunicationHub,
            CommunicationHubRead,
            CustomCode,
            DecisionTable,
            ExternalService,
            FileSinkNode,
            FilterNode,
            Finish,
            FlatMapNode,
            Fork,
            GroovyNode,
            GroupingNode,
            HBaseLookupNode,
            HBaseSinkNode,
            IcebergSinkNode,
            JdbcLookupNode,
            JdbcParallelSourceNode,
            JdbcPostgresSourceNode,
            JdbcRead,
            JdbcSinkNode,
            JdbcWrite,
            JoinFlow,
            JoinNode,
            KafkaSinkNode,
            KafkaSourceNode,
            MappingNode,
            Offer,
            OfferStorageRead,
            OfferStorageWrite,
            PolicyRead,
            PythonNode,
            RestSourceNode,
            Ruleset,
            Scorecard,
            Start,
            Subdiagram,
            TarantoolRead,
            TarantoolWrite,
            UnionNode,
        ]
    ] = None
    metaInfo: Optional[NodeMetaInfo] = None
    nodeId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор узла',
        examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'],
    )


class AttributeTreeView(BaseModel):
    """
    Лист атрибутов входящий в состав комплексного типа
    """

    attributeId: UUID = Field(
        ...,
        description='Уникальный идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    attributeName: Annotated[str, StringConstraints(min_length=1, max_length=100)] = Field(
        ..., description='Имя атрибута', examples=['name']
    )
    complexFlag: bool = Field(
        ...,
        description='Флаг отображающий тип данных, к которым относится атрибут',
        examples=[True],
    )
    arrayFlag: bool = Field(
        ...,
        description='Флаг отображающий тип объекта данных, к которым относится атрибут',
        examples=[False],
    )
    primitiveTypeId: Optional[str] = Field(
        None,
        description='Уникальный идентификатор примитивного типа. Может принимать null значения',
        examples=['1'],
    )
    complexTypeVersionId: Optional[UUID] = Field(
        None,
        description='Уникальный идентификатор комплексного типа, на который ссылается атрибут в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    complexTypeVersion: Optional[ComplexTypeGetTreeView] = None


class ComplexTypeGetTreeView(BaseModel):
    typeId: UUID = Field(
        ...,
        description='Идентификатор в формате UUID 4',
        examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'],
    )
    versionId: UUID = Field(
        ...,
        description='Уникальный идентификатор версии в формате UUID 4',
        examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'],
    )
    objectName: Annotated[str, StringConstraints(min_length=0, max_length=100)] = Field(
        ..., description='Имя объекта', examples=['Объект №1']
    )
    attributes: Optional[List[AttributeTreeView]] = None

class BranchNode(Properties):
    branches: Optional[List[BranchNodeBranch]] = None
    defaultPath: Optional[DefaultBranch] = None
    branchingValueType: str
    condition: str
    branchingType: str


class BranchNodeBranch(BaseModel):
    linkId: str
    nodeId: str
    operator: str
    valueFrom: str
    valueFromIncludeFlag: Optional[bool] = None
    valueTo: str
    valueToIncludeFlag: Optional[bool] = None

ExternalServiceVariableFullViewDto.update_forward_refs()
ExternalServiceVariableViewWithoutIdDto.update_forward_refs()
BatchVariableGetDto.update_forward_refs()
DeployConfigurationFullDto.update_forward_refs()
AttributeTreeView.update_forward_refs()
