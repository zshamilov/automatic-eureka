
{
  "openapi": "3.0.1",
  "info": {
    "title": "Decision project",
    "description": "Для работы необходимо пробросить порт по ssh между 178.154.193.147:80",
    "termsOfService": "",
    "contact": {
      "email": "ivan.petrukhin@glowbyteconsulting.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://decision-prod.demo.datasapience.ru/api",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "oauth2": []
    }
  ],
  "tags": [
    {
      "name": "Deploy",
      "description": "API для работы с деплоем"
    },
    {
      "name": "Policy Api",
      "description": "API для взаимодействия с policy"
    },
    {
      "name": "Custom Attribute Dict",
      "description": "API для работы с справочниками кастомных аттрибутов"
    },
    {
      "name": "Schema",
      "description": "API для работы со схемами"
    },
    {
      "name": "Python Environment Api",
      "description": "API для взаимодействия с объектами типа окружение Python"
    },
    {
      "name": "User",
      "description": "API для работы с пользователями"
    },
    {
      "name": "User jar",
      "description": "API для работы с jar-файлами"
    },
    {
      "name": "Offer Storage Api",
      "description": "API для взаимодействия с Offer Storage"
    },
    {
      "name": "Complex Type API",
      "description": "Описание API обработки пользовательского типа и его атрибутов"
    },
    {
      "name": "Diagram helper API",
      "description": "API для методов, помогающих пользователю на этапе отрисовки диаграммы"
    },
    {
      "name": "Test Api"
    },
    {
      "name": "Catalog",
      "description": "API для работы с каталогами"
    },
    {
      "name": "Script Api",
      "description": "API для взаимодействия с объектами типа Groovy Скрипт"
    },
    {
      "name": "Test Api",
      "description": "API модуля тестирования"
    },
    {
      "name": "External service Api",
      "description": "API для взаимодействия с внешними сервисами"
    },
    {
      "name": "Environment Api",
      "description": "API для взаимодействия с сущностями сред развертывания"
    },
    {
      "name": "Rule types",
      "description": "API для работы с типами правил"
    },
    {
      "name": "Rest Source Api",
      "description": "API для взаимодействия с внешними REST сервисами"
    },
    {
      "name": "User Functions",
      "description": "API для работы с пользовательскими функциями"
    },
    {
      "name": "Python Version Api",
      "description": "API для взаимодействия с версиями Python"
    },
    {
      "name": "Object Relation",
      "description": "API для работы со связями объектов"
    },
    {
      "name": "Validate",
      "description": "API для валидации"
    },
    {
      "name": "Locking Api",
      "description": "API для управления состоянием блокировки объектов"
    },
    {
      "name": "Aggregate Api",
      "description": "API для взаимодействия с агрегетами"
    },
    {
      "name": "Node",
      "description": "API для работы с узлами"
    },
    {
      "name": "Offer Api",
      "description": "API для взаимодействия с шаблонами предложений"
    },
    {
      "name": "Diagram",
      "description": "API для работы с диграммами"
    },
    {
      "name": "Communication Api",
      "description": "API для взаимодействия с каналами коммуникации"
    },
    {
      "name": "Script Api",
      "description": "API для взаимодействия с объектами типа Скрипт"
    },
    {
      "name": "Migration",
      "description": "API для экспорта и импорта объектов"
    },
    {
      "name": "Data provider Api",
      "description": "API для взаимодействия с источниками данных"
    },
    {
      "name": "Kafka Api",
      "description": "API для взаимодействия с Kafka"
    },
    {
      "name": "Counter",
      "description": "API для работы со счетчиками"
    },
    {
      "name": "References",
      "description": "API для работы со справочниками"
    },
    {
      "name": "Streaming",
      "description": "API Streaming Platform"
    }
  ],
  "paths": {
    "/user-function/{functionId}": {
      "put": {
        "tags": [
          "User Functions"
        ],
        "description": "Обновление пользовательской функции",
        "operationId": "update",
        "parameters": [
          {
            "name": "functionId",
            "in": "path",
            "description": "UUID функции",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserFunctionUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Пользовательская функция не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное обновление пользовательской функции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/test/{testId}": {
      "get": {
        "tags": [
          "Test Api"
        ],
        "description": "Получение теста по уникальному идентификатору",
        "operationId": "get",
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string",
              "description": "test в формате UUID",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Тест с указанным ID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Получен тест",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestInfo"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка выгрузки данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Test Api"
        ],
        "description": "Обновление существующего тест-кейса",
        "operationId": "update_1",
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string",
              "description": "test в формате UUID",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Тест-кейс с указанным UUID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Внутренняя ошибка при попытке обновить тест-кейс",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка запроса при попытке обновить тест-кейс",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Тест-кейс обновлен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                },
                "example": {
                  "timeStamp": "13-08-2021 11:20:13",
                  "uuid": "ab70191a-a82c-4f51-a2a9-6a32230d059a",
                  "httpCode": 200,
                  "module": "test-diagram",
                  "operation": "update"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Test Api"
        ],
        "description": "Удаление теста по уникальному идентификатору",
        "operationId": "remove",
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string",
              "description": "test в формате UUID",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Ошибка в передаваемых данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Тест удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка при попытке удаления теста",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/services/{versionId}": {
      "get": {
        "tags": [
          "External service Api",
          "external-services"
        ],
        "description": "Получение внешнего сервиса по UUID",
        "operationId": "get_1",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Идентификатор версии сервиса",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Внешний сервис не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное получение внешнего сервиса по id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalServiceFullViewDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "External service Api",
          "external-services"
        ],
        "description": "Обновление внешнего сервиса, переменных и заголовков",
        "operationId": "update_2",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Идентификатор версии сервиса",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalServiceUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Сервис с указанным UUID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное обновление внешнего сервиса",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "External service Api",
          "external-services"
        ],
        "description": "Удаление внешнего сервиса по UUID",
        "operationId": "delete_1",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Идентификатор версии сервиса",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное удаление внешнего сервиса",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/services/{versionId}/updateUserVersion": {
      "put": {
        "tags": [
          "External service Api",
          "external-services"
        ],
        "description": "Обновление пользовательской версии внешнего сервиса, переменных и заголовков",
        "operationId": "updateUserVersion",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Идентификатор версии сервиса",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalServiceUpdateUserVersionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Сервис с указанным UUID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное обновление пользовательской версии внешнего сервиса",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/{versionId}/updateUserVersion": {
      "put": {
        "tags": [
          "Script Api"
        ],
        "description": "Обновление пользовательской версии скрипта",
        "operationId": "updateUserVersion_1",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Идентификатор версии скрипта",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptUpdateUserVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Скрипт с указанным UUID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Внутренняя ошибка при попытке скрипт",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка запроса при попытке обновить версию скрипта",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Пользовательская версия скрипта обновлен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                },
                "example": {
                  "timeStamp": "13-08-2021 11:20:13",
                  "uuid": "ab70191a-a82c-4f51-a2a9-6a32230d059a",
                  "httpCode": 200,
                  "module": "script",
                  "operation": "updateUserVersion"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/python": {
      "put": {
        "tags": [
          "Script Api"
        ],
        "description": "Обновление существующего скрипта",
        "operationId": "update_3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PythonUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Скрипт с указанным UUID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Внутренняя ошибка при попытке скрипт",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Скрипт обновлен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptFullView"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка запроса при попытке обновить скрипт",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Script Api"
        ],
        "description": "Сохранение нового скрипта",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PythonCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Ошибка в передаваемых данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                },
                "example": {
                  "timeStamp": "13-08-2021 11:22:37",
                  "httpCode": 400,
                  "module": "script",
                  "operation": "validate",
                  "message": "JSON validation e.."
                }
              }
            }
          },
          "201": {
            "description": "Скрипт создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptFullView"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка при попытке сохранения",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/groovy": {
      "put": {
        "tags": [
          "Script Api"
        ],
        "description": "Обновление существующего скрипта",
        "operationId": "update_4",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroovyUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Скрипт с указанным UUID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Внутренняя ошибка при попытке скрипт",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Скрипт обновлен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptFullView"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка запроса при попытке обновить скрипт",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Script Api"
        ],
        "description": "Сохранение нового скрипта",
        "operationId": "create_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroovyCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Ошибка в передаваемых данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                },
                "example": {
                  "timeStamp": "13-08-2021 11:22:37",
                  "httpCode": 400,
                  "module": "script",
                  "operation": "validate",
                  "message": "JSON validation e.."
                }
              }
            }
          },
          "201": {
            "description": "Скрипт создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptFullView"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка при попытке сохранения",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/script/python/environment/{versionId}": {
      "get": {
        "tags": [
          "Python Environment Api"
        ],
        "description": "Получение окружения питона по id",
        "operationId": "get_4",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID окружения питона",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Окружение питона не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное получение окружения питона по id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PythonEnvironmentGetFullViewDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторизации",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "put": {
        "tags": [
          "Python Environment Api"
        ],
        "description": "Обновление окружения питона по его UUID",
        "operationId": "update_5",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID окружения питона",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PythonEnvironmentUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное обновление окружения питона",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Python Environment Api"
        ],
        "description": "Удаление окружения питона по UUID",
        "operationId": "delete_2",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID окружения питона",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное удаление окружения питона",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/ruletype/{ruleTypeId}": {
      "get": {
        "tags": [
          "Rule types",
          "rule-types"
        ],
        "description": "Получение типа правила по уникальному идентификатору",
        "operationId": "getRuleTypeById",
        "parameters": [
          {
            "name": "ruleTypeId",
            "in": "path",
            "description": "Уникальный идентификатор типа правила",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Тип правила не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка, возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение типа правила по id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleTypeGetFullView"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rule types",
          "rule-types"
        ],
        "description": "Обновление типа правила",
        "operationId": "updateRuleTypeById",
        "parameters": [
          {
            "name": "ruleTypeId",
            "in": "path",
            "description": "Уникальный идентификатор типа правила",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuleTypeUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Тип правила не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка, возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное обновление типа правила",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Rule types",
          "rule-types"
        ],
        "description": "Удаление типа правила по уникальному идентификатору",
        "operationId": "deleteRuleTypeById",
        "parameters": [
          {
            "name": "ruleTypeId",
            "in": "path",
            "description": "Уникальный идентификатор типа правила",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка, возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное удаление типа правила по id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest_sources/{id}": {
      "get": {
        "tags": [
          "Rest Source Api",
          "rest-sources"
        ],
        "description": "Получение REST источника по UUID",
        "operationId": "get_5",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Идентификатор REST источника",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. REST источник не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное получение REST источника по id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestSourceFullViewDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rest Source Api",
          "rest-sources"
        ],
        "description": "Обновление REST источника",
        "operationId": "update_6",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Идентификатор REST источника",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestSourceUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "REST источник с указанным UUID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное обновление REST источника",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Rest Source Api",
          "rest-sources"
        ],
        "description": "Удаление REST источника по UUID",
        "operationId": "delete_3",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Идентификатор REST источника",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное удаление REST источника",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/offer/{versionId}": {
      "get": {
        "tags": [
          "offer",
          "Offer Api"
        ],
        "description": "Получение шаблона предложения по UUID версии",
        "operationId": "get_6",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Идентификатор версии шаблона предложения",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Версия шаблона предложения с указанным UUID не найдена",
            "content": {
              "application/json": {}
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное получение шаблона предложения по id версии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferFullViewDto"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "offer",
          "Offer Api"
        ],
        "description": "Обновление шаблона предложения и переменных",
        "operationId": "update_7",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Уникальный идентификатор версии шаблона предложения",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Версия шаблона предложения с указанным UUID не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное обновление шаблона предложения и переменных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "offer",
          "Offer Api"
        ],
        "description": "Удаление шаблона предложения и переменных по UUID",
        "operationId": "delete_4",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Уникальный идентификатор версии шаблона предложения",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Версия шаблона предложения с указанным UUID не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное удаление шаблона предложения и переменных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/offer/{versionId}/updateUserVersion": {
      "put": {
        "tags": [
          "offer",
          "Offer Api"
        ],
        "description": "Обновление пользовательской версии шаблона предложения и переменных",
        "operationId": "updateUserVersion_2",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Уникальный идентификатор версии шаблона предложения",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferUpdateUserVersionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Версия шаблона предложения с указанным UUID не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное обновление пользовательской версии шаблона предложения и переменных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/kafka/{kafkaId}": {
      "get": {
        "tags": [
          "kafka",
          "Kafka Api"
        ],
        "description": "Получение брокера сообщений по id",
        "operationId": "get_7",
        "parameters": [
          {
            "name": "kafkaId",
            "in": "path",
            "description": "UUID брокера сообщений",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Брокер сообщений не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение брокера сообщений по id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KafkaGetFullViewDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "kafka",
          "Kafka Api"
        ],
        "description": "Обновление брокера сообщений по его UUID",
        "operationId": "update_8",
        "parameters": [
          {
            "name": "kafkaId",
            "in": "path",
            "description": "UUID брокера сообщений",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KafkaUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное обновление брокера сообщений",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "kafka",
          "Kafka Api"
        ],
        "description": "Удаление брокера сообщений по UUID",
        "operationId": "delete_6",
        "parameters": [
          {
            "name": "kafkaId",
            "in": "path",
            "description": "UUID брокера сообщений",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное удаление брокера сообщений",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/environments/{environmentId}": {
      "get": {
        "tags": [
          "environments",
          "Environment Api"
        ],
        "description": "Получение среды развертывания по id",
        "operationId": "get_8",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "UUID среды развертывания",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Среда развертывания не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное получение среды развертывания по id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentFullViewDto"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "environments",
          "Environment Api"
        ],
        "description": "Обновление полей среды развертывания по его UUID",
        "operationId": "update_9",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "UUID среды развертывания",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Среда развертывания не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Ошибочный запрос",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное обновление среды развертвания",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "environments",
          "Environment Api"
        ],
        "description": "Удаление среды развертывания по UUID",
        "operationId": "delete_7",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "UUID среды развертывания",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Среда развертывания не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное удаление среды развертывания",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Ошибочный запрос",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/{versionId}": {
      "get": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Получение диаграммы по ее UUID. При отсутствии режима будет применен READ mode",
        "operationId": "get_9",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "Режим открытия",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "READ",
                "WRITE"
              ]
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает диаграмму по ее уникальному идентификатору в формате UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramViewDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Обновление полей диаграммы по UUID",
        "operationId": "update_10",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiagramUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии диаграммы с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает структуры ответа с успехом операции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибочной валидации, либо ошибки при попытке обновить объект в БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Удаление диаграммы по UUID",
        "operationId": "remove_2",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии диаграммы с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Применяется в случае ошибки при попытке удаления объекта",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает структуры ответа с успехом операции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/{versionId}/updateUserVersion": {
      "put": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Обновление пользовательской версии диаграммы по UUID",
        "operationId": "updateUserVersion_3",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiagramUpdateUserVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии диаграммы с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает структуры ответа с успехом операции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Применяется в случае ошибочной валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/{versionId}/parameters": {
      "get": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Получение переменных диаграммы по ее UUID",
        "operationId": "getParameters",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки сохранения, обновления, валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает переменные диаграммы по ее уникальному идентификатору в формате UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramParameterDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "parameters",
          "Diagram"
        ],
        "description": "Обновление списка параметров диаграммы по UUID версии. Применяется для обновления списка переменных temp-версии диаграммы.",
        "operationId": "updateParameters",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string",
              "description": "UUID temp-версии диаграммы"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "principal": {
                    "$ref": "#/components/schemas/Jwt"
                  },
                  "body": {
                    "$ref": "#/components/schemas/DiagramParameterDto"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Диаграмма для обновления не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное обновление и добавление параметров диаграммы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/{diagramId}/{deployType}/submit": {
      "put": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Отметка диаграммы готовой для деплоя",
        "operationId": "generateJobs",
        "parameters": [
          {
            "name": "diagramId",
            "in": "path",
            "description": "UUID диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          },
          {
            "name": "deployType",
            "in": "path",
            "description": "Тип дальнейшего деплоя",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "REALTIME",
                "MANUAL_BATCH",
                "AUTO_BATCH"
              ]
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутствии диаграммы с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Ошибка validate/deploy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка возникшая на стороне сервера",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Диаграмма успешно отмечена для развертывания. Ошибки отсутствуют",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Ошибка бизнес валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramValidateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/{diagramId}/rename": {
      "put": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Обновление имени диаграммы по UUID",
        "operationId": "rename",
        "parameters": [
          {
            "name": "diagramId",
            "in": "path",
            "description": "UUID диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiagramRename"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии диаграммы с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает структуры ответа с успехом операции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибочной валидации diagramName",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/nodes/{nodeId}": {
      "get": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Получение узла диаграммы по UUID",
        "operationId": "getNodeById",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "Уникальный идентификатор узла диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Узел диаграммы не найден",
            "content": {
              "application/json": {}
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Возникла ошибка при получении объекта из базы данных",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное получение узла диаграммы по id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeViewWithVariablesDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "put": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Обновление узла диаграммы",
        "operationId": "updateNodeById",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "Уникальный идентификатор узла диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Узел диаграммы не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное обновление узла диаграммы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeValidateStateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Удаление узла диаграммы по UUID",
        "operationId": "deleteNodeById",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "Уникальный идентификатор узла диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное удаление узла диаграммы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/diagrams/nodes/{nodeId}/validate": {
      "put": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Валидация узла диаграммы",
        "operationId": "validateNodeById",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "Уникальный идентификатор узла диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeValidateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Узел диаграммы не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное валидация узла диаграммы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/diagrams/nodes/{nodeId}/remap": {
      "put": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Ремапинг свойств узла диаграммы",
        "operationId": "remapNodeById",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "Уникальный идентификатор узла диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeRemapDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Узел диаграммы не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешный реманинг свойств узла диаграммы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Properties"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/nodes/{nodeId}/metainfo": {
      "put": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Обновление метаинформации узла диаграммы",
        "operationId": "updateNodeMetaInfoByNodeId",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "Уникальный идентификатор узла диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeMetaInfo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Узел диаграммы не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное обновление метаинформации узла диаграммы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/diagrams/nodes/{nodeId}/byNode": {
      "put": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Обновление узла диаграммы",
        "operationId": "updateNodeByIdWithDiagramChange",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "Уникальный идентификатор узла диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Узел диаграммы не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное обновление узла диаграммы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeUpdateLeadToDiagramChangeResultDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/nodes/{nodeId}/autoMap": {
      "put": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Обновление узла диаграммы",
        "operationId": "autoMapNodeById",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "Уникальный идентификатор узла диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeAutoMappingDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Узел диаграммы не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "Запрос успешно обработан. Список возможных переменных к автомаппингу пуст",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешный автомаппинг узла диаграммы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Properties"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Ошибка, возникающий при конфликте автомаппинга",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeAutoMappingResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/diagrams/links/move": {
      "put": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Изменение таргета ребра диаграммы",
        "operationId": "moveLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkMoveDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          },
          "201": {
            "description": "Успешное создание ребра диаграммы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagram/batch/updateSql": {
      "put": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Обновление sql запроса батча",
        "operationId": "saveBatchSql",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchSqlGetDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное обновление",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagram/batch/updateMapping": {
      "put": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Обновление мапинга батча ",
        "operationId": "updateBatchMapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Список маппинга переменных",
                "items": {
                  "$ref": "#/components/schemas/BatchMappingGetDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное обновление",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagram/batch/updateMappingKey": {
      "put": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Обновление мапинга ключей батча ",
        "operationId": "saveBatchMappingKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Список маппинга ключей",
                "items": {
                  "$ref": "#/components/schemas/BatchMappingKeyUpdateDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное обновление",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/dataprovider/{sourceId}": {
      "get": {
        "tags": [
          "Data provider Api",
          "dataprovider"
        ],
        "description": "Получение источника данных по id",
        "operationId": "get_10",
        "parameters": [
          {
            "name": "sourceId",
            "in": "path",
            "description": "UUID источника данных",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Источник данных не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение источника данных по id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProviderGetFullView"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Data provider Api",
          "dataprovider"
        ],
        "description": "Обновление полей источника данных по его UUID",
        "operationId": "update_11",
        "parameters": [
          {
            "name": "sourceId",
            "in": "path",
            "description": "UUID источника данных",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProviderUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное обновление источника данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Data provider Api",
          "dataprovider"
        ],
        "description": "Удаление источника данных по UUID",
        "operationId": "delete_8",
        "parameters": [
          {
            "name": "sourceId",
            "in": "path",
            "description": "UUID источника данных",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное удаление источника данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/custom-attribute-dict/{dictId}": {
      "get": {
        "tags": [
          "Custom Attribute Dict"
        ],
        "description": "Получение настроек справочника по UUID",
        "operationId": "get_11",
        "parameters": [
          {
            "name": "dictId",
            "in": "path",
            "description": "Уникальный идентификатор справочника",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает справочник по его уникальному идентификатору в формате UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeDictionaryFullView"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Custom Attribute Dict"
        ],
        "description": "Обновление справочника кастомных атрибутов и его значений",
        "operationId": "update_12",
        "parameters": [
          {
            "name": "dictId",
            "in": "path",
            "description": "Уникальный идентификатор справочника",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomAttributeDictionaryUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Сервис с указанным UUID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное обновление справочника",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Custom Attribute Dict"
        ],
        "description": "Удаление справочника по уникальному идентификатору",
        "operationId": "delete_9",
        "parameters": [
          {
            "name": "dictId",
            "in": "path",
            "description": "Уникальный идентификатор справочника",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Справочник удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/complextype/{versionId}": {
      "get": {
        "tags": [
          "Complex Type",
          "Complex Type API"
        ],
        "description": "Получение комплексного типа по UUID",
        "operationId": "get_12",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии сложного типа",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос содержит неверные или несуществующие параметры в пути",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешная операция",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplexTypeGetFullView"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Complex Type",
          "Complex Type API"
        ],
        "description": "Обновление полей сложного типа по его UUID",
        "operationId": "update_13",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии сложного типа",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplexTypeUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное обновление сложного типа",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Complex Type",
          "Complex Type API"
        ],
        "description": "Удаление сложного типа по UUID",
        "operationId": "delete_10",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии сложного типа",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное удаление сложного типа",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/complextype/{versionId}/attributes": {
      "get": {
        "tags": [
          "Attribute",
          "Complex Type API"
        ],
        "description": "Получение списка атрибутов, принадлежащих комплексному типу",
        "operationId": "getAllAttributes",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии сложного типа",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос содержит неверные или несуществующие параметры в пути",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "Список атрибутов пустой"
          },
          "200": {
            "description": "Успешная операция",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeGetFullView"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Attribute",
          "Complex Type API"
        ],
        "description": "Обновление атрибута",
        "operationId": "updateAttribute",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии сложного типа",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос содержит неверные или несуществующие параметры в пути",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешная операция",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка при обработке запроса на стороне СУБД. Тело запроса содержит невалидные атрибуты",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Attribute",
          "Complex Type API"
        ],
        "description": "Добавление атрибута к комплексному типу",
        "operationId": "createAttribute",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии сложного типа",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос содержит неверные или несуществующие параметры в пути",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "201": {
            "description": "Успешная операция",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка при обработке запроса на стороне СУБД. Тело запроса содержит невалидные атрибуты",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/communication/{versionId}": {
      "get": {
        "tags": [
          "Communication Api",
          "communication"
        ],
        "description": "Получение канала коммуникации по UUID",
        "operationId": "get_13",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Идентификатор канала коммуникации",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Версия канала коммуникации с указанным UUID не найдена",
            "content": {
              "application/json": {}
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное получение канала коммуникации по id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationChannelFullViewDto"
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Communication Api",
          "communication"
        ],
        "description": "Обновление канала коммуникации и переменных",
        "operationId": "update_14",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Уникальный идентификатор канала коммуникации",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunicationChannelUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Версия канала коммуникации с указанным UUID не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное обновление канала коммуникации и переменных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Communication Api",
          "communication"
        ],
        "description": "Удаление канала коммуникации и переменных по UUID",
        "operationId": "delete_11",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Уникальный идентификатор канала коммуникации",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Версия канала коммуникации с указанным UUID не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное удаление канала коммуникации и переменных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/communication/{versionId}/updateUserVersion": {
      "put": {
        "tags": [
          "Communication Api",
          "communication"
        ],
        "description": "Обновление пользовательской версии канала коммуникации и переменных",
        "operationId": "updateUserVersion_4",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Уникальный идентификатор канала коммуникации",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunicationChannelUpdateUserVersionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Версия канала коммуникации с указанным UUID не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное обновление пользовательской версии канала коммуникации и переменных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog": {
      "get": {
        "tags": [
          "catalog",
          "Catalog"
        ],
        "description": "Получение списка каталогов",
        "operationId": "getAllCatalog_8",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJInNlYXJjaEJ5IjogItCY0LzRjyIsCgkicGFnZSI6IDEsCgkic2l6ZSI6IDEwCn0="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает список каталогов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogPage"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки сохранения, обновления, валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "put": {
        "tags": [
          "catalog",
          "Catalog"
        ],
        "description": "Обновление каталога",
        "operationId": "update_15",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Каталог не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное перемещение элемента в каталог",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "catalog",
          "Catalog"
        ],
        "description": "Создание каталога",
        "operationId": "create_3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии корневого каталога",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "201": {
            "description": "Успешное создание каталога",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка, возникающая при сохранении",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/catalog/move": {
      "put": {
        "tags": [
          "catalog",
          "Catalog"
        ],
        "description": "Перемещние элемента в каталог",
        "operationId": "moveElementToCatalog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogMove"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Не найдена связь элемента с каталогом, или каталог",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное перемещение элемента в каталог",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/aggregates/{aggregateId}": {
      "get": {
        "tags": [
          "Aggregate Api"
        ],
        "description": "Получение агрегата по уникальному идентификатору",
        "operationId": "get_14",
        "parameters": [
          {
            "name": "aggregateId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "type": "string",
              "description": "aggregateId в формате uuid",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Агрегат с указанным ID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка при попытке получения агрегата",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Получен агрегат",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregateGetFullView"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Aggregate Api"
        ],
        "description": "Обновление существующего агрегата",
        "operationId": "update_16",
        "parameters": [
          {
            "name": "aggregateId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "type": "string",
              "description": "aggregateId в формате uuid",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregateUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Агрегат с указанным UUID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Агрегат обновлен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                },
                "example": {
                  "timeStamp": "13-08-2021 11:20:13",
                  "uuid": "ab70191a-a82c-4f51-a2a9-6a32230d059a",
                  "httpCode": 200,
                  "module": "aggregate",
                  "operation": "update"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка запроса при попытке обновить агрегат",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка при попытке обновления агрегата",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Aggregate Api"
        ],
        "description": "Удаление агрегата по уникальному идентификатору",
        "operationId": "remove_3",
        "parameters": [
          {
            "name": "aggregateId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "type": "string",
              "description": "aggregateId в формате uuid",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Агрегат с указанным UUID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка при попытке удаления агрегата",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Агрегат удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/validate/sql": {
      "post": {
        "tags": [
          "Validate",
          "validate"
        ],
        "description": "Валидация sql-выражения",
        "operationId": "validateSql",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SqlValidationApiDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Возвращает структуры ответа с успехом операции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "422": {
            "description": "Применяется в случае ошибки валидации. Тело ответа хранит объект NodeValidationPayload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/validate/calculate/json": {
      "post": {
        "tags": [
          "Validate",
          "validate"
        ],
        "description": "Генерация json для проверки редактора выражений",
        "operationId": "generateJson",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressionEditorJsonGenerationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Возвращает сгенерированный json со значениями по-умолчанию",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressionEditorJsonGenerationResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Применяется в случае ошибки валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/validate/calculate/expression": {
      "post": {
        "tags": [
          "Validate",
          "validate"
        ],
        "description": "Валидация выражения",
        "operationId": "validateExpression",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpressionEditorValidationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Возвращает структуры ответа с успехом операции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressionEditorValidationResultDto"
                }
              }
            }
          },
          "422": {
            "description": "Применяется в случае ошибки валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressionEditorValidationResultDto"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/user-jar": {
      "get": {
        "tags": [
          "User jar"
        ],
        "description": "Получение списка всех jar-файлов",
        "operationId": "getAll",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Jar-файлы не найдены"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserJarFullViewDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User jar"
        ],
        "description": "Загрузка jar-файла, содержащего ползовательские функции",
        "operationId": "uploadJarFile",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "jarFile"
                ],
                "type": "object",
                "properties": {
                  "jarFile": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка при извлечении функций из jar-файла",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Успешная загрузка файла",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserJarFunctionsDto"
                }
              }
            }
          }
        }
      }
    },
    "/user-function/{jarId}": {
      "get": {
        "tags": [
          "User Functions"
        ],
        "description": "Получение списка функций по jar id",
        "operationId": "getFunctionsByJarId",
        "parameters": [
          {
            "name": "jarId",
            "in": "path",
            "description": "Уникальный идентификатор jar-файла",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Jar-файл не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Список функций успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserFunctionShortWithIsUploadedView"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Functions"
        ],
        "description": "Загрузка пользовательских функций в систему",
        "operationId": "uploadUserFunctions",
        "parameters": [
          {
            "name": "catalogId",
            "in": "query",
            "description": "UUID каталога",
            "required": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          },
          {
            "name": "jarId",
            "in": "path",
            "description": "UUID jar-файла, которому принадлежат функции",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserFunctionUploadView"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Jar-файл не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Успешная загрузка пользовательских функций",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/test/upload/file/{uuidTest}": {
      "post": {
        "tags": [
          "Test Api"
        ],
        "description": "Загрузка файла с клиентской стороны",
        "operationId": "uploadTestFile",
        "parameters": [
          {
            "name": "uuidTest",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Ошибка при загрузке/обработке файла."
          },
          "204": {
            "description": "No Content"
          },
          "201": {
            "description": "Успешная загрузка файла",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/test/start/{versionId}": {
      "post": {
        "tags": [
          "Test Api"
        ],
        "description": "Запуск тестирования",
        "operationId": "start",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Ошибка обозначающая, что диаграмма не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "timeStamp": "13-08-2021 11:20:13",
                    "uuid": "ab70191a-a82c-4f51-a2a9-6a32230d059a",
                    "httpCode": 404,
                    "module": "test-diagram",
                    "operation": "create_excel"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "201": {
            "description": "Ответ с информацией о том, какие тесты запущены, а какие нет и почему",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartTestsDto"
                }
              }
            }
          }
        }
      }
    },
    "/test/next": {
      "post": {
        "tags": [
          "Test Api"
        ],
        "description": "Создание следующего по порядку теста",
        "operationId": "getNextTest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmptyTestCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "201": {
            "description": "Тест успешно создан с автосгенерированным именем",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyTestDto"
                }
              }
            }
          }
        }
      }
    },
    "/services": {
      "get": {
        "tags": [
          "External service Api",
          "external-services"
        ],
        "description": "Получение списка внешних сервисов",
        "operationId": "getAll_3",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJjaGFuZ2VEdCIsCgkJCSJvcGVyYXRvciI6ICJCRVRXRUVOIiwKCQkJInZhbHVlIjogIjI2LTA5LTIwMjIgMTE6MTI6MjYiLAoJCQkidmFsdWVUbyI6ICIyNy0wOS0yMDIyIDExOjEyOjI2IgoJCX0KCV0sCgkic29ydHMiOiBbCgkJewoJCQkiZGlyZWN0aW9uIjogIkFTQyIsCgkJCSJjb2x1bW5OYW1lIjogImNoYW5nZUR0IgoJCX0KCV0sCgkic2VhcmNoQnkiOiAi0KHRgtGA0L7QutCwINC/0L7QuNGB0LrQsCIsCgkicGFnZSI6IDEsCgkic2l6ZSI6IDEwCn0="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение полного списка внешних сервисов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalServicePage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "External service Api",
          "external-services"
        ],
        "description": "Создание внешнего сервиса, переменных и заголовков",
        "operationId": "add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalServiceCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Успешное создание внешнего сервиса",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/services/{serviceId}/create/userVersion": {
      "post": {
        "tags": [
          "External service Api",
          "external-services"
        ],
        "description": "Создание пользовательской версии внешнего сервиса, переменных и заголовков",
        "operationId": "addUserVersion",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Идентификатор сервиса",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalServiceCreateUserVersionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Успешное создание пользовательской версии внешнего сервиса",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/python/validate": {
      "post": {
        "tags": [
          "Script Api"
        ],
        "description": "Валидация скрипта",
        "operationId": "validate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PythonValidate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Ошибка технической валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Сприпт успешно провалидирован. Ошибки отсутсвуют",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Ошибка бизнес валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/python/create/userVersion": {
      "post": {
        "tags": [
          "Script Api"
        ],
        "description": "Сохранение пользовательской версии скрипта",
        "operationId": "createUserVersion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PythonCreateUserVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Ошибка в передаваемых данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                },
                "example": {
                  "timeStamp": "13-08-2021 11:22:37",
                  "httpCode": 400,
                  "module": "script",
                  "operation": "validate",
                  "message": "JSON validation e.."
                }
              }
            }
          },
          "201": {
            "description": "Пользовательская версия скрипта создана",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                },
                "example": {
                  "timeStamp": "13-08-2021 11:20:13",
                  "uuid": "ab70191a-a82c-4f51-a2a9-6a32230d059a",
                  "httpCode": 201,
                  "module": "script",
                  "operation": "save"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка при попытке сохранения",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/groovy/validate": {
      "post": {
        "tags": [
          "Script Api"
        ],
        "description": "Валидация скрипта",
        "operationId": "validate_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroovyValidate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Ошибка технической валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Сприпт успешно провалидирован. Ошибки отсутсвуют",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Ошибка бизнес валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/groovy/create/userVersion": {
      "post": {
        "tags": [
          "Script Api"
        ],
        "description": "Сохранение пользовательской версии скрипта",
        "operationId": "createUserVersion_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroovyCreateUserVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Ошибка в передаваемых данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                },
                "example": {
                  "timeStamp": "13-08-2021 11:22:37",
                  "httpCode": 400,
                  "module": "script",
                  "operation": "validate",
                  "message": "JSON validation e.."
                }
              }
            }
          },
          "201": {
            "description": "Пользовательская версия скрипта создана",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                },
                "example": {
                  "timeStamp": "13-08-2021 11:20:13",
                  "uuid": "ab70191a-a82c-4f51-a2a9-6a32230d059a",
                  "httpCode": 201,
                  "module": "script",
                  "operation": "save"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка при попытке сохранения",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/script/python/version": {
      "get": {
        "tags": [
          "Python Version Api"
        ],
        "description": "Получение всех версий Python",
        "operationId": "getAllPythonVersions",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное получение всех версий Python",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PythonVersionFullViewDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "Python Version Api"
        ],
        "description": "Создание или изменение набора версий Python",
        "operationId": "updatePythonVersions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PythonVersionFullViewDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "201": {
            "description": "Успешное создание/изменение набора версий Python",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/script/python/environment": {
      "get": {
        "tags": [
          "Python Environment Api"
        ],
        "description": "Получение списка всех доступных окружений python",
        "operationId": "getAll_5",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров поиска и фильтрации",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJzY3JpcHRUeXBlIiwKCQkJIm9wZXJhdG9yIjogIkVRVUFMIiwKCQkJInZhbHVlIjogIkdST09WWSIKCQl9CgldLAoJInNvcnRzIjogWwoJCXsKCQkJImRpcmVjdGlvbiI6ICJBU0MiLAoJCQkiY29sdW1uTmFtZSI6ICJjaGFuZ2VEdCIKCQl9CgldLAoJInNlYXJjaEJ5IjogItCh0YLRgNC+0LrQsCDQv9C+0LjRgdC60LAiLAoJInBhZ2UiOiAxLAoJInNpemUiOiAxMAp9"
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Скрипты не найдены"
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PythonEnvironmentPage"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторизации",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "Python Environment Api"
        ],
        "description": "Создание окружения питона",
        "operationId": "add_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PythonEnvironmentCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Успешное создание окружения питона",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторизации",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/script/python/environment/requirementsTxt": {
      "post": {
        "tags": [
          "Python Environment Api"
        ],
        "description": "Загрузка и возврат в виде строки requirements.txt",
        "operationId": "uploadRequirementsTxt",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "requirementsTxt"
                ],
                "type": "object",
                "properties": {
                  "requirementsTxt": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Ошибка при извлечении информации из файла",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Успешная загрузка файла",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторизации",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/ruletype": {
      "get": {
        "tags": [
          "Rule types",
          "rule-types"
        ],
        "description": "Получение списка типов правил",
        "operationId": "getAllRuleType",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка, возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение полного списка типов правил",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RuleTypeGetFullView"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rule types",
          "rule-types"
        ],
        "description": "Создание типа правила",
        "operationId": "addRuleType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuleTypeCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка, возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Успешное создание типа правила",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest_sources": {
      "get": {
        "tags": [
          "Rest Source Api",
          "rest-sources"
        ],
        "description": "Получение списка REST источников",
        "operationId": "getAll_6",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJjaGFuZ2VEdCIsCgkJCSJvcGVyYXRvciI6ICJCRVRXRUVOIiwKCQkJInZhbHVlIjogIjI2LTA5LTIwMjIgMTE6MTI6MjYiLAoJCQkidmFsdWVUbyI6ICIyNy0wOS0yMDIyIDExOjEyOjI2IgoJCX0KCV0sCgkic29ydHMiOiBbCgkJewoJCQkiZGlyZWN0aW9uIjogIkFTQyIsCgkJCSJjb2x1bW5OYW1lIjogImNoYW5nZUR0IgoJCX0KCV0sCgkic2VhcmNoQnkiOiAi0KHRgtGA0L7QutCwINC/0L7QuNGB0LrQsCIsCgkicGFnZSI6IDEsCgkic2l6ZSI6IDEwCn0="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение полного списка REST источников",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestSourcePage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rest Source Api",
          "rest-sources"
        ],
        "description": "Создание REST источника",
        "operationId": "add_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestSourceCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Успешное создание REST источника",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/offer": {
      "get": {
        "tags": [
          "offer",
          "Offer Api"
        ],
        "description": "Получение списка шаблонов предложений в режиме списка",
        "operationId": "getAll_7",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJvZmZlck5hbWUiLAoJCQkib3BlcmF0b3IiOiAiRVFVQUwiLAoJCQkidmFsdWUiOiAidGVzdCIKCQl9CgldLAoJInNvcnRzIjogWwoJCXsKCQkJImRpcmVjdGlvbiI6ICJBU0MiLAoJCQkiY29sdW1uTmFtZSI6ICJvZmZlck5hbWUiCgkJfQoJXSwKCSJzZWFyY2hCeSI6ICLQmNC80Y8iLAoJInBhZ2UiOiAxLAoJInNpemUiOiAxMAp9"
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное получение полного списка шаблонов предложений",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfferPage"
                  }
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "offer",
          "Offer Api"
        ],
        "description": "Создание нового шаблона предложения и переменных",
        "operationId": "add_3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          },
          "201": {
            "description": "Успешное создание шаблона предложения и переменных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/offer/{offerId}/create/userVersion": {
      "post": {
        "tags": [
          "offer",
          "Offer Api"
        ],
        "description": "Создание пользовательской версии шаблона предложения и переменных",
        "operationId": "addUserVersion_1",
        "parameters": [
          {
            "name": "offerId",
            "in": "path",
            "description": "Идентификатор версии шаблона предложения",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferCreateUserVersionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "201": {
            "description": "Успешное создание пользовательской версии шаблона предложения и переменных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/migration/uploadImportFile": {
      "post": {
        "tags": [
          "Migration",
          "migration"
        ],
        "description": "Загрузка на сервер файла для импорта и формирование списка импортируемых объектов",
        "operationId": "uploadImportFileAndGenerateImportObjects",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Файл успешно загружен на сервер",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmImportResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/migration/import": {
      "post": {
        "tags": [
          "Migration",
          "migration"
        ],
        "description": "Импорт объектов",
        "operationId": "importObjects",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelectedImportDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Импорт успешно выполнен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/migration/generateExportObjects": {
      "post": {
        "tags": [
          "Migration",
          "migration"
        ],
        "description": "Формирование списка экспортируемых объектов",
        "operationId": "generateExportObjects",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateConfirmExportDtoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Запрос успешно обработан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfirmExportDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/migration/export": {
      "post": {
        "tags": [
          "Migration",
          "migration"
        ],
        "description": "Создание и сохранение на сервере файла с экспортом, получение статусов экспорта",
        "operationId": "export",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportStatusDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Запрос успешно обработан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExportResponseDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locking/{objectType}/{objectId}": {
      "post": {
        "tags": [
          "Locking Api",
          "locking"
        ],
        "description": "Блокировка объекта по типу и UUID",
        "operationId": "add_4",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "description": "Тип объекта",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DEPLOY",
                "DIAGRAM",
                "AGGREGATE",
                "CUSTOM_CODE",
                "COMPLEX_TYPE",
                "SERVICE",
                "REST_SOURCE",
                "DATA_PROVIDER",
                "CUSTOM_ATTRIBUTE_DICTIONARY",
                "COMMUNICATION_CHANNEL",
                "OFFER",
                "USER_FUNCTION",
                "DATA_PROVIDER_RELATION",
                "CATALOG",
                "KAFKA",
                "PYTHON_ENVIRONMENT",
                "PYTHON_ENVIRONMENT_RELATION",
                "DIAGRAM_RELATION",
                "CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS",
                "OFFER_RELATION",
                "SERVICE_RELATION",
                "REST_SOURCE_RELATION",
                "CUSTOM_CODE_RELATION",
                "COMMUNICATION_RELATION",
                "AGGREGATE_RELATION",
                "MESSAGE_BROKER",
                "LOCKING"
              ]
            }
          },
          {
            "name": "objectId",
            "in": "path",
            "description": "Уникальный идентификатор объекта",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Объект уже заблокирован",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockingDtoShortView"
                }
              }
            }
          },
          "200": {
            "description": "Успешная блокировка объекта",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Locking Api",
          "locking"
        ],
        "description": "Снятие блокировки с объекта по его типу и UUID",
        "operationId": "deleteByObjectTypeAndObjectId",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "description": "Тип объекта",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DEPLOY",
                "DIAGRAM",
                "AGGREGATE",
                "CUSTOM_CODE",
                "COMPLEX_TYPE",
                "SERVICE",
                "REST_SOURCE",
                "DATA_PROVIDER",
                "CUSTOM_ATTRIBUTE_DICTIONARY",
                "COMMUNICATION_CHANNEL",
                "OFFER",
                "USER_FUNCTION",
                "DATA_PROVIDER_RELATION",
                "CATALOG",
                "KAFKA",
                "PYTHON_ENVIRONMENT",
                "PYTHON_ENVIRONMENT_RELATION",
                "DIAGRAM_RELATION",
                "CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS",
                "OFFER_RELATION",
                "SERVICE_RELATION",
                "REST_SOURCE_RELATION",
                "CUSTOM_CODE_RELATION",
                "COMMUNICATION_RELATION",
                "AGGREGATE_RELATION",
                "MESSAGE_BROKER",
                "LOCKING"
              ]
            }
          },
          {
            "name": "objectId",
            "in": "path",
            "description": "Уникальный идентификатор объекта",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          },
          {
            "name": "unlockType",
            "in": "query",
            "description": "Тип снятия блокировки",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "SOFT",
                "HARD"
              ]
            }
          },
          {
            "name": "unlockDt",
            "in": "query",
            "description": "Время снятия блокировки",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии блокировки на объекте с таким типом и UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное снятие блокировки с объекта",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/locking/scheduled-unlocks": {
      "post": {
        "tags": [
          "Locking Api",
          "locking"
        ],
        "description": "Снятие блокировки с объекта по UUID блокировки",
        "operationId": "getScheduledUnlocks",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Уникальный идентификатор объекта",
                "items": {
                  "$ref": "#/components/schemas/LockedObjectEntity"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии блокировки с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное снятие блокировки с объекта",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/kafka": {
      "get": {
        "tags": [
          "kafka",
          "Kafka Api"
        ],
        "description": "Получение списка брокеров сообщений",
        "operationId": "getAll_9",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJjaGFuZ2VEdCIsCgkJCSJvcGVyYXRvciI6ICJCRVRXRUVOIiwKCQkJInZhbHVlIjogIjI2LTA5LTIwMjIgMTE6MTI6MjYiLAoJCQkidmFsdWVUbyI6ICIyNy0wOS0yMDIyIDExOjEyOjI2IgoJCX0KCV0sCgkic29ydHMiOiBbCgkJewoJCQkiZGlyZWN0aW9uIjogIkFTQyIsCgkJCSJjb2x1bW5OYW1lIjogImNoYW5nZUR0IgoJCX0KCV0sCgkic2VhcmNoQnkiOiAi0KHRgtGA0L7QutCwINC/0L7QuNGB0LrQsCIsCgkicGFnZSI6IDEsCgkic2l6ZSI6IDEwCn0="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение полного списка брокеров сообщений",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KafkaPage"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "kafka",
          "Kafka Api"
        ],
        "description": "Создание брокера сообщений",
        "operationId": "add_5",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KafkaCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Успешное создание брокера сообщений",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/environments": {
      "get": {
        "tags": [
          "environments",
          "Environment Api"
        ],
        "description": "Получение списка сред развертывания",
        "operationId": "getAll_10",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение полного списка сред развертывания",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentShortInfoDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "environments",
          "Environment Api"
        ],
        "description": "Создание среды развертывания",
        "operationId": "add_6",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Среда развертывания не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Ошибочный запрос",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Успешное создание среды развертывания",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams": {
      "get": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Получение списка диаграмм в режиме списка",
        "operationId": "getAll_11",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJkaWFncmFtTmFtZSIsCgkJCSJvcGVyYXRvciI6ICJFUVVBTCIsCgkJCSJ2YWx1ZSI6ICJ0ZXN0IgoJCX0KCV0sCgkic29ydHMiOiBbCgkJewoJCQkiZGlyZWN0aW9uIjogIkFTQyIsCgkJCSJjb2x1bW5OYW1lIjogImRpYWdyYW1OYW1lIgoJCX0KCV0sCgkic2VhcmNoQnkiOiAi0JjQvNGPIiwKCSJwYWdlIjogMSwKCSJzaXplIjogMTAKfQ=="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает список диаграмм",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramPage"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки сохранения, обновления, валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Создание диаграммы",
        "operationId": "create_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiagramCreateNewVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии диаграммы с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Применяется в случае ошибки при сохранении.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка возникшая при попытке доступа к БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Возвращает структуры ответа с успехом операции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/{versionId}/validate": {
      "post": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Валидация диаграммы",
        "operationId": "validate_2",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Версия диаграммы не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Диаграмма успешно прошла валидацию",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Диаграмма не прошла валидацию",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramValidateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/{versionId}/createTemplateFromLatest": {
      "post": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Создание TEMP версии диаграммы на основании LATEST версии",
        "operationId": "createTemplateFromLatest",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутствии диаграммы с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка, возникшая при попытке доступа к БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Возвращает сохраненную диаграмму со сгенерированным именем",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramViewDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/{environmentId}/deploy": {
      "post": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Отправка в движок СТ+ДИ",
        "operationId": "deploy",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "UUID среды развертывания",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Объект для задания параметров деплоя",
                "items": {
                  "$ref": "#/components/schemas/DeployConfigurationFullDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутствии деплоя с таким version UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "201": {
            "description": "Диаграмма успешно развернута. Ошибки отсутствуют",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка validate/deploy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Ошибка бизнес валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/{deployId}/undeploy": {
      "post": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Раздеплоивание диаграммы из движка СТ+ДИ",
        "operationId": "undeploy",
        "parameters": [
          {
            "name": "deployId",
            "in": "path",
            "description": "UUID деплоя",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутствии деплоя с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Диаграмма успешно Раздеплоена. Ошибки отсутсвуют",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка возникшая на стороне сервера",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/validateVariable": {
      "post": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Валидация переменной диаграммы",
        "operationId": "validateVariable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiagramVariableValidationDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Применяется в случае ошибки при валидации.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает структуры ответа с успехом операции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/schemas": {
      "get": {
        "tags": [
          "Schema",
          "diagrams"
        ],
        "description": "Неполное получение списка всех схем",
        "operationId": "getAllSchemas",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Схем нет",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaInfoDto"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение списка всех схем",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaInfoDto"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Schema",
          "diagrams"
        ],
        "description": "Сохранение схемы",
        "operationId": "saveSchema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaSaveDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "201": {
            "description": "Успешное создание схемы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaIdDto"
                }
              }
            }
          },
          "409": {
            "description": "Схема с таким именем и версией уже существует",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaIdDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/nodes": {
      "post": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Создание узла диаграммы",
        "operationId": "addNode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          },
          "201": {
            "description": "Успешное создание узла диаграммы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeValidateStateResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/nodes/{diagramVersionId}/reValidate": {
      "post": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Перевалидация узлов диаграммы",
        "operationId": "reValidateNodes",
        "parameters": [
          {
            "name": "diagramVersionId",
            "in": "path",
            "description": "UUID версии диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Узел диаграммы не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешная перевалидация узлов диаграммы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/diagrams/nodes/paste": {
      "post": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Копирование узлов диаграммы",
        "operationId": "paste",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodesPasteRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное копирование узлов диаграммы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesPasteResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не прошел валидацию",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/diagrams/nodes/copy": {
      "post": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Создание слепка копируемых узлов, линков и параметров",
        "operationId": "copy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodesCopyDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не прошел валидацию",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное создание слепка копируемых узлов, линков и параметров",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/diagrams/links": {
      "post": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Создание ребра диаграммы",
        "operationId": "addLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          },
          "201": {
            "description": "Успешное создание ребра диаграммы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/createTemplate": {
      "post": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Сохранение диаграммы с системной автогенерацией имени",
        "operationId": "createTemplate",
        "parameters": [
          {
            "name": "catalogId",
            "in": "query",
            "description": "UUID каталога",
            "required": false,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "201": {
            "description": "Возвращает сохраненную диаграмму со сгенерированным именем",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramInOutParametersViewDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка, возникшая при попытке доступа к БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/createAsNew": {
      "post": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Создание диаграммы, сохранить как новую",
        "operationId": "createAsNew",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiagramCreateAsNew"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии диаграммы с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Применяется в случае ошибки при сохранении.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка возникшая при попытке доступа к БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Возвращает структуры ответа с успехом операции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/createAsLatest": {
      "post": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Создание диаграммы",
        "operationId": "createAsLatest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiagramCreateAsLatest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии диаграммы с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки при сохранении.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Возвращает структуры ответа с успехом операции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/create/userVersion": {
      "post": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Создание пользовательской версии диаграммы",
        "operationId": "createUserVersion_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiagramCreateUserVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии диаграммы с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Применяется в случае ошибки при сохранении.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка возникшая при попытке доступа к БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Возвращает структуры ответа с успехом операции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagram/batch/saveAdditionalParameters": {
      "post": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Обновление дополнительных параметров батча ",
        "operationId": "saveAdditionalParameters",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Список дополнительных параметров",
                "items": {
                  "$ref": "#/components/schemas/BatchAdditionalParameterFullDto"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное обновление",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagram/batch/addTable": {
      "post": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Создание источника данных",
        "operationId": "addTable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchTableCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "201": {
            "description": "Успешное сохранение таблицы",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagram/batch/addSql": {
      "post": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Создание sql выражение для батча",
        "operationId": "addSql",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchSqlCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "201": {
            "description": "Успешное сохранение sql",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagram/batch/addMappingKey": {
      "post": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Создание маппинга ключей",
        "operationId": "addMappingKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchMappingKeyCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Успешное сохранение маппинга ключей",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagram-helper/upload-scorecard-file": {
      "post": {
        "tags": [
          "Diagram helper API"
        ],
        "description": "Парсинг excel-файла скоркарты от пользователя",
        "operationId": "parseScorecardFile",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешный парсинг файла",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScoreMapping"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка при обработке файла",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/dataprovider": {
      "get": {
        "tags": [
          "Data provider Api",
          "dataprovider"
        ],
        "description": "Получение списка источников данных",
        "operationId": "getAll_13",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "eyJmaWx0ZXJzIjpbeyJjb2x1bW5OYW1lIjoiY29ubmVjdGlvblR5cGUiLCJvcGVyYXRvciI6IkVRVUFMIiwidmFsdWUiOiJKREJDIn1dfQ=="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение полного списка источников данных",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataProviderGetFullView"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Data provider Api",
          "dataprovider"
        ],
        "description": "Создание источника данных",
        "operationId": "add_7",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProviderCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Успешное создание источника данных",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dataprovider/testConnection": {
      "post": {
        "tags": [
          "Data provider Api",
          "dataprovider"
        ],
        "description": "Тестирование подключения к базе данных",
        "operationId": "testConnection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestConnectionRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Запрос успешно обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestConnectionRequestDto"
                }
              }
            }
          }
        }
      }
    },
    "/dataprovider/decisionTypesByColumn": {
      "post": {
        "tags": [
          "Data provider Api",
          "dataprovider"
        ],
        "description": "Получение списка доступных типов данных для маппинга переданной колонки",
        "operationId": "getDecisionTypesByColumn",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AvailableTypesRequestDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Источник данных не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода"
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации"
          }
        }
      }
    },
    "/custom-attribute-dict": {
      "get": {
        "tags": [
          "Custom Attribute Dict"
        ],
        "description": "Получение списка справочников",
        "operationId": "getAll_14",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJjaGFuZ2VEdCIsCgkJCSJvcGVyYXRvciI6ICJFUVVBTCIsCgkJCSJ2YWx1ZSI6ICIyMDIzLTAxLTEyIDA0OjMwOjM2IgoJCX0KCV0sCgkic29ydHMiOiBbCgkJewoJCQkiZGlyZWN0aW9uIjogIkFTQyIsCgkJCSJjb2x1bW5OYW1lIjogImRpY3RWYWx1ZVR5cGVJZCIKCQl9CgldLAoJInNlYXJjaEJ5IjogItCY0LzRjyIsCgkicGFnZSI6IDEsCgkic2l6ZSI6IDEwCn0="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomAttributeDictionaryPage"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Custom Attribute Dict"
        ],
        "description": "Создание справочника кастомных атрибутов и его значений",
        "operationId": "add_8",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomAttributeDictionaryCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Успешное создание справочника",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/complextype": {
      "get": {
        "tags": [
          "Complex Type",
          "Complex Type API"
        ],
        "description": "Получение списка комплексного типа в режиме списка",
        "operationId": "getAllMutable",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJkaXNwbGF5TmFtZSIsCgkJCSJvcGVyYXRvciI6ICJFUVVBTCIsCgkJCSJ2YWx1ZSI6ICJ0ZXN0IgoJCX0KCV0sCgkic29ydHMiOiBbCgkJewoJCQkiZGlyZWN0aW9uIjogIkFTQyIsCgkJCSJjb2x1bW5OYW1lIjogImRpc3BsYXlOYW1lIgoJCX0KCV0sCgkic2VhcmNoQnkiOiAi0KHRgtGA0L7QutCwINC/0L7QuNGB0LrQsCIsCgkicGFnZSI6IDEsCgkic2l6ZSI6IDEwCn0="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение полного списка мутабельных сложных типов данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplexTypePage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Complex Type",
          "Complex Type API"
        ],
        "description": "Создание комплексного типа со всеми зависимостями",
        "operationId": "add_9",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplexTypeCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "201": {
            "description": "Успешное создание сложного объекта",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/complextype/{versionId}/update": {
      "post": {
        "tags": [
          "Complex Type",
          "Complex Type API"
        ],
        "description": "Обновление комплексного типа со списком атрибутов",
        "operationId": "updateComplexTypeWithAttribute",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии сложного типа",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplexTypeUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос содержит неверные или несуществующие параметры в пути",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "201": {
            "description": "Успешная операция",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка при обработке запроса на стороне СУБД. Тело запроса содержит невалидные атрибуты",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/complextype/{typeId}/save": {
      "post": {
        "tags": [
          "Complex Type",
          "Complex Type API"
        ],
        "description": "Сохранение комплексного типа с списком атрибутов",
        "operationId": "saveComplexTypeWithAttribute",
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplexTypeCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Запрос содержит неверные или несуществующие параметры в пути",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "201": {
            "description": "Успешная операция",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка при обработке запроса на стороне СУБД. Тело запроса содержит невалидные атрибуты",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/communication": {
      "get": {
        "tags": [
          "Communication Api",
          "communication"
        ],
        "description": "Получение списка каналов коммуникации",
        "operationId": "getAll_15",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров деплоя",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJjb21tdW5pY2F0aW9uQ2hhbm5lbE5hbWUiLAoJCQkib3BlcmF0b3IiOiAiRVFVQUwiLAoJCQkidmFsdWUiOiAidGVzdCIKCQl9CgldLAoJInNvcnRzIjogWwoJCXsKCQkJImRpcmVjdGlvbiI6ICJBU0MiLAoJCQkiY29sdW1uTmFtZSI6ICJjaGFuZ2VEdCIKCQl9CgldLAoJInNlYXJjaEJ5IjogItCh0YLRgNC+0LrQsCDQv9C+0LjRgdC60LAiLAoJInBhZ2UiOiAxLAoJInNpemUiOiAxMAp9"
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение полного списка каналов коммуникации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationPage"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "post": {
        "tags": [
          "Communication Api",
          "communication"
        ],
        "description": "Создание нового канала коммуникации и переменных",
        "operationId": "add_10",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunicationChannelCreateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "201": {
            "description": "Успешное создание канала коммуникации и переменных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/communication/{communicationChannelId}/create/userVersion": {
      "post": {
        "tags": [
          "Communication Api",
          "communication"
        ],
        "description": "Создание пользовательской версии канала коммуникации и переменных",
        "operationId": "addUserVersion_2",
        "parameters": [
          {
            "name": "communicationChannelId",
            "in": "path",
            "description": "Идентификатор канала коммуникации",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommunicationChannelCreateUserVersionDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Успешное создание пользовательской версии канала коммуникации и переменных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api-streaming-lib/upload/{environmentId}": {
      "post": {
        "tags": [
          "Streaming"
        ],
        "description": "Загрузка файла в оркестратор",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "UUID среды",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии среды с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Возникла ошибка при загрузке файла",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Файл успешно загружен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/aggregates": {
      "get": {
        "tags": [
          "Aggregate Api"
        ],
        "description": "Получение списка агрегатов в режиме списка",
        "operationId": "getAll_16",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJhZ2dyZWdhdGVOYW1lIiwKCQkJIm9wZXJhdG9yIjogIkVRVUFMIiwKCQkJInZhbHVlIjogInRlc3QiCgkJfQoJXSwKCSJzb3J0cyI6IFsKCQl7CgkJCSJkaXJlY3Rpb24iOiAiQVNDIiwKCQkJImNvbHVtbk5hbWUiOiAiYWdncmVnYXRlTmFtZSIKCQl9CgldLAoJInNlYXJjaEJ5IjogItCY0LzRjyIsCgkicGFnZSI6IDEsCgkic2l6ZSI6IDEwCn0="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Агрегаты с таким группирующим элементом не найдены"
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregatePage"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки сохранения, обновления, валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Aggregate Api"
        ],
        "description": "Сохранение нового агрегата",
        "operationId": "create_4",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AggregateCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "201": {
            "description": "Агрегат создан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                },
                "example": {
                  "timeStamp": "13-08-2021 11:20:13",
                  "uuid": "ab70191a-a82c-4f51-a2a9-6a32230d059a",
                  "httpCode": 201,
                  "module": "aggregate",
                  "operation": "save"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка при попытке сохранения агрегата",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Ошибка в передаваемых данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                },
                "example": {
                  "timeStamp": "13-08-2021 11:22:37",
                  "httpCode": 400,
                  "module": "aggregate",
                  "operation": "validate",
                  "message": "JSON validation e.."
                }
              }
            }
          }
        }
      }
    },
    "/versions": {
      "get": {
        "tags": [
          "Versions"
        ],
        "description": "Получение списка версий",
        "operationId": "getVersions",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Пользователь не авторизован",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное получение списка версий, до которых есть доступ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionsDto"
                }
              }
            }
          }
        }
      }
    },
    "/user/getLastChangeUsersByObjectType/{objectType}": {
      "get": {
        "tags": [
          "User",
          "user"
        ],
        "description": "Получение списка пользователей внесших последние изменения",
        "operationId": "getLastChangeUserByObjectType",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "description": "Тип объекта",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DEPLOY",
                "DIAGRAM",
                "AGGREGATE",
                "CUSTOM_CODE",
                "COMPLEX_TYPE",
                "SERVICE",
                "REST_SOURCE",
                "DATA_PROVIDER",
                "CUSTOM_ATTRIBUTE_DICTIONARY",
                "COMMUNICATION_CHANNEL",
                "OFFER",
                "USER_FUNCTION",
                "DATA_PROVIDER_RELATION",
                "CATALOG",
                "KAFKA",
                "PYTHON_ENVIRONMENT",
                "PYTHON_ENVIRONMENT_RELATION",
                "DIAGRAM_RELATION",
                "CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS",
                "OFFER_RELATION",
                "SERVICE_RELATION",
                "REST_SOURCE_RELATION",
                "CUSTOM_CODE_RELATION",
                "COMMUNICATION_RELATION",
                "AGGREGATE_RELATION",
                "MESSAGE_BROKER",
                "LOCKING"
              ]
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает список пользователей внесших последние изменения",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserFullView"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/user-function": {
      "get": {
        "tags": [
          "User Functions"
        ],
        "description": "Получение списка всех пользовательских функций в режиме списка",
        "operationId": "getAll_1",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJInBhZ2UiOiAxLAoJInNpemUiOiAxMAp9"
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Пользовательские функции не найдены"
          },
          "200": {
            "description": "Список функций успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFunctionPage"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/user-function/catalog": {
      "get": {
        "tags": [
          "User Functions"
        ],
        "description": "Получение списка всех пользовательских функций в режиме каталога",
        "operationId": "getAllCatalog",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJmdW5jdGlvbk5hbWUiLAoJCQkib3BlcmF0b3IiOiAiRVFVQUwiLAoJCQkidmFsdWUiOiAidGVzdCIKCQl9CgldLAoJInNvcnRzIjogWwoJCXsKCQkJImRpcmVjdGlvbiI6ICJBU0MiLAoJCQkiY29sdW1uTmFtZSI6ICJmdW5jdGlvbk5hbWUiCgkJfQoJXSwKCSJzZWFyY2hCeSI6ICLQmNC80Y8iLAoJInBhZ2UiOiAxLAoJInNpemUiOiAxMAp9"
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Список функций успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFunctionCatalogPage"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки сохранения, обновления, валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/test": {
      "get": {
        "tags": [
          "Test Api"
        ],
        "description": "Получение списка доступных тестов по id диаграммы",
        "operationId": "getAll_2",
        "parameters": [
          {
            "name": "diagramId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id диаграммы, по которой необходимо выгрузить список тестов",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Тесты с указанным ID диаграммы не найдены",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestInfo"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Ошибка выгрузки данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/test/{testId}/test_results": {
      "get": {
        "tags": [
          "Test Api"
        ],
        "description": "Получение списка результатов выполнения тест-кейсов по идентификатору теста (сущности Test)",
        "operationId": "getTestCasesByTestId",
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string",
              "description": "test в формате UUID",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Тест с указанным ID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Список успешно сформирован",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseInfo"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка выгрузки данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/test/{testId}/status": {
      "get": {
        "tags": [
          "Test Api"
        ],
        "description": "Получение статуса исполнения теста по его идентификатору",
        "operationId": "getTestStatus",
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string",
              "description": "test в формате UUID",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Тест с указанным ID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка выгрузки данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Получен статус",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestStatusDto"
                }
              }
            }
          }
        }
      }
    },
    "/test/{testId}/download-testfile": {
      "get": {
        "tags": [
          "Test Api"
        ],
        "description": "Выгрузка файла теста по его идентификатору",
        "operationId": "downloadTestFile",
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string",
              "description": "testId в формате UUID",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Тест с указанным ID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Получен файл",
            "content": {
              "application/octet-stream": {}
            }
          },
          "500": {
            "description": "Ошибка выгрузки данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/test/{testId}/download-report": {
      "get": {
        "tags": [
          "Test Api"
        ],
        "description": "Выгрузка отчета по тестированию в формате Excel по идентификатору теста",
        "operationId": "downloadTestReport",
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "description": "Уникальный идентификатор теста",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Тест с указанным идентификатором не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Отчет успешно выгружен",
            "content": {
              "application/octet-stream": {}
            }
          }
        }
      }
    },
    "/test/generate/{versionId}": {
      "get": {
        "tags": [
          "Test Api"
        ],
        "description": "Генерация файла тестирования",
        "operationId": "getFile",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Ошибка обозначающая, что диаграмма не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": {
                    "timeStamp": "13-08-2021 11:20:13",
                    "uuid": "ab70191a-a82c-4f51-a2a9-6a32230d059a",
                    "httpCode": 404,
                    "module": "test-diagram",
                    "operation": "create_excel"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Файл успешно создан и передан",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/test/case/{testCaseId}": {
      "get": {
        "tags": [
          "Test Api"
        ],
        "description": "Получение тест-кейса по уникальному идентификатору",
        "operationId": "getTestCase",
        "parameters": [
          {
            "name": "testCaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "testCaseId в формате UUID"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Тест-кейс с указанным ID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Получен тест-кейс",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseGetFullView"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка выгрузки данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/test/case/{testCaseId}/debug": {
      "get": {
        "tags": [
          "Test Api"
        ],
        "description": "Получение отладочной информации по тестовому кейсу",
        "operationId": "getTestCaseDebugInfo",
        "parameters": [
          {
            "name": "testCaseId",
            "in": "path",
            "description": "Уникальный идентификатор тестового кейса",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Тестовый кейс с указанным идентификатором не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "Отладочная информация отсутствует в системе сбора логов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Отладочная информация успешно получена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseDebugFullView"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/swagger-resources": {
      "get": {
        "tags": [
          "api-resource-controller"
        ],
        "operationId": "swaggerResources",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SwaggerResource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/swagger-resources/configuration/ui": {
      "get": {
        "tags": [
          "api-resource-controller"
        ],
        "operationId": "uiConfiguration",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UiConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/swagger-resources/configuration/security": {
      "get": {
        "tags": [
          "api-resource-controller"
        ],
        "operationId": "securityConfiguration",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/services/{versionId}/variables": {
      "get": {
        "tags": [
          "External service Api",
          "external-services"
        ],
        "description": "Получение списка переменных внешнего сервиса по UUID",
        "operationId": "getServiceVariables",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Идентификатор версии сервиса",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Сервис с указанным UUID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                },
                "example": {
                  "timeStamp": "09-08-2021 08:00:49",
                  "UUID": "e95ce8d2-1cb5-47e9-8489-4348a7f81edf",
                  "httpCode": 404,
                  "module": "ExtSer-service",
                  "operation": "get",
                  "message": "External service not found"
                }
              }
            }
          },
          "204": {
            "description": "Переменных у внешнего сервиса не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Список переменных внешнего сервиса получен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalServiceGetIdWithVariables"
                }
              }
            }
          }
        }
      }
    },
    "/services/{serviceId}/versions": {
      "get": {
        "tags": [
          "External service Api",
          "external-services"
        ],
        "description": "Получение списка версий внешнего сервиса",
        "operationId": "getServiceVersions",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Уникальный идентификатор сервиса",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение полного списка внешних сервисов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalServiceShortInfoVersionDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/services/techService": {
      "get": {
        "tags": [
          "External service Api",
          "external-services"
        ],
        "description": "Получение списка внешних сервисов по техническому типу",
        "operationId": "getByTechType",
        "parameters": [
          {
            "name": "techTypes",
            "in": "query",
            "description": "Тип технического внешнего сервиса",
            "required": true,
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "OFFER_STORAGE_WRITE",
                  "COMMUNICATION_HUB",
                  "COMMUNICATION_HUB_READ",
                  "OFFER_STORAGE_READ_BY_CLIENT_ID",
                  "OFFER_STORAGE_READ_BY_OFFER_ID",
                  "POLICY_READ"
                ]
              }
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Внешний сервис не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение внешнего сервиса",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExternalServiceTechFullViewDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/services/catalog": {
      "get": {
        "tags": [
          "External service Api",
          "external-services"
        ],
        "description": "Получение списка сервисов в режиме каталога",
        "operationId": "getAllCatalog_1",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJzZXJ2aWNlTmFtZSIsCgkJCSJvcGVyYXRvciI6ICJFUVVBTCIsCgkJCSJ2YWx1ZSI6ICJ0ZXN0IgoJCX0KCV0sCgkic29ydHMiOiBbCgkJewoJCQkiZGlyZWN0aW9uIjogIkFTQyIsCgkJCSJjb2x1bW5OYW1lIjogInNlcnZpY2VOYW1lIgoJCX0KCV0sCgkic2VhcmNoQnkiOiAi0JjQvNGPIiwKCSJwYWdlIjogMSwKCSJzaXplIjogMTAKfQ=="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает список сервисов и каталогов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalServiceCatalogPage"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки сохранения, обновления, валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/scripts": {
      "get": {
        "tags": [
          "Script Api"
        ],
        "description": "Получение списка всех доступных скриптов",
        "operationId": "getAll_4",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров деплоя",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJzY3JpcHRUeXBlIiwKCQkJIm9wZXJhdG9yIjogIkVRVUFMIiwKCQkJInZhbHVlIjogIkdST09WWSIKCQl9CgldLAoJInNvcnRzIjogWwoJCXsKCQkJImRpcmVjdGlvbiI6ICJBU0MiLAoJCQkiY29sdW1uTmFtZSI6ICJjaGFuZ2VEdCIKCQl9CgldLAoJInNlYXJjaEJ5IjogItCh0YLRgNC+0LrQsCDQv9C+0LjRgdC60LAiLAoJInBhZ2UiOiAxLAoJInNpemUiOiAxMAp9"
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Скрипты не найдены"
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptPage"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/{versionId}/variables": {
      "get": {
        "tags": [
          "Script Api"
        ],
        "description": "Получение списка переменных скрипта по уникальному идентификатору версии",
        "operationId": "getScriptVariables",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Идентификатор версии скрипта",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Скрипт с указанным UUID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                },
                "example": {
                  "timeStamp": "09-08-2021 08:00:49",
                  "UUID": "e95ce8d2-1cb5-47e9-8489-4348a7f81edf",
                  "httpCode": 404,
                  "module": "ExtSer-service",
                  "operation": "get",
                  "message": "External service not found"
                }
              }
            }
          },
          "204": {
            "description": "Переменных у скрипта не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Список переменных скрипта получен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptWithIdWithVariables"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/{scriptId}/versions": {
      "get": {
        "tags": [
          "Script Api"
        ],
        "description": "Получение списка версий скрипта",
        "operationId": "getScriptVersions",
        "parameters": [
          {
            "name": "scriptId",
            "in": "path",
            "description": "Идентификатор скрипта",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Скрипты не найдены"
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScriptFullVersionView"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Ошибка выгрузки данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/types": {
      "get": {
        "tags": [
          "Script Api"
        ],
        "description": "Получение типов языка",
        "operationId": "getScriptTypes",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScriptFullVersionView"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Ошибка выгрузки данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/python/{versionId}": {
      "get": {
        "tags": [
          "Script Api"
        ],
        "description": "Получение скрипта по идентификатору версии",
        "operationId": "get_2",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Идентификатор версии скрипта",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Скрипт с указанным ID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Получен скрипт",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptFullView"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка выгрузки данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/groovy/{versionId}": {
      "get": {
        "tags": [
          "Script Api"
        ],
        "description": "Получение скрипта по уникальному идентификатору",
        "operationId": "get_3",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Идентификатор версии скрипта",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Скрипт с указанным ID не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Получен скрипт",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptFullView"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка выгрузки данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/catalog": {
      "get": {
        "tags": [
          "Script Api"
        ],
        "description": "Получение списка скриптов в режиме каталога",
        "operationId": "getAllCatalog_2",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJkaWFncmFtTmFtZSIsCgkJCSJvcGVyYXRvciI6ICJFUVVBTCIsCgkJCSJ2YWx1ZSI6ICJ0ZXN0IgoJCX0KCV0sCgkic29ydHMiOiBbCgkJewoJCQkiZGlyZWN0aW9uIjogIkFTQyIsCgkJCSJjb2x1bW5OYW1lIjogImRpYWdyYW1OYW1lIgoJCX0KCV0sCgkic2VhcmNoQnkiOiAi0JjQvNGPIiwKCSJwYWdlIjogMSwKCSJzaXplIjogMTAKfQ=="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает список скриптов и каталогов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptCatalogPage"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки сохранения, обновления, валидации",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/script/python/version/{id}": {
      "get": {
        "tags": [
          "Python Version Api"
        ],
        "description": "Получение версии Python",
        "operationId": "getPythonVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "UUID версии Python",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное получение версии Python",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PythonVersionFullViewDto"
                }
              }
            }
          }
        }
      }
    },
    "/script/python/environment/{id}/versions": {
      "get": {
        "tags": [
          "Python Environment Api"
        ],
        "description": "Получение списка версий окружения Python",
        "operationId": "getPythonEnvironmentVersions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Идентификатор окружения питона",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Скрипты не найдены"
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PythonEnvironmentVersionViewDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Ошибка выгрузки данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest_sources/catalog": {
      "get": {
        "tags": [
          "Rest Source Api",
          "rest-sources"
        ],
        "description": "Получение списка сервисов в режиме каталога",
        "operationId": "getAllCatalog_3",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJzZXJ2aWNlTmFtZSIsCgkJCSJvcGVyYXRvciI6ICJFUVVBTCIsCgkJCSJ2YWx1ZSI6ICJ0ZXN0IgoJCX0KCV0sCgkic29ydHMiOiBbCgkJewoJCQkiZGlyZWN0aW9uIjogIkFTQyIsCgkJCSJjb2x1bW5OYW1lIjogInNlcnZpY2VOYW1lIgoJCX0KCV0sCgkic2VhcmNoQnkiOiAi0JjQvNGPIiwKCSJwYWdlIjogMSwKCSJzaXplIjogMTAKfQ=="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramDto"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствует доступ к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает список источников и каталогов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestSourceCatalogPage"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки сохранения, обновления, валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/references/nodetype": {
      "get": {
        "tags": [
          "reference",
          "References"
        ],
        "description": "Получение списка типов узлов",
        "operationId": "getAllNodeType",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение полного списка типов узлов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NodeTypeGetFullView"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/references/functions": {
      "get": {
        "tags": [
          "reference",
          "References"
        ],
        "description": "Получение списка функций",
        "operationId": "getAllFunction",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение полного списка функций",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionGetFullView"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/references/datatype": {
      "get": {
        "tags": [
          "reference",
          "References"
        ],
        "description": "Получение списка типов данных. Содержит комплексные и примитивные данные одним списком с разделением по флагу",
        "operationId": "getAllDataType",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение полного списка типов данных",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataTypeGetFullView"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/policy/attributes": {
      "get": {
        "tags": [
          "Policy Api",
          "policy"
        ],
        "description": "Получение списка атрибутов через внешний сервис",
        "operationId": "getAttributes",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное получение списка атрибутов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeFullViewDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/offer/{versionId}/variables": {
      "get": {
        "tags": [
          "offer",
          "Offer Api"
        ],
        "description": "Получение списка переменных шаблона предложения по UUID версии",
        "operationId": "getOfferVariables",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Уникальный идентификатор версии шаблона предложения",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Версия шаблона предложения с указанным UUID не найдена",
            "content": {
              "application/json": {}
            }
          },
          "204": {
            "description": "Переменных у шаблона предложения не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение шаблона предложения с переменными",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferWithVariablesDto"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/offer/{offerId}/versions": {
      "get": {
        "tags": [
          "offer",
          "Offer Api"
        ],
        "description": "Получение списка версий шаблона предложения",
        "operationId": "getOfferVersions",
        "parameters": [
          {
            "name": "offerId",
            "in": "path",
            "description": "Уникальный идентификатор шаблона предложения",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное получение полного списка версий шаблона предложения",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfferShortInfoVersionDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/offer/catalog": {
      "get": {
        "tags": [
          "offer",
          "Offer Api"
        ],
        "description": "Получение списка шаблонов предложений в режиме каталога",
        "operationId": "getAllCatalog_4",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJvZmZlck5hbWUiLAoJCQkib3BlcmF0b3IiOiAiRVFVQUwiLAoJCQkidmFsdWUiOiAidGVzdCIKCQl9CgldLAoJInNvcnRzIjogWwoJCXsKCQkJImRpcmVjdGlvbiI6ICJBU0MiLAoJCQkiY29sdW1uTmFtZSI6ICJvZmZlck5hbWUiCgkJfQoJXSwKCSJzZWFyY2hCeSI6ICLQmNC80Y8iLAoJInBhZ2UiOiAxLAoJInNpemUiOiAxMAp9"
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное получение полного списка шаблонов предложений",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OfferCatalogPage"
                  }
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/offer-storage/clientIdTypes": {
      "get": {
        "tags": [
          "Offer Storage Api",
          "offer-storage"
        ],
        "description": "Получение списка типов клиента",
        "operationId": "getClientIdTypes",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное получение списка типов клиента",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfferStorageClientIdTypesFullDto"
                }
              }
            }
          }
        }
      }
    },
    "/object-relation/{objectType}": {
      "get": {
        "tags": [
          "Object Relation",
          "diagrams"
        ],
        "description": "Получение списка связей",
        "operationId": "getRelatedDiagramsWithObject",
        "parameters": [
          {
            "name": "objectType",
            "in": "path",
            "description": "Тип объекта",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DEPLOY",
                "DIAGRAM",
                "AGGREGATE",
                "CUSTOM_CODE",
                "COMPLEX_TYPE",
                "SERVICE",
                "REST_SOURCE",
                "DATA_PROVIDER",
                "CUSTOM_ATTRIBUTE_DICTIONARY",
                "COMMUNICATION_CHANNEL",
                "OFFER",
                "USER_FUNCTION",
                "DATA_PROVIDER_RELATION",
                "CATALOG",
                "KAFKA",
                "PYTHON_ENVIRONMENT",
                "PYTHON_ENVIRONMENT_RELATION",
                "DIAGRAM_RELATION",
                "CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS",
                "OFFER_RELATION",
                "SERVICE_RELATION",
                "REST_SOURCE_RELATION",
                "CUSTOM_CODE_RELATION",
                "COMMUNICATION_RELATION",
                "AGGREGATE_RELATION",
                "MESSAGE_BROKER",
                "LOCKING"
              ]
            }
          },
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJkaWFncmFtTmFtZSIsCgkJCSJvcGVyYXRvciI6ICJFUVVBTCIsCgkJCSJ2YWx1ZSI6ICJ0ZXN0IgoJCX0KCV0sCgkic29ydHMiOiBbCgkJewoJCQkiZGlyZWN0aW9uIjogIkFTQyIsCgkJCSJjb2x1bW5OYW1lIjogImRpYWdyYW1OYW1lIgoJCX0KCV0sCgkic2VhcmNoQnkiOiAi0JjQvNGPIiwKCSJwYWdlIjogMSwKCSJzaXplIjogMTAKfQ=="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает данные об объекте, в котором используется переданный объект",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ObjectRelationPage"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Переданы неверные данные",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/migration/downloadExportFile/{fileName}": {
      "get": {
        "tags": [
          "Migration",
          "migration"
        ],
        "description": "Выгрузка с сервера файла с экспортированными объектами",
        "operationId": "downloadExportFile",
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "description": "Имя файла",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Файл с указанным именем не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Файл успешно выгружен с сервера",
            "content": {
              "application/octet-stream": {}
            }
          }
        }
      }
    },
    "/locking": {
      "get": {
        "tags": [
          "Locking Api",
          "locking"
        ],
        "description": "Получение списка заблокированных объектов в режиме списка",
        "operationId": "getAll_8",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "eyJmaWx0ZXJzIjpbeyJjb2x1bW5OYW1lIjoibG9ja2VkRHQiLCJvcGVyYXRvciI6Ik5PVF9FUVVBTCIsInZhbHVlIjoiMjAwMC0wMS0wMSAwMDowMDowMCJ9XSwic29ydHMiOlt7ImRpcmVjdGlvbiI6IkRFU0MiLCJjb2x1bW5OYW1lIjoibG9ja2VkRHQifV0sInNlYXJjaEJ5IjoibWJfZGlhZ3JhbSIsInBhZ2UiOjEsInNpemUiOjEwfQ=="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockingDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки сохранения, обновления, валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает список заблокированных объектов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockingDictionaryPage"
                }
              }
            }
          }
        }
      }
    },
    "/locking/objectTypes": {
      "get": {
        "tags": [
          "Locking Api"
        ],
        "description": "Получение списка типов заблокированных объектов",
        "operationId": "getAvailableObjectType",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Элементы не найдены",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка, возникшая на стороне сервера",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка аутентификациии",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Список типов заблокированных объектов успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "DEPLOY",
                      "DIAGRAM",
                      "AGGREGATE",
                      "CUSTOM_CODE",
                      "COMPLEX_TYPE",
                      "SERVICE",
                      "REST_SOURCE",
                      "DATA_PROVIDER",
                      "CUSTOM_ATTRIBUTE_DICTIONARY",
                      "COMMUNICATION_CHANNEL",
                      "OFFER",
                      "USER_FUNCTION",
                      "DATA_PROVIDER_RELATION",
                      "CATALOG",
                      "KAFKA",
                      "PYTHON_ENVIRONMENT",
                      "PYTHON_ENVIRONMENT_RELATION",
                      "DIAGRAM_RELATION",
                      "CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS",
                      "OFFER_RELATION",
                      "SERVICE_RELATION",
                      "REST_SOURCE_RELATION",
                      "CUSTOM_CODE_RELATION",
                      "COMMUNICATION_RELATION",
                      "AGGREGATE_RELATION",
                      "MESSAGE_BROKER",
                      "LOCKING"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/environments/stateStore/types": {
      "get": {
        "tags": [
          "environments",
          "Environment Api"
        ],
        "description": "Получение типов СУБД кэша аггрегатов",
        "operationId": "getStateStoreTypes",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное получение списка типов СУБД кэша аггрегатов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "POSTGRESQL"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/{diagramId}/versions": {
      "get": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Получение списка версий диаграмм",
        "operationId": "getDiagramVersions",
        "parameters": [
          {
            "name": "diagramId",
            "in": "path",
            "description": "UUID диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает список версий диаграммы",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiagramShortInfoVersionsView"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/schemas/{id}": {
      "get": {
        "tags": [
          "Schema",
          "diagrams"
        ],
        "description": "Полное получение схемы по ID",
        "operationId": "getSchemaById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID схемы",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Схема не найдена"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное получение схемы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaFullDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Schema",
          "diagrams"
        ],
        "description": "Удаление схемы",
        "operationId": "deleteSchema",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID схемы",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Схема не найдена"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное удаление схемы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaIdDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/schemas/name/{name}": {
      "get": {
        "tags": [
          "Schema",
          "diagrams"
        ],
        "description": "Неполное получение списка схем по имени",
        "operationId": "getAllSchemasByName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Имя схемы",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Схем с таким именем нет",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaInfoDto"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение схем",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaInfoDto"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Schema",
          "diagrams"
        ],
        "description": "Удаление всех версий схемы по имени",
        "operationId": "deleteSchemasByName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Имя схемы",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Схемы не найдены"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное удаление схем",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaIdDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/schemas/name/{name}/version/{version}": {
      "get": {
        "tags": [
          "Schema",
          "diagrams"
        ],
        "description": "Полное получение схемы по имени и версии",
        "operationId": "getSchemaByNameAndVersion",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Имя схемы",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "Версия схемы",
            "required": true,
            "schema": {
              "pattern": "([0-9]+\\.)*[0-9]+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Схема не найдена"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное получение схемы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaFullDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/schemas/latest": {
      "get": {
        "tags": [
          "Schema",
          "diagrams"
        ],
        "description": "Неполное получение последних версий всех схем",
        "operationId": "getAllLatestSchemas",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Схем нет",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaInfoDto"
                  }
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение последних версий всех схем",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaInfoDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/nodes/{nodeId}/prevNodes": {
      "get": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Получение списка предыдущих по уникальному идентификатору узла, для которогонеобходимо построить зависимости",
        "operationId": "getPrevNodesByNodeIdAndDiagramVersionId",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "Уникальный идентификатор узла диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          },
          {
            "name": "diagramVersionId",
            "in": "query",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список возможных узлов пуст",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение списка узлов диаграммы по id узла",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeViewWithVariablesDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/diagrams/nodes/{nodeId}/possible": {
      "get": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Получение списка возможных узлов по уникальному идентификатору узла, для которогонеобходимо построить зависимости",
        "operationId": "getPossibleNodesByNodeId",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "Уникальный идентификатор узла диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          },
          {
            "name": "diagramId",
            "in": "query",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список возможных узлов пуст",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Возникла ошибка при получении объекта из базы данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение списка узлов диаграммы по id узла",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeViewWithVariablesDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/diagrams/getReadyForDeploy": {
      "get": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Получение списка диаграмм готовых для деплоя",
        "operationId": "getAllReadyForDeploy",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает список диаграмм готовых к деплоя",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiagramShortInfoView"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки сохранения, обновления, валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/catalog": {
      "get": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Получение списка диаграмм в режиме каталога",
        "operationId": "getAllCatalog_5",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJkaWFncmFtTmFtZSIsCgkJCSJvcGVyYXRvciI6ICJFUVVBTCIsCgkJCSJ2YWx1ZSI6ICJ0ZXN0IgoJCX0KCV0sCgkic29ydHMiOiBbCgkJewoJCQkiZGlyZWN0aW9uIjogIkFTQyIsCgkJCSJjb2x1bW5OYW1lIjogImRpYWdyYW1OYW1lIgoJCX0KCV0sCgkic2VhcmNoQnkiOiAi0JjQvNGPIiwKCSJwYWdlIjogMSwKCSJzaXplIjogMTAKfQ=="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки сохранения, обновления, валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает список диаграмм и каталогов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramCatalogPage"
                }
              }
            }
          }
        }
      }
    },
    "/diagram/batch/{versionId}/getVariables": {
      "get": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Получение списка переменных для настройки батча диаграммы",
        "operationId": "getBatchVariables",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает информацию настраиваемых переменных по уникальному идентификатору диаграмму в формате UUID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchVariableGetDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/diagram/batch/{id}/table": {
      "get": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Получение  по id",
        "operationId": "getTable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "UUID таблицы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Таблица не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение таблицы по id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchTableGetFullView"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Получение  по id",
        "operationId": "deleteTable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "UUID таблицы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное удаление таблицы по id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagram/batch/{groupId}/getMapping": {
      "get": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Получение списка маппига переменных",
        "operationId": "getBatchMapping",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "UUID группы атрибутов",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает список маппинга переменных",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchMappingGetDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagram/batch/{groupId}/getMappingKey": {
      "get": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Получение списка маппига ключей",
        "operationId": "getBatchMappingKey",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "UUID группы атрибутов",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает список маппинга ключей",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchMappingKeyGetDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/diagram/batch/{groupId}/getAllTables": {
      "get": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Получение списка таблиц используемых для данной группы переменных",
        "operationId": "getAllTables",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "UUID группы атрибутов",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение полного списка таблиц",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchTableGetFullView"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/diagram/batch/{diagramVersionId}/{groupId}/getSql": {
      "get": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Получение запроса для маппинга батч режима",
        "operationId": "getBatchSql",
        "parameters": [
          {
            "name": "diagramVersionId",
            "in": "path",
            "description": "UUID версии диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "UUID группы атрибутов",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает sql запрос для маппинга переменных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchSqlGetDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagram/batch/{diagramVersionId}/getAllAdditionalParameters": {
      "get": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Получение списка дополнительных параметров",
        "operationId": "getAllAdditionalParameters",
        "parameters": [
          {
            "name": "diagramVersionId",
            "in": "path",
            "description": "UUID версии диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение полного списка дополнительных параметров",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchAdditionalParameterFullDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deploy": {
      "get": {
        "tags": [
          "Deploy",
          "deploy"
        ],
        "description": "Получение списка деплоев",
        "operationId": "getAll_12",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJkaWFncmFtTmFtZSIsCgkJCSJvcGVyYXRvciI6ICJFUVVBTCIsCgkJCSJ2YWx1ZSI6ICJ0ZXN0IgoJCX0KCV0sCgkic29ydHMiOiBbCgkJewoJCQkiZGlyZWN0aW9uIjogIkFTQyIsCgkJCSJjb2x1bW5OYW1lIjogImRlcGxveUR0IgoJCX0KCV0sCgkic2VhcmNoQnkiOiAi0KHRgtGA0L7QutCwINC/0L7QuNGB0LrQsCIsCgkicGFnZSI6IDEsCgkic2l6ZSI6IDEwCn0="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Список деплоев успешно получен",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeployPage"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/{deployId}/variables": {
      "get": {
        "tags": [
          "Deploy",
          "deploy"
        ],
        "description": "Получение переменных деплоя",
        "operationId": "getDeployVariables",
        "parameters": [
          {
            "name": "deployId",
            "in": "path",
            "description": "Уникальный идентификатор деплоя",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Деплой не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "Запрос успешно обработан. Элементы не найдены",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка, возникшая на стороне сервера",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Переменные успешно получены",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployVariablesFullDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/deploy/types": {
      "get": {
        "tags": [
          "Deploy"
        ],
        "description": "Получение типов деплоя",
        "operationId": "getDeployTypes",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "REALTIME",
                      "MANUAL_BATCH",
                      "AUTO_BATCH"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Ошибка аутентификациии",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/deploy/statuses": {
      "get": {
        "tags": [
          "Deploy"
        ],
        "description": "Получение списка используемых статусов деплоев",
        "operationId": "getAvailableStatuses",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Элементы не найдены",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка, возникшая на стороне сервера",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка аутентификациии",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Список используемых статусов успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "CREATED",
                      "ERROR",
                      "CANCELED",
                      "STOPPED",
                      "STOPPING",
                      "READY_FOR_DEPLOY",
                      "TEST_DEPLOYED",
                      "INHERIT_DEPLOYED",
                      "DEPLOYED_WITH_ERROR_IN_REPLICAS",
                      "IN_PROGRESS",
                      "DEPLOYED"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deploy/getTopics": {
      "get": {
        "tags": [
          "Deploy",
          "deploy"
        ],
        "description": "Получение информации о топиках диаграммы по ее UUID",
        "operationId": "getTopics",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Возвращает информацию о топиках по ее уникальному идентификатору в формате UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationMapDto"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/configuration": {
      "get": {
        "tags": [
          "Deploy",
          "deploy"
        ],
        "description": "Получение конфигурации деплоя",
        "operationId": "getDeployConfigurations",
        "parameters": [
          {
            "name": "deployIds",
            "in": "query",
            "description": "Идентификаторы деплоя",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Деплой не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "Запрос успешно обработан. Элементы не найдены",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка, возникшая на стороне сервера",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Конфигурации успешно получена",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeployConfigurationFullDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dataprovider/{sourceId}/withTables": {
      "get": {
        "tags": [
          "Data provider Api",
          "dataprovider"
        ],
        "description": "Получение источника данных по id с таблицами",
        "operationId": "getWithTables",
        "parameters": [
          {
            "name": "sourceId",
            "in": "path",
            "description": "UUID источника данных",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Источник данных не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "Запрос успешно обработан. Источник данных не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода"
          },
          "200": {
            "description": "Успешное получение источника данных по id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProviderGetFullViewWithTables"
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации"
          }
        }
      }
    },
    "/dataprovider/{sourceId}/tables": {
      "get": {
        "tags": [
          "Data provider Api",
          "dataprovider"
        ],
        "description": "Получение таблиц в источнике данных по id",
        "operationId": "getTables",
        "parameters": [
          {
            "name": "sourceId",
            "in": "path",
            "description": "UUID источника данных",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Источник данных не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение таблиц в источнике данных по id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TablesDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dataprovider/{sourceId}/tables/{tableName}/indices/{indexSelectionType}": {
      "get": {
        "tags": [
          "Data provider Api",
          "dataprovider"
        ],
        "description": "Получение индексов таблицы в источнике данных по id источника и названию таблицы",
        "operationId": "getIndicesByTable",
        "parameters": [
          {
            "name": "sourceId",
            "in": "path",
            "description": "UUID источника данных",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "description": "Имя таблицы",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "indexSelectionType",
            "in": "path",
            "description": "Тип выборки индексов",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "PRIMARY",
                "UNIQUE"
              ]
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Источник данных не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода"
          },
          "200": {
            "description": "Успешное получение индексов таблицы в источнике данных по id источника и названию таблицы",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IndexDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации"
          }
        }
      }
    },
    "/dataprovider/{sourceId}/tables/{tableName}/columns": {
      "get": {
        "tags": [
          "Data provider Api",
          "dataprovider"
        ],
        "description": "Получение полей таблицы в источнике данных по id источника и названию таблицы",
        "operationId": "getColumnsBySchemaAndTable",
        "parameters": [
          {
            "name": "sourceId",
            "in": "path",
            "description": "UUID источника данных",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "tableName",
            "in": "path",
            "description": "Имя таблицы",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schema",
            "in": "query",
            "description": "Название схемы",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Источник данных не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение полей таблицы в источнике данных по id источника и названию таблицы",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ColumnsDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/dataprovider/{sourceId}/functions": {
      "get": {
        "tags": [
          "Data provider Api",
          "dataprovider"
        ],
        "description": "Получение функций в источнике данных по id",
        "operationId": "getFunctions",
        "parameters": [
          {
            "name": "sourceId",
            "in": "path",
            "description": "UUID источника данных",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Источник данных не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода"
          },
          "200": {
            "description": "Успешное получение функций в источнике данных по id источника",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionsDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации"
          }
        }
      }
    },
    "/custom-attribute-dict/{dictValueTypeId}/dictByValueType": {
      "get": {
        "tags": [
          "Custom Attribute Dict"
        ],
        "description": "Получение списка справочников заданного типа",
        "operationId": "getAllByDictValueTypeId",
        "parameters": [
          {
            "name": "dictValueTypeId",
            "in": "path",
            "description": "Уникальный идентификатор типа значений справочника",
            "required": true,
            "schema": {
              "maxLength": 1,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Элементы не найдены",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomAttributeDictionaryShortInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/custom-attribute-dict/{dictId}/values": {
      "get": {
        "tags": [
          "Custom Attribute Dict"
        ],
        "description": "Получение значений справочника по UUID",
        "operationId": "getDictValuesByDictId",
        "parameters": [
          {
            "name": "dictId",
            "in": "path",
            "description": "Уникальный идентификатор справочника",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomAttributeDictionaryValueFullView"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/custom-attribute-dict/getWithValues": {
      "get": {
        "tags": [
          "Custom Attribute Dict"
        ],
        "description": "Получение всех справочников и их значений",
        "operationId": "getAllWithValues",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomAttributeDictionaryFullView"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/counter/diagram/{versionId}/environment/{environmentId}": {
      "get": {
        "tags": [
          "Counter",
          "counter"
        ],
        "description": "Получение счетчиков по узлам версии диаграммы на заданном окружении",
        "operationId": "getNodeCounters",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Уникальный идентификатор версии диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          },
          {
            "name": "environmentId",
            "in": "path",
            "description": "Уникальный идентификатор окружения",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Отсутствует диаграмма с заданными UUID версии и окружения",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Счетчики успешно получены",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/CounterFullViewDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Ошибки, возникшие при работе с системой сбора метрик",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/complextype/{versionId}/tree": {
      "get": {
        "tags": [
          "Complex Type",
          "Complex Type API"
        ],
        "description": "Получение комплексного типа в иерархичном виде по UUID",
        "operationId": "getTree",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии сложного типа",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос содержит неверные или несуществующие параметры в пути",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешная операция",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplexTypeGetTreeView"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/complextype/{versionId}/map": {
      "get": {
        "tags": [
          "Complex Type",
          "Complex Type API"
        ],
        "description": "Получение ассоциативного списка комплексных типов связанных с определенным versionId.Строится иерархия от versionId, который указан в запросе",
        "operationId": "getMap",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии сложного типа",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ComplexTypeMap"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/complextype/{typeId}/versions": {
      "get": {
        "tags": [
          "Complex Type",
          "Complex Type API"
        ],
        "description": "Получение списка версий комплексного типа",
        "operationId": "getComplexTypeVersions",
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное получение списка версий сложного типа данных",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComplexTypeGetFullVersionView"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/complextype/catalog": {
      "get": {
        "tags": [
          "Complex Type",
          "Complex Type API"
        ],
        "description": "Получение списка комплексного типа в режиме каталога",
        "operationId": "getAllCatalog_6",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJkaWFncmFtTmFtZSIsCgkJCSJvcGVyYXRvciI6ICJFUVVBTCIsCgkJCSJ2YWx1ZSI6ICJ0ZXN0IgoJCX0KCV0sCgkic29ydHMiOiBbCgkJewoJCQkiZGlyZWN0aW9uIjogIkFTQyIsCgkJCSJjb2x1bW5OYW1lIjogImRpYWdyYW1OYW1lIgoJCX0KCV0sCgkic2VhcmNoQnkiOiAi0JjQvNGPIiwKCSJwYWdlIjogMSwKCSJzaXplIjogMTAKfQ=="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает список комплексных типов и каталогов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplexTypeCatalogPage"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки сохранения, обновления, валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/communication/{versionId}/variables": {
      "get": {
        "tags": [
          "Communication Api",
          "communication"
        ],
        "description": "Получение списка переменных канала коммуникации по UUID",
        "operationId": "getCommunicationVariables",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Уникальный идентификатор канала коммуникации",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Версия канала коммуникации с указанным UUID не найдена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "Переменных у канала коммуникации не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное получение канала коммуникации с переменными",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationChannelWithVariablesDto"
                }
              }
            }
          }
        }
      }
    },
    "/communication/{communicationChannelId}/versions": {
      "get": {
        "tags": [
          "Communication Api",
          "communication"
        ],
        "description": "Получение списка версий канала коммуникации",
        "operationId": "getCommunicationVersions",
        "parameters": [
          {
            "name": "communicationChannelId",
            "in": "path",
            "description": "Уникальный идентификатор канала коммуникации",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное получение полного списка версий канала коммуникации",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommunicationChannelShortInfoVersionDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/communication/channels": {
      "get": {
        "tags": [
          "Communication Api",
          "communication"
        ],
        "description": "Получение списка каналов коммуникации через внешний сервис",
        "operationId": "getChannels",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрос успешно обработан. Список не содержит элементов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Отсутствуют права на выполнение данного метода",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "В запросе отсутствует или передан некорректный токен авторизации",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное получение списка каналов коммуникации",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelFullViewDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/communication/catalog": {
      "get": {
        "tags": [
          "Communication Api",
          "communication"
        ],
        "description": "Получение списка диаграмм в режиме каталога",
        "operationId": "getAllCatalog_7",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJjb21tdW5pY2F0aW9uQ2hhbm5lbE5hbWUiLAoJCQkib3BlcmF0b3IiOiAiRVFVQUwiLAoJCQkidmFsdWUiOiAidGVzdCIKCQl9CgldLAoJInNvcnRzIjogWwoJCXsKCQkJImRpcmVjdGlvbiI6ICJBU0MiLAoJCQkiY29sdW1uTmFtZSI6ICJjb21tdW5pY2F0aW9uQ2hhbm5lbE5hbWUiCgkJfQoJXSwKCSJzZWFyY2hCeSI6ICLQmNC80Y8iLAoJInBhZ2UiOiAxLAoJInNpemUiOiAxMAp9"
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки сохранения, обновления, валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Возвращает список коммуникаций и каталогов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationCatalogPage"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api-streaming-lib/list/{environmentId}": {
      "get": {
        "tags": [
          "Streaming"
        ],
        "operationId": "getFileList",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "UUID среды",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии среды с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное получение списка загруженных файлов",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Возникла ошибка при получении списка загруженных файлов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/api-docs": {
      "get": {
        "tags": [
          "open-api-controller-web-mvc"
        ],
        "operationId": "getDocumentation",
        "parameters": [
          {
            "name": "group",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/aggregates/{aggregateId}/versions": {
      "get": {
        "tags": [
          "Aggregate Api"
        ],
        "description": "Получение списка версий агрегата",
        "operationId": "getAggregateVersions",
        "parameters": [
          {
            "name": "aggregateId",
            "in": "path",
            "description": "Идентификатор агрегата",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Агрегаты не найдены"
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AggregateGetFullVersionView"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Ошибка при попытке получения списка агрегатов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/aggregates/groupingElements": {
      "get": {
        "tags": [
          "Aggregate Api"
        ],
        "description": "Получение списка всех доступных группирующих элементов",
        "operationId": "getGroupingElements",
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Агрегаты не найдены"
          },
          "500": {
            "description": "Ошибка при попытке получения списка агрегатов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/aggregates/getAllByGroupingElement": {
      "get": {
        "tags": [
          "Aggregate Api"
        ],
        "description": "Получение списка всех доступных агрегатов по группирующему элементу, если не указан параметр, возвращается полный список агрегатов",
        "operationId": "getAggregatesByGroupingElement",
        "parameters": [
          {
            "name": "groupingElement",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Группирующий элемент"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Агрегаты с таким группирующим элементом не найдены"
          },
          "200": {
            "description": "Список успешно сформирован и передан",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AggregateGetFullView"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/aggregates/catalog": {
      "get": {
        "tags": [
          "Aggregate Api"
        ],
        "description": "Получение списка агрегатов в режиме каталога",
        "operationId": "getAllCatalog_9",
        "parameters": [
          {
            "name": "searchRequest",
            "in": "query",
            "description": "Объект для задания параметров фильтра",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "ewoJImZpbHRlcnMiOiBbCgkJewoJCQkiY29sdW1uTmFtZSI6ICJhZ2dyZWdhdGVOYW1lIiwKCQkJIm9wZXJhdG9yIjogIkVRVUFMIiwKCQkJInZhbHVlIjogInRlc3QiCgkJfQoJXSwKCSJzb3J0cyI6IFsKCQl7CgkJCSJkaXJlY3Rpb24iOiAiQVNDIiwKCQkJImNvbHVtbk5hbWUiOiAiYWdncmVnYXRlTmFtZSIKCQl9CgldLAoJInNlYXJjaEJ5IjogItCY0LzRjyIsCgkicGFnZSI6IDEsCgkic2l6ZSI6IDEwCn0="
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "Запрошенный объект отсутствует, либо был удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagramDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Применяется в случае ошибки сохранения, обновления, валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает список агрегатов и каталогов",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregateCatalogPage"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/user-jar/{jarId}": {
      "delete": {
        "tags": [
          "User jar"
        ],
        "description": "Удаление jar-файла по его uuid",
        "operationId": "deleteJarFile",
        "parameters": [
          {
            "name": "jarId",
            "in": "path",
            "description": "Уникальный идентификатор jar-файла",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Jar-файл не найден",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное удаление",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/user-function/delete": {
      "delete": {
        "tags": [
          "User Functions"
        ],
        "description": "Удаление пользовательских функций",
        "operationId": "delete",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Список id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное удаление пользовательских функций",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/scripts/{versionId}": {
      "delete": {
        "tags": [
          "Script Api"
        ],
        "description": "Удаление скрипта по уникальному идентификатору версии",
        "operationId": "remove_1",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "Идентификатор версии скрипта",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Ошибка в передаваемых данных",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка при попытке удаления",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Скрипт удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/locking/{lockingId}": {
      "delete": {
        "tags": [
          "Locking Api",
          "locking"
        ],
        "description": "Снятие блокировки с объекта по UUID блокировки",
        "operationId": "delete_5",
        "parameters": [
          {
            "name": "lockingId",
            "in": "path",
            "description": "Уникальный идентификатор объекта",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии блокировки с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "500": {
            "description": "Ошибка возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешное снятие блокировки с объекта",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/{versionId}/removeTemplate": {
      "delete": {
        "tags": [
          "diagrams",
          "Diagram"
        ],
        "description": "Удаление временной версии диаграммы по UUID",
        "operationId": "removeTemplate",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии диаграммы с таким UUID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Применяется в случае ошибки при попытке удаления объекта",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Ошибка возникшая при попытке доступа к данным БД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Возвращает структуры ответа с успехом операции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagrams/links/{linkId}": {
      "delete": {
        "tags": [
          "Node",
          "diagrams"
        ],
        "description": "Удаление ребра диаграммы по UUID",
        "operationId": "deleteLinkById",
        "parameters": [
          {
            "name": "linkId",
            "in": "path",
            "description": "Уникальный идентификатор ребра диаграммы",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос успешно обработан. Ребро диаграммы не найдено",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          },
          "200": {
            "description": "Успешное удаление ребра диаграммы",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/diagram/batch/deleteMappingKey": {
      "delete": {
        "tags": [
          "diagram",
          "Diagram"
        ],
        "description": "Удаление маппигов ключей по их id",
        "operationId": "deleteMappingKeys",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Список id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Успешное удаление маппигов ключей id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка аутентификации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка авторизации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/deploy/delete": {
      "delete": {
        "tags": [
          "Deploy"
        ],
        "description": "Удаление деплоев",
        "operationId": "deleteDeploys",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Список идентификаторов деплоя",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Ошибка валидации",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка аутентификациии",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Деплои успешно удалены",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/complextype/{versionId}/attributes/{attributeId}": {
      "delete": {
        "tags": [
          "Attribute",
          "Complex Type API"
        ],
        "description": "Удаление атрибута комплексного типа",
        "operationId": "deleteAttribute",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "UUID версии сложного типа",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string"
            }
          },
          {
            "name": "attributeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Запрос содержит неверные или несуществующие параметры в пути",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Ошибка при обработке запроса на стороне СУБД",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Успешная операция",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/delete": {
      "delete": {
        "tags": [
          "catalog",
          "Catalog"
        ],
        "description": "Удаление каталогов",
        "operationId": "delete_12",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Список идентификаторов каталогов для удаления",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "Каталоги удалена",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Запрос не обработан",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {}
            }
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api-streaming-lib/delete/{environmentId}": {
      "delete": {
        "tags": [
          "Streaming"
        ],
        "operationId": "deleteFile",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "UUID среды",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 36,
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "Имя файла",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Ошибка, возникающая при отсутсвии файла",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Ошибка, возникающая при отсутствии доступа к вызываемому API",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "500": {
            "description": "Возникла ошибка при удалении файла",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "200": {
            "description": "Файл успешно удален",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Ошибка, возникающая при неверной авторазиции",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseDto"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserFunctionUpdateDto": {
        "required": [
          "objectName"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "resultType": {
            "type": "string",
            "description": "Тип возвращаемого пользовательской функцией значения",
            "example": "Дробный"
          },
          "description": {
            "type": "string",
            "description": "Описание пользовательской функции",
            "example": "Описание"
          }
        },
        "description": "Объект для обновления полей функции"
      },
      "ResponseDto": {
        "required": [
          "httpCode",
          "module",
          "operation",
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "timeStamp": {
            "type": "string",
            "description": "Время ошибки",
            "format": "date-time"
          },
          "uuid": {
            "type": "string",
            "description": "uuid присвоенный при работе с объектом",
            "format": "uuid",
            "example": "d8d6ba76-ea3f-4d9b-b7b7-a819ef0f5549"
          },
          "httpCode": {
            "type": "integer",
            "description": "Дублированный http код",
            "format": "int32",
            "example": 200
          },
          "module": {
            "type": "string",
            "description": "Модуль, в котором производилось действие",
            "example": "diagram"
          },
          "operation": {
            "type": "string",
            "description": "Совершаемая операция",
            "example": "save",
            "enum": [
              "update",
              "save",
              "delete",
              "deploy",
              "validate"
            ]
          },
          "message": {
            "type": "string",
            "description": "Trace ошибки",
            "example": "Unable to find a model that matches key ModelKey"
          },
          "validationPayload": {
            "type": "object",
            "description": "Объект с ошибкой"
          }
        }
      },
      "TestCreate": {
        "required": [
          "diagramId",
          "testName"
        ],
        "type": "object",
        "properties": {
          "testName": {
            "type": "string",
            "description": "Имя теста",
            "example": "test_01"
          },
          "testFile": {
            "type": "string",
            "description": "Путь к файлу с данными для теста",
            "example": "/path/to/file"
          },
          "testDescription": {
            "type": "string",
            "description": "Описание теста",
            "example": "test description"
          },
          "diagramId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "timeout": {
            "type": "integer",
            "description": "Таймаут в секундах",
            "format": "int32",
            "example": 10
          }
        }
      },
      "ExternalServiceHeaderFullViewDto": {
        "required": [
          "headerName",
          "headerValue"
        ],
        "type": "object",
        "properties": {
          "headerId": {
            "maxLength": 36,
            "type": "string",
            "description": "UUID заголовка",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "headerName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Имя заголовка",
            "example": "Cookie"
          },
          "headerValue": {
            "type": "string",
            "description": "Значение заголовка",
            "example": "Value"
          }
        },
        "description": "Список заголовков внешнего сервиса"
      },
      "ExternalServiceSettingsFullViewDto": {
        "required": [
          "endpoint",
          "environmentSettingsId",
          "host",
          "port",
          "serviceSettingsId",
          "serviceType"
        ],
        "type": "object",
        "properties": {
          "environmentSettingsId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "host": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Имя хоста",
            "example": "192.168.0.1"
          },
          "serviceType": {
            "type": "string",
            "description": "Тип обмена",
            "example": "HTTPS",
            "enum": [
              "HTTP",
              "HTTPS"
            ]
          },
          "endpoint": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Endpoint внешнего сервиса",
            "example": "diagram/node/{nodeId}"
          },
          "port": {
            "maximum": 65535,
            "maxLength": 5,
            "type": "integer",
            "description": "Порт внешнего сервиса",
            "format": "int32",
            "example": 8080
          },
          "secondAttemptsCnt": {
            "maximum": 10,
            "type": "integer",
            "description": "Количество повторных попыток отправки сообщения",
            "format": "int32",
            "example": 3
          },
          "transactionsPerSecond": {
            "type": "integer",
            "description": "Частота транзакций",
            "format": "int32",
            "example": 1
          },
          "interval": {
            "maxLength": 4,
            "type": "integer",
            "description": "Интервал между повторными попытками отправки в секундах",
            "format": "int32",
            "example": 5
          },
          "timeout": {
            "maxLength": 4,
            "type": "integer",
            "description": "Максимальное время ожидания ответа в секундах",
            "format": "int32",
            "example": 5
          },
          "keycloakClientId": {
            "maxLength": 50,
            "type": "string",
            "description": "Keycloak client",
            "example": "decision.frontend"
          },
          "keycloakClientSecret": {
            "maxLength": 100,
            "type": "string",
            "description": "Keycloak Client Secret",
            "example": "secret"
          },
          "keycloakUser": {
            "maxLength": 32,
            "type": "string",
            "description": "Keycloak User",
            "example": "userName"
          },
          "keycloakPassword": {
            "maxLength": 100,
            "type": "string",
            "description": "Keycloak password",
            "example": "password"
          },
          "keycloakGrantType": {
            "type": "string",
            "description": "Тип GrantType",
            "enum": [
              "CLIENT_CREDENTIALS",
              "PASSWORD"
            ]
          },
          "keycloakServer": {
            "maxLength": 200,
            "type": "string",
            "description": "Сервер Keycloak",
            "example": "https://auth.k8s.datasapience.ru/auth"
          },
          "keycloakRealm": {
            "maxLength": 50,
            "type": "string",
            "description": "Realm Keycloak",
            "example": "dev"
          },
          "isKeyCloakAuth": {
            "type": "boolean",
            "description": "Использовать авторизацию при помощи Keycloak",
            "example": false
          },
          "serviceSettingsId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор настроек внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Список настроек подключения внешнего сервиса"
      },
      "ExternalServiceUpdateDto": {
        "required": [
          "objectName",
          "protocol",
          "syncType"
        ],
        "type": "object",
        "properties": {
          "isAvailableInProperties": {
            "type": "boolean",
            "description": "Флаг того, что характеристики ВС будут доступны в __PROPERTIES__",
            "example": true
          },
          "batchFlag": {
            "type": "boolean",
            "description": "Признак пакетного взаимодействия",
            "example": false
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание внешнего сервиса",
            "example": "Внешний сервис данных"
          },
          "fileFormat": {
            "type": "string",
            "description": "Формат сообщения",
            "example": "JSON",
            "enum": [
              "JSON",
              "XML"
            ]
          },
          "method": {
            "type": "string",
            "description": "Используемый метод взаимодействия",
            "example": "GET",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH"
            ]
          },
          "protocol": {
            "type": "string",
            "description": "Протокол доступа",
            "example": "REST",
            "enum": [
              "REST",
              "SOAP"
            ]
          },
          "syncType": {
            "type": "string",
            "description": "Тип взаимодействия",
            "example": "SYNC",
            "enum": [
              "SYNC",
              "ASYNC"
            ]
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "body": {
            "type": "string",
            "description": "Тело запроса",
            "example": "{request_id: {requestid}}"
          },
          "serviceSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceSettingsFullViewDto"
            }
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceHeaderFullViewDto"
            }
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceVariableFullViewDto"
            }
          }
        },
        "description": "Объект для обновления внешнего сервиса"
      },
      "ExternalServiceVariableFullViewDto": {
        "required": [
          "isArray",
          "isComplex",
          "variableName"
        ],
        "type": "object",
        "properties": {
          "variableName": {
            "type": "string",
            "description": "Имя переменной",
            "example": "имя_переменной"
          },
          "primitiveTypeId": {
            "type": "string",
            "description": "Id простого типа переменной",
            "example": "1"
          },
          "complexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id комплексного типа переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "variableType": {
            "type": "string",
            "description": "Тип параметра (входной, выходной, рассчитываемый)",
            "enum": [
              "IN",
              "OUT",
              "CALCULATED",
              "ERROR"
            ]
          },
          "isArray": {
            "type": "boolean",
            "description": "Является ли переменная массивом",
            "example": false
          },
          "isComplex": {
            "type": "boolean",
            "description": "Является ли переменная комплексным типом",
            "example": false
          },
          "sourcePath": {
            "type": "string",
            "description": "Путь к значению переменной в структуре ответа сервиса",
            "example": "/"
          },
          "expression": {
            "type": "string",
            "description": "Выражение для рассчета переменной",
            "example": "ln(e)"
          },
          "functionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "variableId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "childVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceVariableFullViewDto"
            }
          }
        },
        "description": "Список переменных внешнего сервиса"
      },
      "ExternalServiceUpdateUserVersionDto": {
        "type": "object",
        "properties": {
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          }
        },
        "description": "Объект для обновления внешнего сервиса"
      },
      "ScriptUpdateUserVersion": {
        "type": "object",
        "properties": {
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          }
        },
        "description": "Объект для обновления версии скрипта"
      },
      "PythonUpdate": {
        "required": [
          "objectName",
          "scriptId",
          "scriptText",
          "scriptType",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "scriptText": {
            "type": "string",
            "description": "Текст скрипта",
            "example": "Текст скрипта"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание скрипта",
            "example": "описание скрипта"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptVariableFullView"
            }
          },
          "scriptType": {
            "type": "string",
            "description": "Язык скрипта",
            "enum": [
              "GROOVY",
              "PYTHON"
            ]
          },
          "pythonEnvironmentVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор версии окружения python в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "scriptId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор скрипта в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии скрипта в формате UUID",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          }
        },
        "description": "Объект для обновления скрипта"
      },
      "ScriptVariableFullView": {
        "required": [
          "arrayFlag",
          "variableName",
          "variableType"
        ],
        "type": "object",
        "properties": {
          "variableName": {
            "type": "string",
            "description": "Имя переменной",
            "example": "имя_переменной"
          },
          "primitiveTypeId": {
            "type": "integer",
            "description": "Id простого типа переменной",
            "format": "int32",
            "example": 1
          },
          "complexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id комплексного типа переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "variableType": {
            "type": "string",
            "description": "Тип параметра (входной, выходной)",
            "enum": [
              "IN",
              "OUT"
            ]
          },
          "arrayFlag": {
            "type": "boolean",
            "description": "Является ли переменная массивом",
            "example": false
          },
          "variableId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          }
        },
        "description": "Список переменных скрипта канала коммуникации"
      },
      "ScriptFullView": {
        "required": [
          "changeDt",
          "createDt",
          "objectName",
          "scriptId",
          "scriptText",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "scriptText": {
            "type": "string",
            "description": "Текст скрипта",
            "example": "Текст скрипта"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание скрипта",
            "example": "описание скрипта"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "createByUser": {
            "type": "string"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptVariableFullView"
            }
          },
          "scriptId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор скрипта в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии скрипта в формате UUID",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          }
        }
      },
      "GroovyUpdate": {
        "required": [
          "objectName",
          "scriptId",
          "scriptText",
          "scriptType",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "scriptText": {
            "type": "string",
            "description": "Текст скрипта",
            "example": "Текст скрипта"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание скрипта",
            "example": "описание скрипта"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptVariableFullView"
            }
          },
          "scriptType": {
            "type": "string",
            "description": "Язык скрипта",
            "enum": [
              "GROOVY",
              "PYTHON"
            ]
          },
          "scriptId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор скрипта в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии скрипта в формате UUID",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          }
        },
        "description": "Объект для обновления скрипта"
      },
      "PythonEnvironmentSettingsWithIdDto": {
        "required": [
          "environmentId",
          "id",
          "limitsCpu",
          "limitsMemory",
          "requestsCpu",
          "requestsMemory"
        ],
        "type": "object",
        "properties": {
          "limitsCpu": {
            "type": "number",
            "description": "Верхняя граница количество ядер",
            "format": "double",
            "example": 0.1
          },
          "requestsCpu": {
            "type": "number",
            "description": "Необходимое количество ядер",
            "format": "double",
            "example": 0.1
          },
          "limitsMemory": {
            "type": "integer",
            "description": "Верхняя граница количество памяти",
            "format": "int32",
            "example": 1000
          },
          "requestsMemory": {
            "type": "integer",
            "description": "Необходимое количество ядер",
            "format": "int32",
            "example": 500
          },
          "environmentId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор окружения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор настроек kafka в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Список настроек окружения питона по окружению"
      },
      "PythonEnvironmentUpdateDto": {
        "required": [
          "id",
          "name",
          "pythonVersionId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя окружения python",
            "example": "питон"
          },
          "pythonVersionId": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Идентификатор версии python",
            "example": "597e4cc3-98d2-42a6-9209-e803417fcba7"
          },
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор окружения python в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "type": "string"
          },
          "requirementsTxt": {
            "type": "string",
            "description": "Текст файла requirements.txt",
            "example": "pandas==0.2.0"
          },
          "pythonEnvironmentSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PythonEnvironmentSettingsWithIdDto"
            }
          }
        }
      },
      "RuleTypeUpdateDto": {
        "required": [
          "displayName",
          "typeName"
        ],
        "type": "object",
        "properties": {
          "typeName": {
            "maxLength": 100,
            "type": "string",
            "description": "Системное имя в UTF-8",
            "example": "Name object"
          },
          "displayName": {
            "maxLength": 100,
            "type": "string",
            "description": "Имя для отображения на странице",
            "example": "Имя объекта"
          }
        },
        "description": "Объект для обновления типа правила"
      },
      "Protocol": {
        "type": "object",
        "description": "Протокол",
        "example": "HTTPS"
      },
      "RestSourceSettingsFullViewDto": {
        "required": [
          "environmentId",
          "host",
          "port",
          "protocol",
          "restSourceSettingsId"
        ],
        "type": "object",
        "properties": {
          "environmentId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор настроек окружения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "host": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Имя хоста",
            "example": "192.168.0.1"
          },
          "port": {
            "maximum": 65535,
            "maxLength": 5,
            "type": "integer",
            "description": "Порт внешнего сервиса",
            "format": "int32",
            "example": 8080
          },
          "protocol": {
            "$ref": "#/components/schemas/Protocol"
          },
          "restSourceSettingsId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор настроек REST источника в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Список настроек подключения внешнего сервиса"
      },
      "RestSourceUpdateDto": {
        "required": [
          "objectName"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание REST источника",
            "example": "REST источник"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "restSourceSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestSourceSettingsFullViewDto"
            }
          }
        },
        "description": "Объект для обновления REST источника"
      },
      "OfferUpdateDto": {
        "required": [
          "objectName",
          "offerComplexTypeVersionId",
          "scriptId",
          "scriptName",
          "scriptVersionId"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "scriptVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор версии скрипта, связанного с шаблоном предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "scriptName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя скрипта, связанного с шаблоном предложения в формате UUID 4",
            "example": "Код создания предложения Автокредит"
          },
          "scriptId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор скрипта, связанного с шаблоном предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "offerComplexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id комплексного типа предложения",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "offerVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferVariableFullViewDto"
            }
          },
          "versionId": {
            "type": "string"
          }
        },
        "description": "Объект для обновления шаблона предложения"
      },
      "OfferVariableFullViewDto": {
        "required": [
          "arrayFlag",
          "dataSourceType",
          "id",
          "mandatoryFlag",
          "scriptVariableName",
          "variableName"
        ],
        "type": "object",
        "properties": {
          "variableName": {
            "type": "string",
            "description": "Имя переменной",
            "example": "имя_переменной"
          },
          "scriptVariableName": {
            "type": "string",
            "description": "Имя переменной скрипта",
            "example": "имя_переменной_скрипта"
          },
          "primitiveTypeId": {
            "type": "string",
            "description": "Id простого типа переменной",
            "example": "1"
          },
          "complexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id комплексного типа переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "arrayFlag": {
            "type": "boolean",
            "description": "Является ли переменная массивом",
            "example": false
          },
          "dataSourceType": {
            "type": "string",
            "description": "Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)",
            "enum": [
              "USER_INPUT",
              "DICTIONARY",
              "DIAGRAM_ELEMENT"
            ]
          },
          "minValue": {
            "type": "number",
            "description": "Минимальное значение переменной",
            "format": "double",
            "example": 5.0
          },
          "maxValue": {
            "type": "number",
            "description": "Максимальное значение переменной",
            "format": "double",
            "example": 15.0
          },
          "maxSize": {
            "type": "integer",
            "description": "Максимальная длина переменной",
            "format": "int32",
            "example": 100
          },
          "dictionaryId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id справочника, в котором находятся допустимые значения переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "dynamicListType": {
            "type": "string",
            "description": "Тип отображения динамического списка",
            "enum": [
              "RADIO_BUTTON",
              "DROP_DOWN_LIST"
            ]
          },
          "mandatoryFlag": {
            "type": "boolean",
            "description": "Является ли переменная обязательной",
            "example": false
          },
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Id переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          }
        },
        "description": "Список переменных шаблона предложения"
      },
      "OfferUpdateUserVersionDto": {
        "type": "object",
        "properties": {
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          }
        },
        "description": "Объект для обновления шаблона предложения"
      },
      "KafkaAdditionalSettingsWithIdDto": {
        "required": [
          "propertyName",
          "propertyValue"
        ],
        "type": "object",
        "properties": {
          "propertyName": {
            "maxLength": 100,
            "type": "string",
            "description": "Наименование параметра",
            "format": "string",
            "example": "kafka.bootstrap.servers"
          },
          "propertyValue": {
            "maxLength": 1000,
            "type": "string",
            "description": "Значение параметра",
            "format": "string",
            "example": "kafka-bootstrap.server.ru"
          },
          "propertySecure": {
            "type": "boolean",
            "description": "Признак конфиденциальности параметра",
            "example": false
          },
          "kafkaAdditionalId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор дополнительных параметров Kafka в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Список дополнительных настроек Kafka"
      },
      "KafkaSettingsWithIdDto": {
        "required": [
          "environmentId",
          "id"
        ],
        "type": "object",
        "properties": {
          "bootstrapServers": {
            "type": "string",
            "description": "bootstrapServers kafka",
            "example": "bootstrapServer1:9092,bootstrapServer2:9092"
          },
          "environmentId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор окружения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор настроек kafka в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "kafkaAdditionalSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KafkaAdditionalSettingsWithIdDto"
            }
          }
        },
        "description": "Список настроек Kafka по окружению"
      },
      "KafkaUpdateDto": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор kafka в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя kafka",
            "example": "local kafka"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание kafka",
            "example": "Kafka для тестирования"
          },
          "kafkaSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KafkaSettingsWithIdDto"
            }
          }
        }
      },
      "EnvironmentUpdateDto": {
        "required": [
          "environmentName",
          "integrationPlatformEnvSettings",
          "kafkaEnvSettings",
          "stateStoreEnvSettings",
          "streamingPlatformEnvSettings"
        ],
        "type": "object",
        "properties": {
          "environmentName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "название среды развертывания",
            "example": "prod"
          },
          "integrationPlatformEnvSettings": {
            "$ref": "#/components/schemas/IntegrationPlatformEnvironmentFullViewDto"
          },
          "stateStoreEnvSettings": {
            "$ref": "#/components/schemas/StateStoreEnvironmentFullViewDto"
          },
          "streamingPlatformEnvSettings": {
            "$ref": "#/components/schemas/StreamingPlatformEnvironmentFullViewDto"
          },
          "defaultFlag": {
            "type": "boolean",
            "description": "Флаг дефолтного окружения",
            "example": true
          },
          "kafkaEnvSettings": {
            "$ref": "#/components/schemas/KafkaEnvironmentUpdateDto"
          }
        },
        "description": "Объект для обновления полей среды развертывания"
      },
      "IntegrationPlatformEnvironmentFullViewDto": {
        "required": [
          "integrationUrl"
        ],
        "type": "object",
        "properties": {
          "integrationUrl": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Url модуля интеграции",
            "example": "http://localhost:8081"
          }
        },
        "description": "Параметры модуля интеграции"
      },
      "KafkaEnvironmentUpdateDto": {
        "required": [
          "kafkaUrl"
        ],
        "type": "object",
        "properties": {
          "kafkaUrl": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Url kafka",
            "example": "http://localhost:29092"
          },
          "kafkaEnvironmentAdditionalSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KafkaAdditionalSettingsWithIdDto"
            }
          }
        },
        "description": "Параметры Kafka"
      },
      "StateStoreEnvironmentFullViewDto": {
        "required": [
          "stateStoreAdditionalProperties",
          "stateStorePassword",
          "stateStoreSchema",
          "stateStoreServerName",
          "stateStoreServerPort",
          "stateStoreServerType",
          "stateStoreUsername"
        ],
        "type": "object",
        "properties": {
          "stateStoreUsername": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Имя пользователя базы данных state store агрегатов",
            "example": "decision"
          },
          "stateStorePassword": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Пароль пользователя базы данных state store агрегатов",
            "example": "decision"
          },
          "stateStoreSchema": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Схема базы данных state store агрегатов",
            "example": "decision"
          },
          "stateStoreServerName": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Hostname базы данных state store агрегатов",
            "example": "example.com"
          },
          "stateStoreServerPort": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Hostname базы данных state store агрегатов",
            "example": "example.com"
          },
          "stateStoreAdditionalProperties": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Допольнительные параметры подключения",
            "example": "/postgres"
          },
          "stateStoreServerType": {
            "type": "string",
            "description": "Тип СУБД кэша агрегатов",
            "example": "POSTGRESQL",
            "enum": [
              "POSTGRESQL"
            ]
          }
        },
        "description": "Параметры базы данных state store агрегатов"
      },
      "StreamingPlatformEnvironmentFullViewDto": {
        "required": [
          "streamingPlatformUrl"
        ],
        "type": "object",
        "properties": {
          "streamingPlatformUsername": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Имя пользователя модуля исполнения",
            "example": "decision"
          },
          "streamingPlatformPassword": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Пароль пользователя модуля исполнения",
            "example": "decision"
          },
          "streamingPlatformUrl": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Url платформы",
            "example": "http://localhost:8083"
          }
        },
        "description": "Параметры модуля исполнения"
      },
      "DiagramMetaInfo": {
        "type": "object",
        "properties": {
          "nodeCounter": {
            "type": "integer",
            "description": "Счетчик узла",
            "format": "int32"
          }
        },
        "description": "Объект метаинформации диаграммы"
      },
      "DiagramUpdate": {
        "required": [
          "diagramDescription",
          "errorResponseFlag",
          "objectName"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "diagramDescription": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "description": "Описание диаграммы",
            "example": "Диаграмма обладает функционалом и выполняет..."
          },
          "errorResponseFlag": {
            "type": "boolean",
            "description": "Флаг обработки аварийного ответа",
            "example": true
          },
          "metaInfo": {
            "$ref": "#/components/schemas/DiagramMetaInfo"
          }
        },
        "description": "Объект для обновления полей диаграммы"
      },
      "DiagramUpdateUserVersion": {
        "required": [
          "versionName"
        ],
        "type": "object",
        "properties": {
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          }
        },
        "description": "Объект для обновления полей диаграммы"
      },
      "Jwt": {
        "type": "object",
        "properties": {
          "tokenValue": {
            "type": "string"
          },
          "issuedAt": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "claims": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "id": {
            "type": "string"
          },
          "notBefore": {
            "type": "string",
            "format": "date-time"
          },
          "subject": {
            "type": "string"
          },
          "audience": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "issuer": {
            "type": "string",
            "format": "url"
          }
        }
      },
      "DiagramInOutParameterFullViewDto": {
        "required": [
          "arrayFlag",
          "complexFlag",
          "dictFlag",
          "parameterName",
          "parameterType",
          "typeId"
        ],
        "type": "object",
        "properties": {
          "parameterVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии входного/выходного параметра",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "parameterId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор входного/выходного параметра",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "parameterName": {
            "maxLength": 40,
            "type": "string",
            "description": "Имя входного/выходного параметра",
            "example": "Client"
          },
          "dictName": {
            "maxLength": 100,
            "type": "string",
            "description": "Наименование справочника",
            "example": "Справочник №1"
          },
          "typeId": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "description": "Уникальный идентификатор примитивного или пользовательского типа входного/выходного параметра.",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "dictId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор справочника",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "arrayFlag": {
            "type": "boolean",
            "description": "Признак массива (true)",
            "example": false
          },
          "complexFlag": {
            "type": "boolean",
            "description": "Признак комплексного типа (true)",
            "example": false
          },
          "dictFlag": {
            "type": "boolean",
            "description": "Признак справочника кастомных типов (true)",
            "example": false
          },
          "parameterType": {
            "type": "string",
            "description": "Тип параметра (входной, выходной)",
            "enum": [
              "IN",
              "OUT",
              "IN_OUT"
            ]
          },
          "defaultValue": {
            "type": "string",
            "description": "Значение по умолчанию",
            "example": "12.89"
          },
          "functionIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "Множество идентификаторов пользовательских функций, использующихся в поле аварийного ответа",
            "example": [
              "f8df6383-c59e-45bb-bc0e-1fe052fe1a68"
            ],
            "items": {
              "type": "string",
              "description": "Множество идентификаторов пользовательских функций, использующихся в поле аварийного ответа",
              "example": "[\"f8df6383-c59e-45bb-bc0e-1fe052fe1a68\"]"
            }
          },
          "metaInfo": {
            "$ref": "#/components/schemas/InOutParamMetaInfo"
          }
        }
      },
      "DiagramInnerVariableFullViewDto": {
        "required": [
          "arrayFlag",
          "complexFlag",
          "dictFlag",
          "parameterName",
          "typeId"
        ],
        "type": "object",
        "properties": {
          "parameterVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии входного/выходного параметра",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "parameterId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор входного/выходного параметра",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "parameterName": {
            "maxLength": 40,
            "type": "string",
            "description": "Имя входного/выходного параметра",
            "example": "Client"
          },
          "dictName": {
            "maxLength": 100,
            "type": "string",
            "description": "Наименование справочника",
            "example": "Справочник №1"
          },
          "typeId": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "description": "Уникальный идентификатор примитивного или пользовательского типа входного/выходного параметра.",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "dictId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор справочника",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "arrayFlag": {
            "type": "boolean",
            "description": "Признак массива (true)",
            "example": false
          },
          "complexFlag": {
            "type": "boolean",
            "description": "Признак комплексного типа (true)",
            "example": false
          },
          "dictFlag": {
            "type": "boolean",
            "description": "Признак справочника кастомных типов (true)",
            "example": false
          }
        }
      },
      "DiagramParameterDto": {
        "type": "object",
        "properties": {
          "inOutParameters": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagramInOutParameterFullViewDto"
            }
          },
          "innerVariables": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagramInnerVariableFullViewDto"
            }
          }
        }
      },
      "InOutParamMetaInfo": {
        "maxLength": 150,
        "type": "object",
        "properties": {
          "orderNum": {
            "type": "integer",
            "description": "Порядковый номер записи в таблице интерфейса входные/выходные перменные. Вспомогательное поле",
            "format": "int32"
          },
          "isExecuteStatus": {
            "type": "boolean",
            "description": "Является ли переменная статусом выполнения диаграммы. Вспомогательное поле"
          }
        },
        "description": "JSON-настройки отображения"
      },
      "DiagramValidateResponseDto": {
        "required": [
          "httpCode",
          "module",
          "operation",
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "timeStamp": {
            "type": "string",
            "description": "Время ошибки",
            "format": "date-time"
          },
          "uuid": {
            "type": "string",
            "description": "uuid присвоенный при работе с объектом",
            "format": "uuid",
            "example": "d8d6ba76-ea3f-4d9b-b7b7-a819ef0f5549"
          },
          "httpCode": {
            "type": "integer",
            "description": "Дублированный http код",
            "format": "int32",
            "example": 200
          },
          "module": {
            "type": "string",
            "description": "Модуль, в котором производилось действие",
            "example": "diagram"
          },
          "operation": {
            "type": "string",
            "description": "Совершаемая операция",
            "example": "save",
            "enum": [
              "update",
              "save",
              "delete",
              "deploy",
              "validate"
            ]
          },
          "message": {
            "type": "string",
            "description": "Trace ошибки",
            "example": "Unable to find a model that matches key ModelKey"
          },
          "validationPayload": {
            "type": "object",
            "description": "Объект с ошибкой"
          },
          "invalidNodeIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DiagramRename": {
        "required": [
          "objectName"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          }
        },
        "description": "Объект для обновления имени диаграммы"
      },
      "AdditionalParameters": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "isValueFromDict": {
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/SimpleVariableProperties"
          }
        }
      },
      "AggregateCompute": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "groupingElements": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupingElementsMapping"
                }
              },
              "outputVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AggregateComputeOutputVariableMapping"
                }
              },
              "retentionTimeField": {
                "type": "string"
              },
              "retentionType": {
                "type": "string",
                "enum": [
                  "event",
                  "process"
                ]
              },
              "retentionTimeValue": {
                "type": "integer",
                "format": "int32"
              },
              "retentionTimeUnit": {
                "type": "string",
                "enum": [
                  "ms",
                  "s",
                  "m",
                  "h",
                  "d"
                ]
              },
              "watermarkType": {
                "type": "string",
                "enum": [
                  "monotonous",
                  "bounded_unordered",
                  "periodic",
                  "periodic_bounded_unordered"
                ]
              },
              "duration": {
                "type": "integer",
                "format": "int32"
              },
              "coefficient": {
                "type": "number",
                "format": "double"
              }
            }
          }
        ]
      },
      "AggregateComputeOutputVariableMapping": {
        "required": [
          "isArray",
          "isComplex"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "aggregate": {
            "$ref": "#/components/schemas/AggregateComputeProperties"
          }
        }
      },
      "AggregateComputeProperties": {
        "type": "object",
        "properties": {
          "aggregateId": {
            "type": "string"
          },
          "versionId": {
            "type": "string"
          },
          "aggregateName": {
            "type": "string"
          },
          "aggregateVariableType": {
            "type": "string"
          },
          "diagramAggregateElement": {
            "type": "string"
          },
          "aggregateElementTypeId": {
            "type": "string"
          },
          "isUsedInDiagram": {
            "type": "boolean"
          },
          "aggregateFunction": {
            "type": "string",
            "enum": [
              "AggAverage",
              "AggCount",
              "AggCountDistinct",
              "AggCountNonNull",
              "AggFirstValue",
              "AggLastValue",
              "AggMax",
              "AggMin",
              "AggMode",
              "AggSum",
              "AggStd"
            ]
          }
        }
      },
      "AggregateReadOutputVariableMapping": {
        "required": [
          "isArray",
          "isComplex"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "aggregate": {
            "$ref": "#/components/schemas/AggregateReadingProperties"
          }
        }
      },
      "AggregateReading": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "groupingElements": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupingElementsMapping"
                }
              },
              "outputVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AggregateReadOutputVariableMapping"
                }
              }
            }
          }
        ]
      },
      "AggregateReadingProperties": {
        "type": "object",
        "properties": {
          "aggregateId": {
            "type": "string"
          },
          "versionId": {
            "type": "string"
          },
          "aggregateName": {
            "type": "string"
          },
          "aggregateVariableType": {
            "type": "string"
          },
          "aggregateDescription": {
            "type": "string"
          }
        }
      },
      "AggregationNode": {
        "required": [
          "mappings",
          "partition_by",
          "retention_type",
          "window_interval"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "partition_by": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "retention_type": {
                "type": "string",
                "enum": [
                  "event",
                  "process"
                ]
              },
              "window_interval": {
                "$ref": "#/components/schemas/TimeInterval"
              },
              "time_attribute": {
                "$ref": "#/components/schemas/TimeAttribute"
              },
              "watermark": {
                "$ref": "#/components/schemas/Watermark"
              },
              "mappings": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FlinkAggregate"
                }
              }
            }
          }
        ]
      },
      "ArrayConfig": {
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string"
          }
        }
      },
      "Branch": {
        "type": "object",
        "properties": {
          "rowKey": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Bucket": {
        "type": "object",
        "properties": {
          "check_interval": {
            "type": "string"
          },
          "partition_column_name": {
            "type": "string"
          },
          "assigner": {
            "type": "string",
            "enum": [
              "base_path",
              "date_time",
              "date_time_partitioned"
            ]
          },
          "date_time_pattern": {
            "type": "string"
          }
        }
      },
      "Bulk": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          }
        }
      },
      "CalculateExpression": {
        "type": "object",
        "properties": {
          "calculateExpressionValue": {
            "type": "string"
          },
          "functionIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CalculateNodeVariable": {
        "required": [
          "isArray",
          "isComplex"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "expression": {
            "$ref": "#/components/schemas/CalculateExpression"
          }
        }
      },
      "Calculates": {
        "required": [
          "calculate"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "calculate": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CalculateNodeVariable"
                }
              }
            }
          }
        ]
      },
      "Catalog": {
        "required": [
          "table",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "hadoop",
              "hive"
            ]
          },
          "warehouse": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "table": {
            "$ref": "#/components/schemas/Table"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          }
        }
      },
      "Cdc": {
        "required": [
          "postgres"
        ],
        "type": "object",
        "properties": {
          "postgres": {
            "$ref": "#/components/schemas/Postgres"
          }
        }
      },
      "CdcApplyMultiTableNode": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "jdbc_connection_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "cdc": {
                "$ref": "#/components/schemas/CdcMultiTable"
              },
              "execution_options": {
                "$ref": "#/components/schemas/ExecutionOptions"
              }
            }
          }
        ]
      },
      "CdcApplyNode": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "jdbc_connection_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "cdc": {
                "$ref": "#/components/schemas/CdcSimple"
              },
              "execution_options": {
                "$ref": "#/components/schemas/ExecutionOptions"
              },
              "jdbc": {
                "$ref": "#/components/schemas/JdbcSimple"
              }
            }
          }
        ]
      },
      "CdcMongoDbNode": {
        "required": [
          "connection_uuid",
          "table_name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "connection_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "table_name": {
                "type": "string"
              },
              "timezone": {
                "type": "string"
              },
              "debezium": {
                "$ref": "#/components/schemas/Debezium"
              }
            }
          }
        ]
      },
      "CdcMsSqlNode": {
        "required": [
          "jdbc_connection_uuid",
          "table_name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "jdbc_connection_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "timezone": {
                "type": "string"
              },
              "table_schema": {
                "type": "string"
              },
              "table_name": {
                "type": "string"
              },
              "debezium": {
                "$ref": "#/components/schemas/Debezium"
              }
            }
          }
        ]
      },
      "CdcMultiTable": {
        "type": "object",
        "properties": {
          "target_fields": {
            "$ref": "#/components/schemas/CdcTargetFields"
          },
          "type": {
            "type": "string",
            "enum": [
              "SCD1"
            ]
          }
        }
      },
      "CdcOracleMultiTableNode": {
        "required": [
          "cdc",
          "jdbc_connection_uuid"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "jdbc_connection_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "cdc": {
                "$ref": "#/components/schemas/Cdc"
              },
              "debezium": {
                "$ref": "#/components/schemas/Debezium"
              }
            }
          }
        ]
      },
      "CdcOracleNode": {
        "required": [
          "cdc",
          "jdbc_connection_uuid"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "jdbc_connection_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "cdc": {
                "$ref": "#/components/schemas/Cdc"
              },
              "debezium": {
                "$ref": "#/components/schemas/Debezium"
              }
            }
          }
        ]
      },
      "CdcPostgresMultiTableNode": {
        "required": [
          "cdc",
          "jdbc_connection_uuid"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "jdbc_connection_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "cdc": {
                "$ref": "#/components/schemas/Cdc"
              },
              "debezium": {
                "$ref": "#/components/schemas/Debezium"
              }
            }
          }
        ]
      },
      "CdcPostgresNode": {
        "required": [
          "cdc",
          "jdbc_connection_uuid"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "jdbc_connection_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "cdc": {
                "$ref": "#/components/schemas/Cdc"
              },
              "debezium": {
                "$ref": "#/components/schemas/Debezium"
              }
            }
          }
        ]
      },
      "CdcSimple": {
        "type": "object",
        "properties": {
          "target_fields": {
            "$ref": "#/components/schemas/CdcTargetFields"
          },
          "type": {
            "type": "string",
            "enum": [
              "SCD1"
            ]
          }
        }
      },
      "CdcTargetFields": {
        "type": "object",
        "properties": {
          "capture_ts": {
            "type": "string"
          },
          "apply_ts": {
            "type": "string"
          },
          "source_ts": {
            "type": "string"
          },
          "delete_flag": {
            "type": "string"
          }
        }
      },
      "Changelog": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "enum": [
              "all",
              "upsert"
            ]
          }
        }
      },
      "ChannelNodeMappingVariable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "nodeVariable": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "isVariableFromTemplate": {
            "type": "boolean"
          },
          "mandatoryFlag": {
            "type": "boolean"
          }
        }
      },
      "ColumnFamily": {
        "required": [
          "name",
          "qualifiers"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "qualifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Qualifier"
            }
          }
        }
      },
      "Committed": {
        "type": "object",
        "properties": {
          "reset_strategy": {
            "type": "string",
            "enum": [
              "LATEST",
              "EARLIEST",
              "NONE"
            ]
          }
        }
      },
      "Communication": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "communicationChannelName": {
                "type": "string"
              },
              "channelId": {
                "type": "string"
              },
              "channelVersionId": {
                "type": "string"
              },
              "communicationFields": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TemplateMappingVariable"
                }
              },
              "nodeVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChannelNodeMappingVariable"
                }
              },
              "outputVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeMappingVariable"
                }
              }
            }
          }
        ]
      },
      "CommunicationHub": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "serviceId": {
                "type": "string"
              },
              "versionId": {
                "type": "string"
              },
              "inputVariableMapping": {
                "$ref": "#/components/schemas/NodeMappingVariable"
              },
              "errorVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeMappingVariable"
                }
              }
            }
          }
        ]
      },
      "CommunicationHubRead": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "serviceId": {
                "type": "string"
              },
              "versionId": {
                "type": "string"
              },
              "outputVariableMapping": {
                "$ref": "#/components/schemas/NodeMappingVariable"
              },
              "clientId": {
                "$ref": "#/components/schemas/VariablePropertiesBase"
              },
              "clientIdType": {
                "type": "string"
              },
              "isControlGroup": {
                "type": "boolean"
              },
              "isTargetGroup": {
                "type": "boolean"
              },
              "createdAtBefore": {
                "type": "string"
              },
              "createdAtAfter": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "channel": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "embed": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "LAST_TASK_STATES",
                    "TASK_STATES",
                    "BATCHES",
                    "TEMPLATES",
                    "CONTENTS",
                    "PROPERTIES",
                    "OFFERS",
                    "CONTACT_INFO"
                  ]
                }
              },
              "errorVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeMappingVariable"
                }
              },
              "inputVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeMappingVariable"
                }
              }
            }
          }
        ]
      },
      "ContactDateTimeNodeVariable": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string"
          },
          "functionIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Csv": {
        "type": "object",
        "properties": {
          "delimiter": {
            "pattern": "^.$",
            "type": "string"
          },
          "null_value": {
            "type": "string"
          }
        }
      },
      "CustomCode": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "customCodeId": {
                "type": "string"
              },
              "versionId": {
                "type": "string"
              },
              "scriptType": {
                "type": "string",
                "enum": [
                  "GROOVY",
                  "PYTHON"
                ]
              },
              "inputVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeMappingVariable"
                }
              },
              "outputVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeMappingVariable"
                }
              }
            }
          }
        ]
      },
      "DataSourceVariable": {
        "type": "object",
        "properties": {
          "columnName": {
            "type": "string"
          },
          "dataType": {
            "type": "string"
          },
          "isNullable": {
            "type": "boolean"
          },
          "isPrimary": {
            "type": "boolean"
          }
        }
      },
      "DeJson": {
        "type": "object",
        "properties": {
          "timestamp_pattern": {
            "type": "string"
          }
        }
      },
      "DeKey": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "schema": {
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [
              "string",
              "json"
            ]
          },
          "name": {
            "type": "string"
          },
          "json": {
            "$ref": "#/components/schemas/DeJson"
          }
        }
      },
      "DeValue": {
        "type": "object",
        "properties": {
          "confluent_url": {
            "type": "string"
          },
          "confluent_subject": {
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [
              "csv",
              "json",
              "avro",
              "avro_confluent",
              "binary",
              "string",
              "xml"
            ]
          },
          "json": {
            "$ref": "#/components/schemas/DeJson"
          },
          "csv": {
            "$ref": "#/components/schemas/Csv"
          },
          "exclude_key": {
            "type": "boolean"
          }
        }
      },
      "Debezium": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          }
        }
      },
      "DecisionTable": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          }
        ]
      },
      "Decoding": {
        "type": "object",
        "properties": {
          "plugin": {
            "$ref": "#/components/schemas/Plugin"
          }
        }
      },
      "DefaultBranch": {
        "type": "object",
        "properties": {
          "rowKey": {
            "type": "string"
          },
          "nodeId": {
            "type": "string"
          },
          "linkId": {
            "type": "string"
          }
        }
      },
      "ExecutionOptions": {
        "type": "object",
        "properties": {
          "parallelism": {
            "type": "integer",
            "format": "int32"
          },
          "interval": {
            "pattern": "^\\d+(ms|s|m|h|d)$",
            "type": "string"
          },
          "max_size": {
            "type": "integer",
            "format": "int32"
          },
          "max_memory_mb": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ExternalService": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "serviceId": {
                "type": "string"
              },
              "versionId": {
                "type": "string"
              },
              "inputVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeMappingVariable"
                }
              },
              "outputVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeMappingVariable"
                }
              },
              "errorVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeMappingVariable"
                }
              }
            }
          }
        ]
      },
      "FieldMapping": {
        "required": [
          "flow_key",
          "table_key"
        ],
        "type": "object",
        "properties": {
          "flow_key": {
            "type": "string"
          },
          "table_key": {
            "type": "string"
          }
        }
      },
      "File": {
        "type": "object",
        "properties": {
          "bucket": {
            "$ref": "#/components/schemas/Bucket"
          },
          "path": {
            "type": "string"
          },
          "bulk": {
            "$ref": "#/components/schemas/Bulk"
          }
        }
      },
      "FileSinkNode": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "file": {
                "$ref": "#/components/schemas/File"
              }
            }
          }
        ]
      },
      "FilterNode": {
        "required": [
          "filter"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "filter": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Finish": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "mappingVariables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FinishNodeVariable"
                }
              }
            }
          }
        ]
      },
      "FinishNodeVariable": {
        "required": [
          "isArray",
          "isComplex",
          "parameter"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "parameter": {
            "$ref": "#/components/schemas/OutParameterShortInfo"
          }
        }
      },
      "FlatMapNode": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "flatmap": {
                "$ref": "#/components/schemas/FlatMapNodeConfig"
              }
            }
          }
        ]
      },
      "FlatMapNodeConfig": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ARRAY",
              "MAP"
            ]
          },
          "debatch": {
            "type": "boolean"
          },
          "missing_data_strategy": {
            "type": "string",
            "enum": [
              "NULL",
              "DISCARD"
            ]
          },
          "output": {
            "$ref": "#/components/schemas/Output"
          },
          "input": {
            "$ref": "#/components/schemas/Input"
          }
        }
      },
      "FlinkAggregate": {
        "required": [
          "alias",
          "expression"
        ],
        "type": "object",
        "properties": {
          "expression": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          }
        }
      },
      "Fork": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "branches": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DefaultBranch"
                }
              },
              "defaultJoinPath": {
                "$ref": "#/components/schemas/DefaultBranch"
              },
              "nodeIdsWithJoinNodeIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "GroovyNode": {
        "required": [
          "additional_schema",
          "in",
          "out",
          "script_text"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "script_text": {
                "type": "string"
              },
              "additional_schema": {
                "type": "string"
              },
              "in": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "out": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "execution_options": {
                "$ref": "#/components/schemas/ExecutionOptions"
              }
            }
          }
        ]
      },
      "GroupingElementsMapping": {
        "type": "object",
        "properties": {
          "rowKey": {
            "type": "string"
          },
          "aggregateElement": {
            "type": "string"
          },
          "diagramElement": {
            "type": "string"
          }
        }
      },
      "GroupingNode": {
        "required": [
          "group_by",
          "mapping"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "mapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MappingOperation"
                }
              },
              "group_by": {
                "type": "string"
              },
              "having": {
                "type": "string"
              },
              "window": {
                "$ref": "#/components/schemas/GroupingWindow"
              }
            }
          }
        ]
      },
      "GroupingWindow": {
        "type": "object",
        "properties": {
          "interval": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "TUMBLE"
            ]
          }
        }
      },
      "HBaseLookupNode": {
        "required": [
          "column_family_list",
          "connection_uuid",
          "enrichment_type",
          "key",
          "table_name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "connection_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "enrichment_type": {
                "type": "string",
                "enum": [
                  "OUTER",
                  "INNER"
                ]
              },
              "table_name": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "column_family_list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ColumnFamily"
                }
              },
              "execution_options": {
                "$ref": "#/components/schemas/ExecutionOptions"
              }
            }
          }
        ]
      },
      "HBaseSinkNode": {
        "required": [
          "column_family_list",
          "connection_uuid",
          "key",
          "table_name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "connection_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "table_name": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "column_family_list": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ColumnFamily"
                }
              },
              "execution_options": {
                "$ref": "#/components/schemas/ExecutionOptions"
              }
            }
          }
        ]
      },
      "IcebergSinkNode": {
        "required": [
          "catalog"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "catalog": {
                "$ref": "#/components/schemas/Catalog"
              },
              "write": {
                "$ref": "#/components/schemas/Write"
              }
            }
          }
        ]
      },
      "Input": {
        "required": [
          "field_name"
        ],
        "type": "object",
        "properties": {
          "field_name": {
            "type": "string"
          }
        }
      },
      "Jdbc": {
        "required": [
          "statement"
        ],
        "type": "object",
        "properties": {
          "statement": {
            "$ref": "#/components/schemas/JdbcStatement"
          },
          "source": {
            "$ref": "#/components/schemas/Source"
          }
        }
      },
      "JdbcConnection": {
        "type": "object",
        "properties": {
          "provider_type": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "driver": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "JdbcLookupNode": {
        "required": [
          "jdbc",
          "jdbc_connection_uuid",
          "lookup",
          "query_type"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "jdbc_connection_uuid": {
                "type": "string"
              },
              "lookup": {
                "$ref": "#/components/schemas/Lookup"
              },
              "query_type": {
                "type": "string",
                "enum": [
                  "SINGLE",
                  "BATCH"
                ]
              },
              "jdbc": {
                "$ref": "#/components/schemas/Jdbc"
              },
              "key_mappings": {
                "maxItems": 1,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FieldMapping"
                }
              },
              "field_mappings": {
                "maxItems": 2147483647,
                "minItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FieldMapping"
                }
              },
              "execution_options": {
                "$ref": "#/components/schemas/ExecutionOptions"
              }
            }
          }
        ]
      },
      "JdbcParallelSourceNode": {
        "required": [
          "jdbc",
          "jdbc_connection_uuid"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "jdbc_connection_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "jdbc": {
                "$ref": "#/components/schemas/Jdbc"
              },
              "execution_options": {
                "$ref": "#/components/schemas/ExecutionOptions"
              }
            }
          }
        ]
      },
      "JdbcPostgresSourceNode": {
        "required": [
          "jdbc",
          "jdbc_connection_uuid"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "jdbc_connection_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "jdbc": {
                "$ref": "#/components/schemas/Jdbc"
              },
              "execution_options": {
                "$ref": "#/components/schemas/ExecutionOptions"
              }
            }
          }
        ]
      },
      "JdbcRead": {
        "required": [
          "outputVariablesMapping"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "dataProviderUuid": {
                "type": "string"
              },
              "timeout": {
                "type": "integer",
                "format": "int64"
              },
              "maxRetries": {
                "type": "integer",
                "format": "int32"
              },
              "selectedTableNames": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "allowMultiResultResponse": {
                "type": "boolean"
              },
              "outputVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReadMappingVariable"
                }
              },
              "query": {
                "type": "string"
              }
            }
          }
        ]
      },
      "JdbcSimple": {
        "type": "object",
        "properties": {
          "connection": {
            "$ref": "#/components/schemas/JdbcConnection"
          },
          "statement": {
            "$ref": "#/components/schemas/JdbcStatement"
          }
        }
      },
      "JdbcSinkNode": {
        "required": [
          "jdbc",
          "jdbc_connection_uuid"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "jdbc_connection_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "execution_options": {
                "$ref": "#/components/schemas/ExecutionOptions"
              },
              "jdbc": {
                "$ref": "#/components/schemas/Jdbc"
              }
            }
          }
        ]
      },
      "JdbcStatement": {
        "required": [
          "input_type"
        ],
        "type": "object",
        "properties": {
          "input_type": {
            "type": "string",
            "enum": [
              "SQL",
              "REQUEST_PARAMETERS"
            ]
          },
          "parameter_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "query": {
            "type": "string"
          },
          "fetch_size": {
            "type": "integer",
            "format": "int32"
          },
          "table": {
            "$ref": "#/components/schemas/TableWithFilter"
          },
          "partition": {
            "$ref": "#/components/schemas/Partition"
          }
        }
      },
      "JdbcWrite": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "dataProviderUuid": {
                "type": "string"
              },
              "timeout": {
                "type": "integer",
                "format": "int64"
              },
              "maxRetries": {
                "type": "integer",
                "format": "int32"
              },
              "tableName": {
                "type": "string"
              },
              "schemaName": {
                "type": "string"
              },
              "queryType": {
                "type": "string",
                "enum": [
                  "INSERT",
                  "UPDATE",
                  "MERGE",
                  "INSERT_ARRAY",
                  "UPDATE_ARRAY",
                  "MERGE_ARRAY"
                ]
              },
              "arrayFlag": {
                "type": "boolean"
              },
              "syncWriteFlag": {
                "type": "boolean"
              },
              "inputVariablesUpdateMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WriteNodeVariableMapping"
                }
              },
              "inputVariablesConditionMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WriteNodeVariableMapping"
                }
              },
              "filterVariables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WriteFilterVariableProperties"
                }
              }
            }
          }
        ]
      },
      "JoinFlow": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "joinConditionType": {
                "type": "string",
                "enum": [
                  "COMPLETION_OF_ALL_PREVIOUS_BLOCKS",
                  "COMPLETION_OF_AT_LEAST_ONE_PREVIOUS_BLOCK"
                ]
              },
              "timeout": {
                "type": "integer",
                "format": "int32"
              },
              "mergeArrays": {
                "type": "boolean"
              },
              "specifyKeys": {
                "type": "boolean"
              },
              "branches": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Branch"
                }
              },
              "keyVariableMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JoinFlowNodeVariableMapping"
                }
              }
            }
          }
        ]
      },
      "JoinFlowNodeVariableMapping": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "variableToMergeName": {
            "type": "string"
          },
          "arrayVariable": {
            "$ref": "#/components/schemas/SimpleVariableProperties"
          },
          "variablePathWithOutRoot": {
            "type": "string"
          }
        }
      },
      "JoinNode": {
        "required": [
          "join_condition",
          "join_type",
          "left_stream",
          "mapping",
          "right_stream"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "join_type": {
                "type": "string",
                "enum": [
                  "INNER",
                  "LEFT",
                  "RIGHT",
                  "FULL"
                ]
              },
              "mapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MappingOperation"
                }
              },
              "join_condition": {
                "type": "string"
              },
              "left_stream": {
                "$ref": "#/components/schemas/JoinStream"
              },
              "right_stream": {
                "$ref": "#/components/schemas/JoinStream"
              }
            }
          }
        ]
      },
      "JoinStream": {
        "required": [
          "alias",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "alias": {
            "pattern": "^\\S+$",
            "type": "string"
          },
          "ttl": {
            "pattern": "^\\d+(ms|s|m|h|d)$",
            "type": "string"
          }
        }
      },
      "KafkaConsumerOffsets": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "none",
              "earliest",
              "latest",
              "committed",
              "timestamp"
            ]
          },
          "timestamp": {
            "type": "integer",
            "format": "int64"
          },
          "committed": {
            "$ref": "#/components/schemas/Committed"
          }
        }
      },
      "KafkaProperty": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "KafkaSinkKafkaNodeCfg": {
        "required": [
          "producer"
        ],
        "type": "object",
        "properties": {
          "producer": {
            "$ref": "#/components/schemas/KafkaSinkProducerCfg"
          }
        }
      },
      "KafkaSinkNode": {
        "required": [
          "kafka",
          "kafka_connection_uuid"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "kafka_connection_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "execution_options": {
                "$ref": "#/components/schemas/ExecutionOptions"
              },
              "serde": {
                "$ref": "#/components/schemas/SinkSerde"
              },
              "kafka": {
                "$ref": "#/components/schemas/KafkaSinkKafkaNodeCfg"
              },
              "security": {
                "$ref": "#/components/schemas/SecurityCfg"
              }
            }
          }
        ]
      },
      "KafkaSinkProducerCfg": {
        "required": [
          "topic"
        ],
        "type": "object",
        "properties": {
          "semantic": {
            "type": "string",
            "enum": [
              "EXACTLY_ONCE",
              "AT_LEAST_ONCE",
              "NONE"
            ]
          },
          "topic": {
            "pattern": "^[-\\w.]+$",
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KafkaProperty"
            }
          }
        }
      },
      "KafkaSourceConsumerCfg": {
        "required": [
          "topic"
        ],
        "type": "object",
        "properties": {
          "group_id": {
            "type": "string"
          },
          "start_offsets": {
            "$ref": "#/components/schemas/KafkaConsumerOffsets"
          },
          "stop_offsets": {
            "$ref": "#/components/schemas/KafkaConsumerOffsets"
          },
          "topic": {
            "pattern": "^[-\\w.]+$",
            "type": "string"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KafkaProperty"
            }
          }
        }
      },
      "KafkaSourceKafkaNodeCfg": {
        "required": [
          "consumer"
        ],
        "type": "object",
        "properties": {
          "consumer": {
            "$ref": "#/components/schemas/KafkaSourceConsumerCfg"
          }
        }
      },
      "KafkaSourceNode": {
        "required": [
          "boundedness",
          "kafka",
          "kafka_connection_uuid",
          "schema"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "kafka_connection_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "schema": {
                "type": "string"
              },
              "execution_options": {
                "$ref": "#/components/schemas/ExecutionOptions"
              },
              "boundedness": {
                "type": "string",
                "enum": [
                  "BOUNDED",
                  "CONTINUOUS_UNBOUNDED"
                ]
              },
              "serde": {
                "$ref": "#/components/schemas/SourceSerde"
              },
              "kafka": {
                "$ref": "#/components/schemas/KafkaSourceKafkaNodeCfg"
              },
              "security": {
                "$ref": "#/components/schemas/SecurityCfg"
              }
            }
          }
        ]
      },
      "Key": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        }
      },
      "Lookup": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "inner",
              "outer"
            ]
          }
        }
      },
      "MapConfig": {
        "type": "object",
        "properties": {
          "value_field_name": {
            "type": "string"
          },
          "key_field_name": {
            "type": "string"
          }
        }
      },
      "MappingNode": {
        "required": [
          "mapping"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "mapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MappingOperation"
                }
              }
            }
          }
        ]
      },
      "MappingOperation": {
        "required": [
          "expression"
        ],
        "type": "object",
        "properties": {
          "expression": {
            "type": "string"
          },
          "alias": {
            "pattern": "^\\S+$",
            "type": "string"
          }
        }
      },
      "NodeMappingVariable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "nodeVariable": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          }
        }
      },
      "NodeMetaInfo": {
        "type": "object",
        "properties": {
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "shape": {
            "$ref": "#/components/schemas/Shape"
          },
          "extent": {
            "type": "string",
            "description": "Параметр для группировки"
          },
          "parentNode": {
            "type": "string",
            "description": "Указатель на родителя"
          },
          "blockInnerMeta": {
            "type": "string",
            "description": "Внутренняя метаинформация узла"
          }
        },
        "description": "JSON-настройки отображения"
      },
      "NodeUpdateDto": {
        "required": [
          "diagramVersionId",
          "nodeName",
          "nodeTypeId",
          "validFlag"
        ],
        "type": "object",
        "properties": {
          "nodeTypeId": {
            "type": "integer",
            "description": "Уникальный идентификатор типа узла",
            "format": "int32",
            "example": 10
          },
          "diagramVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "nodeName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя узла",
            "example": "Узел первичной фильтрации"
          },
          "nodeDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание узла",
            "example": "Узел фильтрации данных по первичному признаку"
          },
          "properties": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AggregateCompute"
              },
              {
                "$ref": "#/components/schemas/AggregateReading"
              },
              {
                "$ref": "#/components/schemas/AggregationNode"
              },
              {
                "$ref": "#/components/schemas/Calculates"
              },
              {
                "$ref": "#/components/schemas/CdcApplyMultiTableNode"
              },
              {
                "$ref": "#/components/schemas/CdcApplyNode"
              },
              {
                "$ref": "#/components/schemas/CdcMongoDbNode"
              },
              {
                "$ref": "#/components/schemas/CdcMsSqlNode"
              },
              {
                "$ref": "#/components/schemas/CdcOracleMultiTableNode"
              },
              {
                "$ref": "#/components/schemas/CdcOracleNode"
              },
              {
                "$ref": "#/components/schemas/CdcPostgresMultiTableNode"
              },
              {
                "$ref": "#/components/schemas/CdcPostgresNode"
              },
              {
                "$ref": "#/components/schemas/Communication"
              },
              {
                "$ref": "#/components/schemas/CommunicationHub"
              },
              {
                "$ref": "#/components/schemas/CommunicationHubRead"
              },
              {
                "$ref": "#/components/schemas/CustomCode"
              },
              {
                "$ref": "#/components/schemas/DecisionTable"
              },
              {
                "$ref": "#/components/schemas/ExternalService"
              },
              {
                "$ref": "#/components/schemas/FileSinkNode"
              },
              {
                "$ref": "#/components/schemas/FilterNode"
              },
              {
                "$ref": "#/components/schemas/Finish"
              },
              {
                "$ref": "#/components/schemas/FlatMapNode"
              },
              {
                "$ref": "#/components/schemas/Fork"
              },
              {
                "$ref": "#/components/schemas/GroovyNode"
              },
              {
                "$ref": "#/components/schemas/GroupingNode"
              },
              {
                "$ref": "#/components/schemas/HBaseLookupNode"
              },
              {
                "$ref": "#/components/schemas/HBaseSinkNode"
              },
              {
                "$ref": "#/components/schemas/IcebergSinkNode"
              },
              {
                "$ref": "#/components/schemas/JdbcLookupNode"
              },
              {
                "$ref": "#/components/schemas/JdbcParallelSourceNode"
              },
              {
                "$ref": "#/components/schemas/JdbcPostgresSourceNode"
              },
              {
                "$ref": "#/components/schemas/JdbcRead"
              },
              {
                "$ref": "#/components/schemas/JdbcSinkNode"
              },
              {
                "$ref": "#/components/schemas/JdbcWrite"
              },
              {
                "$ref": "#/components/schemas/JoinFlow"
              },
              {
                "$ref": "#/components/schemas/JoinNode"
              },
              {
                "$ref": "#/components/schemas/KafkaSinkNode"
              },
              {
                "$ref": "#/components/schemas/KafkaSourceNode"
              },
              {
                "$ref": "#/components/schemas/MappingNode"
              },
              {
                "$ref": "#/components/schemas/Offer"
              },
              {
                "$ref": "#/components/schemas/OfferStorageRead"
              },
              {
                "$ref": "#/components/schemas/OfferStorageWrite"
              },
              {
                "$ref": "#/components/schemas/PolicyRead"
              },
              {
                "$ref": "#/components/schemas/PythonNode"
              },
              {
                "$ref": "#/components/schemas/RestSourceNode"
              },
              {
                "$ref": "#/components/schemas/Ruleset"
              },
              {
                "$ref": "#/components/schemas/Scorecard"
              },
              {
                "$ref": "#/components/schemas/Start"
              },
              {
                "$ref": "#/components/schemas/Subdiagram"
              },
              {
                "$ref": "#/components/schemas/TarantoolRead"
              },
              {
                "$ref": "#/components/schemas/TarantoolWrite"
              },
              {
                "$ref": "#/components/schemas/UnionNode"
              }
            ]
          },
          "metaInfo": {
            "$ref": "#/components/schemas/NodeMetaInfo"
          },
          "validFlag": {
            "type": "boolean",
            "description": "Признак корректности узла",
            "example": false
          },
          "addedVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariableViewDto"
            }
          }
        },
        "description": "Объект для обновления узла диаграммы"
      },
      "Offer": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "offerId": {
                "type": "string"
              },
              "offerName": {
                "type": "string"
              },
              "versionId": {
                "type": "string"
              },
              "offerComplexTypeVersionId": {
                "type": "string"
              },
              "offerVariables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TemplateMappingVariable"
                }
              },
              "nodeVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OfferNodeMappingVariable"
                }
              },
              "outputVariableMapping": {
                "$ref": "#/components/schemas/NodeMappingVariable"
              }
            }
          }
        ]
      },
      "OfferNodeMappingVariable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "nodeVariable": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "isVariableFromTemplate": {
            "type": "boolean"
          },
          "mandatoryFlag": {
            "type": "boolean"
          }
        }
      },
      "OfferStorageRead": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "serviceId": {
                "type": "string"
              },
              "versionId": {
                "type": "string"
              },
              "serviceType": {
                "type": "string",
                "enum": [
                  "OFFER_STORAGE_WRITE",
                  "COMMUNICATION_HUB",
                  "COMMUNICATION_HUB_READ",
                  "OFFER_STORAGE_READ_BY_CLIENT_ID",
                  "OFFER_STORAGE_READ_BY_OFFER_ID",
                  "POLICY_READ"
                ]
              },
              "offerReadOutputVariableMapping": {
                "$ref": "#/components/schemas/NodeMappingVariable"
              },
              "externalOfferId": {
                "$ref": "#/components/schemas/NodeMappingVariable"
              },
              "clientId": {
                "$ref": "#/components/schemas/NodeMappingVariable"
              },
              "clientIdType": {
                "type": "string"
              },
              "activeChannel": {
                "type": "boolean"
              },
              "active": {
                "type": "boolean"
              },
              "control": {
                "type": "boolean"
              },
              "getDefaultOffers": {
                "type": "boolean"
              },
              "offerCount": {
                "type": "integer",
                "format": "int32"
              },
              "errorVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeMappingVariable"
                }
              }
            }
          }
        ]
      },
      "OfferStorageWrite": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "serviceId": {
                "type": "string"
              },
              "versionId": {
                "type": "string"
              },
              "offerVariableMapping": {
                "$ref": "#/components/schemas/NodeMappingVariable"
              },
              "continueWithPartialWrittenOffers": {
                "type": "boolean"
              },
              "errorVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeMappingVariable"
                }
              }
            }
          }
        ]
      },
      "OutParameterShortInfo": {
        "type": "object",
        "properties": {
          "parameterName": {
            "type": "string"
          },
          "parameterId": {
            "type": "string"
          },
          "isNullValue": {
            "type": "boolean"
          }
        }
      },
      "Output": {
        "type": "object",
        "properties": {
          "array": {
            "$ref": "#/components/schemas/ArrayConfig"
          },
          "map": {
            "$ref": "#/components/schemas/MapConfig"
          }
        }
      },
      "Partition": {
        "type": "object",
        "properties": {
          "partition_type": {
            "type": "string",
            "enum": [
              "RANGE",
              "LIST"
            ]
          },
          "values": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "field_name": {
            "type": "string"
          },
          "range": {
            "$ref": "#/components/schemas/Range"
          }
        }
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "PolicyRead": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "serviceId": {
                "type": "string"
              },
              "versionId": {
                "type": "string"
              },
              "outputVariableMapping": {
                "$ref": "#/components/schemas/VariablePropertiesBase"
              },
              "clientId": {
                "$ref": "#/components/schemas/VariablePropertiesBase"
              },
              "dryRun": {
                "type": "boolean"
              },
              "weak": {
                "type": "boolean"
              },
              "isInstantDispatch": {
                "type": "boolean"
              },
              "contactDateTime": {
                "$ref": "#/components/schemas/ContactDateTimeNodeVariable"
              },
              "additionalParameters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdditionalParameters"
                }
              },
              "errorVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeMappingVariable"
                }
              }
            }
          }
        ]
      },
      "Position": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "description": "Расположение узла по оси X"
          },
          "y": {
            "type": "number",
            "description": "Расположение узла по оси Y"
          }
        },
        "description": "Координаты узла"
      },
      "Postgres": {
        "required": [
          "table"
        ],
        "type": "object",
        "properties": {
          "server": {
            "$ref": "#/components/schemas/Server"
          },
          "changelog": {
            "$ref": "#/components/schemas/Changelog"
          },
          "slot": {
            "$ref": "#/components/schemas/Slot"
          },
          "decoding": {
            "$ref": "#/components/schemas/Decoding"
          },
          "table": {
            "$ref": "#/components/schemas/Table"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "Properties": {
        "required": [
          "nodeType"
        ],
        "type": "object",
        "properties": {
          "nodeType": {
            "type": "string"
          }
        },
        "description": "JSON-свойства узла в соответствии с типом узла",
        "discriminator": {
          "propertyName": "nodeType"
        }
      },
      "Property": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "PythonNode": {
        "required": [
          "python_environment_version_id",
          "schema"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "schema": {
                "type": "string"
              },
              "python_environment_version_id": {
                "type": "string",
                "format": "uuid"
              },
              "python_code": {
                "type": "string"
              },
              "execution_options": {
                "$ref": "#/components/schemas/ExecutionOptions"
              }
            }
          }
        ]
      },
      "Qualifier": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "STRING",
              "INT",
              "DOUBLE",
              "LONG",
              "BOOLEAN"
            ]
          }
        }
      },
      "Range": {
        "type": "object",
        "properties": {
          "lower_bound": {
            "type": "string"
          },
          "upper_bound": {
            "type": "string"
          },
          "num_partitions": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ReadMappingVariable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "nodeVariable": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "isJdbcArrayKey": {
            "type": "boolean"
          },
          "arrayVariable": {
            "$ref": "#/components/schemas/WriteReadVariableProperties"
          },
          "nodeVariableType": {
            "type": "string"
          }
        }
      },
      "Request": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "headers": {
            "type": "string"
          }
        }
      },
      "Response": {
        "type": "object",
        "properties": {
          "charset": {
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [
              "txt",
              "json"
            ]
          },
          "field_name": {
            "type": "string"
          },
          "array": {
            "type": "boolean"
          }
        }
      },
      "RestSourceNode": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "rest_service_uuid": {
                "type": "string",
                "format": "uuid"
              },
              "request": {
                "$ref": "#/components/schemas/Request"
              },
              "response": {
                "$ref": "#/components/schemas/Response"
              },
              "execution_options": {
                "$ref": "#/components/schemas/ExecutionOptions"
              }
            }
          }
        ]
      },
      "Ruleset": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "ruleVariable": {
                "$ref": "#/components/schemas/RulesetVariableProperties"
              },
              "rules": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RulesetProperties"
                }
              }
            }
          }
        ]
      },
      "RulesetProperties": {
        "type": "object",
        "properties": {
          "rowKey": {
            "type": "string"
          },
          "applyRule": {
            "type": "boolean"
          },
          "ruleName": {
            "type": "string"
          },
          "ruleCode": {
            "type": "string"
          },
          "ruleTypeId": {
            "type": "string"
          },
          "ruleDescription": {
            "type": "string"
          },
          "ruleExpression": {
            "type": "string"
          },
          "functionIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ruleWeightFactor": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "RulesetVariableProperties": {
        "required": [
          "isArray",
          "isComplex"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          }
        }
      },
      "ScoreValue": {
        "type": "object",
        "properties": {
          "rowKey": {
            "type": "string"
          },
          "minValue": {
            "type": "object"
          },
          "maxValue": {
            "type": "object"
          },
          "includeMinValue": {
            "type": "boolean"
          },
          "includeMaxValue": {
            "type": "boolean"
          },
          "value": {
            "type": "object"
          },
          "scoreValue": {
            "type": "number"
          }
        }
      },
      "Scorecard": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "outputVariable": {
                "$ref": "#/components/schemas/ScorecardOutputVariable"
              },
              "inputVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ScorecardInputVariable"
                }
              }
            }
          }
        ]
      },
      "ScorecardInputVariable": {
        "required": [
          "isArray",
          "isComplex"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "defaultValue": {
            "type": "number"
          },
          "scoreValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoreValue"
            }
          }
        }
      },
      "ScorecardOutputVariable": {
        "required": [
          "isArray",
          "isComplex"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "defaultValue": {
            "type": "number"
          }
        }
      },
      "SecurityCfg": {
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string",
            "enum": [
              "plaintext",
              "ssl"
            ]
          },
          "ssl": {
            "$ref": "#/components/schemas/Ssl"
          }
        }
      },
      "SerJson": {
        "type": "object",
        "properties": {
          "fail_on_missing_field": {
            "type": "string"
          },
          "timestamp_pattern": {
            "type": "string"
          }
        }
      },
      "SerKey": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "format": {
            "type": "string",
            "enum": [
              "csv",
              "json"
            ]
          },
          "json": {
            "$ref": "#/components/schemas/SerJson"
          },
          "key_by": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SerValue": {
        "type": "object",
        "properties": {
          "confluent_url": {
            "type": "string"
          },
          "confluent_subject": {
            "type": "string"
          },
          "format": {
            "type": "string",
            "enum": [
              "xml",
              "json",
              "avro"
            ]
          },
          "json": {
            "$ref": "#/components/schemas/SerJson"
          },
          "csv": {
            "$ref": "#/components/schemas/Csv"
          },
          "exclude_key": {
            "type": "boolean"
          }
        }
      },
      "Server": {
        "type": "object",
        "properties": {
          "time": {
            "$ref": "#/components/schemas/Time"
          }
        }
      },
      "Shape": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "description": "Параметр Х для отрисовки группы узлов"
          },
          "y": {
            "type": "number",
            "description": "Параметр Y для отрисовки группы узлов"
          }
        },
        "description": "Размеры для отрисовки прямоугольника"
      },
      "SimpleVariableProperties": {
        "type": "object",
        "properties": {
          "variableName": {
            "type": "string"
          },
          "variablePath": {
            "type": "string"
          }
        }
      },
      "SinkSerde": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/SerValue"
          },
          "key": {
            "$ref": "#/components/schemas/SerKey"
          }
        }
      },
      "Slot": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Source": {
        "type": "object",
        "properties": {
          "key_field": {
            "type": "string"
          }
        }
      },
      "SourceSerde": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/DeValue"
          },
          "key": {
            "$ref": "#/components/schemas/DeKey"
          }
        }
      },
      "Ssl": {
        "type": "object",
        "properties": {
          "truststore": {
            "$ref": "#/components/schemas/Store"
          },
          "keystore": {
            "$ref": "#/components/schemas/Store"
          },
          "key": {
            "$ref": "#/components/schemas/Key"
          }
        }
      },
      "Start": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "mappingVariables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StartNodeVariable"
                }
              }
            }
          }
        ]
      },
      "StartNodeVariable": {
        "required": [
          "isArray",
          "isComplex"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "parameterId": {
            "type": "string"
          }
        }
      },
      "Store": {
        "required": [
          "location",
          "password"
        ],
        "type": "object",
        "properties": {
          "location": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "SubDiagramOutVariableMapping": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "nodeVariable": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "isHide": {
            "type": "boolean"
          }
        }
      },
      "Subdiagram": {
        "required": [
          "inputVariablesMapping",
          "outputVariablesMapping"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "subdiagramId": {
                "type": "string"
              },
              "versionId": {
                "type": "string"
              },
              "inputVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NodeMappingVariable"
                }
              },
              "outputVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SubDiagramOutVariableMapping"
                }
              }
            }
          }
        ]
      },
      "Table": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "TableWithFilter": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "filter": {
            "type": "string"
          }
        }
      },
      "TarantoolRead": {
        "required": [
          "outputVariablesMapping"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "dataProviderUuid": {
                "type": "string"
              },
              "timeout": {
                "type": "integer",
                "format": "int64"
              },
              "maxRetries": {
                "type": "integer",
                "format": "int32"
              },
              "selectedTableNames": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "allowMultiResultResponse": {
                "type": "boolean"
              },
              "outputVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReadMappingVariable"
                }
              },
              "searchType": {
                "type": "string",
                "enum": [
                  "INDEX_SEARCH",
                  "LUA_FUNCTION_SEARCH"
                ]
              },
              "dataProviderName": {
                "type": "string"
              },
              "selectedSearcherName": {
                "type": "string"
              },
              "inputVariablesMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TarantoolReadInputMappingVariable"
                }
              },
              "luaResultType": {
                "type": "string",
                "enum": [
                  "SCALAR",
                  "SCALAR_ARRAY",
                  "ROW",
                  "ROW_ARRAY"
                ]
              }
            }
          }
        ]
      },
      "TarantoolReadInputMappingVariable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "nodeVariable": {
            "$ref": "#/components/schemas/DataSourceVariable"
          },
          "isNullValue": {
            "type": "boolean"
          }
        }
      },
      "TarantoolWrite": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "parallelism": {
                "type": "integer",
                "format": "int32"
              },
              "dataProviderUuid": {
                "type": "string"
              },
              "timeout": {
                "type": "integer",
                "format": "int64"
              },
              "maxRetries": {
                "type": "integer",
                "format": "int32"
              },
              "tableName": {
                "type": "string"
              },
              "schemaName": {
                "type": "string"
              },
              "queryType": {
                "type": "string",
                "enum": [
                  "INSERT",
                  "UPDATE",
                  "MERGE",
                  "INSERT_ARRAY",
                  "UPDATE_ARRAY",
                  "MERGE_ARRAY"
                ]
              },
              "arrayFlag": {
                "type": "boolean"
              },
              "syncWriteFlag": {
                "type": "boolean"
              },
              "inputVariablesUpdateMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WriteNodeVariableMapping"
                }
              },
              "inputVariablesConditionMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WriteNodeVariableMapping"
                }
              },
              "filterVariables": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WriteFilterVariableProperties"
                }
              },
              "selectedIndexName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "TemplateMappingVariable": {
        "type": "object",
        "properties": {
          "rowKey": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "value": {
            "type": "object"
          },
          "variableName": {
            "type": "string"
          },
          "primitiveTypeId": {
            "type": "string"
          },
          "dataSourceType": {
            "type": "string",
            "enum": [
              "USER_INPUT",
              "DICTIONARY",
              "DIAGRAM_ELEMENT"
            ]
          },
          "dictionaryId": {
            "type": "string"
          },
          "dynamicListType": {
            "type": "string",
            "enum": [
              "RADIO_BUTTON",
              "DROP_DOWN_LIST"
            ]
          },
          "mandatoryFlag": {
            "type": "boolean"
          },
          "minValue": {
            "type": "number",
            "format": "double"
          },
          "maxValue": {
            "type": "number",
            "format": "double"
          },
          "maxSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Time": {
        "type": "object",
        "properties": {
          "zone": {
            "type": "string"
          }
        }
      },
      "TimeAttribute": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "format": {
            "type": "string"
          }
        }
      },
      "TimeInterval": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32"
          },
          "unit": {
            "type": "string",
            "enum": [
              "ms",
              "s",
              "m",
              "h",
              "d"
            ]
          }
        }
      },
      "UnionNode": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Properties"
          },
          {
            "type": "object",
            "properties": {
              "complete_schemes_equality": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "VariablePropertiesBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          }
        }
      },
      "VariableViewDto": {
        "required": [
          "isArray",
          "isComplex",
          "isDict",
          "typeId",
          "variableName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор переменной",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "variableName": {
            "maxLength": 40,
            "type": "string",
            "description": "Имя переменной",
            "example": "Client"
          },
          "typeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор типа переменной",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "dictId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор справочника",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "isComplex": {
            "type": "boolean",
            "description": "Признак комплексного типа (true)",
            "example": false
          },
          "isDict": {
            "type": "boolean",
            "description": "Признак справочника кастомных типов (true)",
            "example": false
          },
          "isArray": {
            "type": "boolean",
            "description": "Признак массива (true)",
            "example": false
          },
          "variableRootId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор корневой переменной",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "variablePath": {
            "maxLength": 150,
            "minLength": 0,
            "type": "string",
            "description": "Путь переменной в комплексном типе",
            "example": "customer/address"
          }
        },
        "description": "Список входных параметров, доступных для назначения в качестверасчитываемого атрибута или для расчета"
      },
      "Watermark": {
        "required": [
          "watermark_type"
        ],
        "type": "object",
        "properties": {
          "watermark_type": {
            "type": "string",
            "enum": [
              "monotonous",
              "bounded_unordered",
              "periodic",
              "periodic_bounded_unordered"
            ]
          },
          "wait_duration": {
            "$ref": "#/components/schemas/TimeInterval"
          },
          "time_passing_coefficient": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Write": {
        "type": "object",
        "properties": {
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          }
        }
      },
      "WriteFilterVariableProperties": {
        "required": [
          "isArray",
          "isComplex"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "expression": {
            "type": "string"
          },
          "filterSign": {
            "type": "string",
            "enum": [
              "EQUAL",
              "NOT_EQUAL",
              "GREATER",
              "LESS",
              "GREATER_OR_EQUAL",
              "LESS_OR_EQUAL",
              "NOT_IN",
              "IN"
            ]
          },
          "arrayVariable": {
            "$ref": "#/components/schemas/WriteReadVariableProperties"
          }
        }
      },
      "WriteNodeVariableMapping": {
        "required": [
          "isArray",
          "isComplex"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rowKey": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "typeId": {
            "type": "string"
          },
          "dictId": {
            "type": "string"
          },
          "isArray": {
            "type": "boolean"
          },
          "isComplex": {
            "type": "boolean"
          },
          "isDict": {
            "type": "boolean"
          },
          "isLiteral": {
            "type": "boolean"
          },
          "variablePath": {
            "type": "string"
          },
          "variableRootId": {
            "type": "string"
          },
          "arrayVariable": {
            "$ref": "#/components/schemas/WriteReadVariableProperties"
          },
          "nodeVariable": {
            "$ref": "#/components/schemas/DataSourceVariable"
          }
        }
      },
      "WriteReadVariableProperties": {
        "type": "object",
        "properties": {
          "variableName": {
            "type": "string"
          },
          "variablePath": {
            "type": "string"
          }
        }
      },
      "NodeValidateStateResponseDto": {
        "required": [
          "httpCode",
          "module",
          "operation",
          "timeStamp",
          "validFlag"
        ],
        "type": "object",
        "properties": {
          "timeStamp": {
            "type": "string",
            "description": "Время ошибки",
            "format": "date-time"
          },
          "uuid": {
            "type": "string",
            "description": "uuid присвоенный при работе с объектом",
            "format": "uuid",
            "example": "d8d6ba76-ea3f-4d9b-b7b7-a819ef0f5549"
          },
          "httpCode": {
            "type": "integer",
            "description": "Дублированный http код",
            "format": "int32",
            "example": 200
          },
          "module": {
            "type": "string",
            "description": "Модуль, в котором производилось действие",
            "example": "diagram"
          },
          "operation": {
            "type": "string",
            "description": "Совершаемая операция",
            "example": "save",
            "enum": [
              "update",
              "save",
              "delete",
              "deploy",
              "validate"
            ]
          },
          "message": {
            "type": "string",
            "description": "Trace ошибки",
            "example": "Unable to find a model that matches key ModelKey"
          },
          "validationPayload": {
            "type": "object",
            "description": "Объект с ошибкой"
          },
          "validFlag": {
            "type": "boolean",
            "description": "Признак корректности узла",
            "example": false
          }
        }
      },
      "NodeValidateDto": {
        "required": [
          "nodeTypeId"
        ],
        "type": "object",
        "properties": {
          "nodeTypeId": {
            "type": "integer",
            "description": "Уникальный идентификатор типа узла",
            "format": "int32",
            "example": 10
          },
          "properties": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AggregateCompute"
              },
              {
                "$ref": "#/components/schemas/AggregateReading"
              },
              {
                "$ref": "#/components/schemas/AggregationNode"
              },
              {
                "$ref": "#/components/schemas/Calculates"
              },
              {
                "$ref": "#/components/schemas/CdcApplyMultiTableNode"
              },
              {
                "$ref": "#/components/schemas/CdcApplyNode"
              },
              {
                "$ref": "#/components/schemas/CdcMongoDbNode"
              },
              {
                "$ref": "#/components/schemas/CdcMsSqlNode"
              },
              {
                "$ref": "#/components/schemas/CdcOracleMultiTableNode"
              },
              {
                "$ref": "#/components/schemas/CdcOracleNode"
              },
              {
                "$ref": "#/components/schemas/CdcPostgresMultiTableNode"
              },
              {
                "$ref": "#/components/schemas/CdcPostgresNode"
              },
              {
                "$ref": "#/components/schemas/Communication"
              },
              {
                "$ref": "#/components/schemas/CommunicationHub"
              },
              {
                "$ref": "#/components/schemas/CommunicationHubRead"
              },
              {
                "$ref": "#/components/schemas/CustomCode"
              },
              {
                "$ref": "#/components/schemas/DecisionTable"
              },
              {
                "$ref": "#/components/schemas/ExternalService"
              },
              {
                "$ref": "#/components/schemas/FileSinkNode"
              },
              {
                "$ref": "#/components/schemas/FilterNode"
              },
              {
                "$ref": "#/components/schemas/Finish"
              },
              {
                "$ref": "#/components/schemas/FlatMapNode"
              },
              {
                "$ref": "#/components/schemas/Fork"
              },
              {
                "$ref": "#/components/schemas/GroovyNode"
              },
              {
                "$ref": "#/components/schemas/GroupingNode"
              },
              {
                "$ref": "#/components/schemas/HBaseLookupNode"
              },
              {
                "$ref": "#/components/schemas/HBaseSinkNode"
              },
              {
                "$ref": "#/components/schemas/IcebergSinkNode"
              },
              {
                "$ref": "#/components/schemas/JdbcLookupNode"
              },
              {
                "$ref": "#/components/schemas/JdbcParallelSourceNode"
              },
              {
                "$ref": "#/components/schemas/JdbcPostgresSourceNode"
              },
              {
                "$ref": "#/components/schemas/JdbcRead"
              },
              {
                "$ref": "#/components/schemas/JdbcSinkNode"
              },
              {
                "$ref": "#/components/schemas/JdbcWrite"
              },
              {
                "$ref": "#/components/schemas/JoinFlow"
              },
              {
                "$ref": "#/components/schemas/JoinNode"
              },
              {
                "$ref": "#/components/schemas/KafkaSinkNode"
              },
              {
                "$ref": "#/components/schemas/KafkaSourceNode"
              },
              {
                "$ref": "#/components/schemas/MappingNode"
              },
              {
                "$ref": "#/components/schemas/Offer"
              },
              {
                "$ref": "#/components/schemas/OfferStorageRead"
              },
              {
                "$ref": "#/components/schemas/OfferStorageWrite"
              },
              {
                "$ref": "#/components/schemas/PolicyRead"
              },
              {
                "$ref": "#/components/schemas/PythonNode"
              },
              {
                "$ref": "#/components/schemas/RestSourceNode"
              },
              {
                "$ref": "#/components/schemas/Ruleset"
              },
              {
                "$ref": "#/components/schemas/Scorecard"
              },
              {
                "$ref": "#/components/schemas/Start"
              },
              {
                "$ref": "#/components/schemas/Subdiagram"
              },
              {
                "$ref": "#/components/schemas/TarantoolRead"
              },
              {
                "$ref": "#/components/schemas/TarantoolWrite"
              },
              {
                "$ref": "#/components/schemas/UnionNode"
              }
            ]
          },
          "addedVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariableViewDto"
            }
          }
        },
        "description": "Объект для валидации узла диаграммы"
      },
      "NodeRemapDto": {
        "required": [
          "nodeTypeId",
          "objectId",
          "objectVersionId"
        ],
        "type": "object",
        "properties": {
          "nodeTypeId": {
            "type": "integer",
            "description": "Уникальный идентификатор типа узла",
            "format": "int32",
            "example": 10
          },
          "properties": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AggregateCompute"
              },
              {
                "$ref": "#/components/schemas/AggregateReading"
              },
              {
                "$ref": "#/components/schemas/AggregationNode"
              },
              {
                "$ref": "#/components/schemas/Calculates"
              },
              {
                "$ref": "#/components/schemas/CdcApplyMultiTableNode"
              },
              {
                "$ref": "#/components/schemas/CdcApplyNode"
              },
              {
                "$ref": "#/components/schemas/CdcMongoDbNode"
              },
              {
                "$ref": "#/components/schemas/CdcMsSqlNode"
              },
              {
                "$ref": "#/components/schemas/CdcOracleMultiTableNode"
              },
              {
                "$ref": "#/components/schemas/CdcOracleNode"
              },
              {
                "$ref": "#/components/schemas/CdcPostgresMultiTableNode"
              },
              {
                "$ref": "#/components/schemas/CdcPostgresNode"
              },
              {
                "$ref": "#/components/schemas/Communication"
              },
              {
                "$ref": "#/components/schemas/CommunicationHub"
              },
              {
                "$ref": "#/components/schemas/CommunicationHubRead"
              },
              {
                "$ref": "#/components/schemas/CustomCode"
              },
              {
                "$ref": "#/components/schemas/DecisionTable"
              },
              {
                "$ref": "#/components/schemas/ExternalService"
              },
              {
                "$ref": "#/components/schemas/FileSinkNode"
              },
              {
                "$ref": "#/components/schemas/FilterNode"
              },
              {
                "$ref": "#/components/schemas/Finish"
              },
              {
                "$ref": "#/components/schemas/FlatMapNode"
              },
              {
                "$ref": "#/components/schemas/Fork"
              },
              {
                "$ref": "#/components/schemas/GroovyNode"
              },
              {
                "$ref": "#/components/schemas/GroupingNode"
              },
              {
                "$ref": "#/components/schemas/HBaseLookupNode"
              },
              {
                "$ref": "#/components/schemas/HBaseSinkNode"
              },
              {
                "$ref": "#/components/schemas/IcebergSinkNode"
              },
              {
                "$ref": "#/components/schemas/JdbcLookupNode"
              },
              {
                "$ref": "#/components/schemas/JdbcParallelSourceNode"
              },
              {
                "$ref": "#/components/schemas/JdbcPostgresSourceNode"
              },
              {
                "$ref": "#/components/schemas/JdbcRead"
              },
              {
                "$ref": "#/components/schemas/JdbcSinkNode"
              },
              {
                "$ref": "#/components/schemas/JdbcWrite"
              },
              {
                "$ref": "#/components/schemas/JoinFlow"
              },
              {
                "$ref": "#/components/schemas/JoinNode"
              },
              {
                "$ref": "#/components/schemas/KafkaSinkNode"
              },
              {
                "$ref": "#/components/schemas/KafkaSourceNode"
              },
              {
                "$ref": "#/components/schemas/MappingNode"
              },
              {
                "$ref": "#/components/schemas/Offer"
              },
              {
                "$ref": "#/components/schemas/OfferStorageRead"
              },
              {
                "$ref": "#/components/schemas/OfferStorageWrite"
              },
              {
                "$ref": "#/components/schemas/PolicyRead"
              },
              {
                "$ref": "#/components/schemas/PythonNode"
              },
              {
                "$ref": "#/components/schemas/RestSourceNode"
              },
              {
                "$ref": "#/components/schemas/Ruleset"
              },
              {
                "$ref": "#/components/schemas/Scorecard"
              },
              {
                "$ref": "#/components/schemas/Start"
              },
              {
                "$ref": "#/components/schemas/Subdiagram"
              },
              {
                "$ref": "#/components/schemas/TarantoolRead"
              },
              {
                "$ref": "#/components/schemas/TarantoolWrite"
              },
              {
                "$ref": "#/components/schemas/UnionNode"
              }
            ]
          },
          "objectId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор объекта в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии объекта в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Объект для ремапинга свойств узла диаграммы"
      },
      "LinkDeletedDto": {
        "required": [
          "nextNodeId"
        ],
        "type": "object",
        "properties": {
          "linkId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор ребра диаграммы",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "nextNodeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор последующего узла",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Список линков, которые были удалены"
      },
      "NodeUpdateLeadToDiagramChangeResultDto": {
        "type": "object",
        "properties": {
          "addedLinkIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deletedLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkDeletedDto"
            }
          }
        }
      },
      "NodeAutoMappingDto": {
        "required": [
          "collectionName",
          "nodeTypeId"
        ],
        "type": "object",
        "properties": {
          "forceAutoMappingVariableIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "skipAutoMappingVariableIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "collectionName": {
            "type": "string",
            "description": "Наименовании коллекции маппинга на узле",
            "example": "inputVariablesMapping"
          },
          "properties": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AggregateCompute"
              },
              {
                "$ref": "#/components/schemas/AggregateReading"
              },
              {
                "$ref": "#/components/schemas/AggregationNode"
              },
              {
                "$ref": "#/components/schemas/Calculates"
              },
              {
                "$ref": "#/components/schemas/CdcApplyMultiTableNode"
              },
              {
                "$ref": "#/components/schemas/CdcApplyNode"
              },
              {
                "$ref": "#/components/schemas/CdcMongoDbNode"
              },
              {
                "$ref": "#/components/schemas/CdcMsSqlNode"
              },
              {
                "$ref": "#/components/schemas/CdcOracleMultiTableNode"
              },
              {
                "$ref": "#/components/schemas/CdcOracleNode"
              },
              {
                "$ref": "#/components/schemas/CdcPostgresMultiTableNode"
              },
              {
                "$ref": "#/components/schemas/CdcPostgresNode"
              },
              {
                "$ref": "#/components/schemas/Communication"
              },
              {
                "$ref": "#/components/schemas/CommunicationHub"
              },
              {
                "$ref": "#/components/schemas/CommunicationHubRead"
              },
              {
                "$ref": "#/components/schemas/CustomCode"
              },
              {
                "$ref": "#/components/schemas/DecisionTable"
              },
              {
                "$ref": "#/components/schemas/ExternalService"
              },
              {
                "$ref": "#/components/schemas/FileSinkNode"
              },
              {
                "$ref": "#/components/schemas/FilterNode"
              },
              {
                "$ref": "#/components/schemas/Finish"
              },
              {
                "$ref": "#/components/schemas/FlatMapNode"
              },
              {
                "$ref": "#/components/schemas/Fork"
              },
              {
                "$ref": "#/components/schemas/GroovyNode"
              },
              {
                "$ref": "#/components/schemas/GroupingNode"
              },
              {
                "$ref": "#/components/schemas/HBaseLookupNode"
              },
              {
                "$ref": "#/components/schemas/HBaseSinkNode"
              },
              {
                "$ref": "#/components/schemas/IcebergSinkNode"
              },
              {
                "$ref": "#/components/schemas/JdbcLookupNode"
              },
              {
                "$ref": "#/components/schemas/JdbcParallelSourceNode"
              },
              {
                "$ref": "#/components/schemas/JdbcPostgresSourceNode"
              },
              {
                "$ref": "#/components/schemas/JdbcRead"
              },
              {
                "$ref": "#/components/schemas/JdbcSinkNode"
              },
              {
                "$ref": "#/components/schemas/JdbcWrite"
              },
              {
                "$ref": "#/components/schemas/JoinFlow"
              },
              {
                "$ref": "#/components/schemas/JoinNode"
              },
              {
                "$ref": "#/components/schemas/KafkaSinkNode"
              },
              {
                "$ref": "#/components/schemas/KafkaSourceNode"
              },
              {
                "$ref": "#/components/schemas/MappingNode"
              },
              {
                "$ref": "#/components/schemas/Offer"
              },
              {
                "$ref": "#/components/schemas/OfferStorageRead"
              },
              {
                "$ref": "#/components/schemas/OfferStorageWrite"
              },
              {
                "$ref": "#/components/schemas/PolicyRead"
              },
              {
                "$ref": "#/components/schemas/PythonNode"
              },
              {
                "$ref": "#/components/schemas/RestSourceNode"
              },
              {
                "$ref": "#/components/schemas/Ruleset"
              },
              {
                "$ref": "#/components/schemas/Scorecard"
              },
              {
                "$ref": "#/components/schemas/Start"
              },
              {
                "$ref": "#/components/schemas/Subdiagram"
              },
              {
                "$ref": "#/components/schemas/TarantoolRead"
              },
              {
                "$ref": "#/components/schemas/TarantoolWrite"
              },
              {
                "$ref": "#/components/schemas/UnionNode"
              }
            ]
          },
          "nodeTypeId": {
            "type": "integer",
            "description": "Уникальный идентификатор типа узла",
            "format": "int32",
            "example": 10
          }
        },
        "description": "Объект для ремапинга свойств узла диаграммы"
      },
      "NodeAutoMappingConflictViewDto": {
        "required": [
          "currentVariableValue",
          "suggestedVariableValue",
          "variableId",
          "variableName"
        ],
        "type": "object",
        "properties": {
          "variableId": {
            "type": "string",
            "example": "Идентификатор переменной"
          },
          "variableName": {
            "type": "string",
            "example": "Имя переменной"
          },
          "currentVariableValue": {
            "type": "string",
            "example": "Значение переменной"
          },
          "suggestedVariableValue": {
            "type": "string",
            "example": "Предлагаемое значение переменной"
          }
        },
        "description": "Список расхождений, содержащий перечень атрибутов с ранее заполненным значением и переменных диаграммы, подходящих для маппинга"
      },
      "NodeAutoMappingResponseDto": {
        "required": [
          "httpCode",
          "module",
          "operation",
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "timeStamp": {
            "type": "string",
            "description": "Время ошибки",
            "format": "date-time"
          },
          "uuid": {
            "type": "string",
            "description": "uuid присвоенный при работе с объектом",
            "format": "uuid",
            "example": "d8d6ba76-ea3f-4d9b-b7b7-a819ef0f5549"
          },
          "httpCode": {
            "type": "integer",
            "description": "Дублированный http код",
            "format": "int32",
            "example": 200
          },
          "module": {
            "type": "string",
            "description": "Модуль, в котором производилось действие",
            "example": "diagram"
          },
          "operation": {
            "type": "string",
            "description": "Совершаемая операция",
            "example": "save",
            "enum": [
              "update",
              "save",
              "delete",
              "deploy",
              "validate"
            ]
          },
          "message": {
            "type": "string",
            "description": "Trace ошибки",
            "example": "Unable to find a model that matches key ModelKey"
          },
          "validationPayload": {
            "type": "object",
            "description": "Объект с ошибкой"
          },
          "autoMappingConflicts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeAutoMappingConflictViewDto"
            }
          }
        }
      },
      "LinkMoveDto": {
        "required": [
          "diagramVersionId",
          "nextNodeId",
          "prevNodeId"
        ],
        "type": "object",
        "properties": {
          "linkId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор ребра диаграммы",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "diagramVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор диаграммы",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "prevNodeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор предыдущего узла",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "nextNodeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор последующего узла",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Объект для изменения таргета ребра диаграммы"
      },
      "BatchSqlGetDto": {
        "required": [
          "dataProviderUuid",
          "diagramVersionId",
          "groupId",
          "id"
        ],
        "type": "object",
        "properties": {
          "groupId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор группы атрибутов в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "sqlSelect": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "SQL запрос для выборки данных",
            "example": "select a from b"
          },
          "dataProviderUuid": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор источника данных в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "diagramVersionId": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          },
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          }
        }
      },
      "BatchMappingGetDto": {
        "required": [
          "batchVariableId",
          "diagramVersionId",
          "groupId",
          "id",
          "name",
          "primitiveTypeId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор маппинга переменных в рамках батча в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "batchVariableId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор переменной в рамках батча в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "groupId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор группы атрибутов в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "mapping": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Маппинг элемента запроса на диаграмму",
            "example": "mapping"
          },
          "primitiveTypeId": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Уникальный идентификатор примитивного типа",
            "example": "1"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Имя для отображения на странице",
            "example": "Имя объекта"
          },
          "isNull": {
            "type": "boolean",
            "description": "Признак null значения для переменной диаграммы",
            "example": true
          },
          "diagramVersionId": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          }
        }
      },
      "BatchMappingKeyUpdateDto": {
        "required": [
          "groupId"
        ],
        "type": "object",
        "properties": {
          "batchVariablesId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор переменной из списка батча в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "parentBatchVariablesId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор верхнеуровневой переменной из списка батча в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "groupId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор группы атрибутов в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          }
        }
      },
      "AdditionalSettingsWithIdDto": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Идентификатор расширенного параметра",
            "example": "2dc26a3b-aac0-4d26-8485-0e71e8815732"
          },
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Наименование параметра",
            "format": "string",
            "example": "hbase.client.retries.number"
          },
          "value": {
            "maxLength": 1000,
            "type": "string",
            "description": "Значение параметра",
            "format": "string",
            "example": "3"
          },
          "secure": {
            "type": "boolean",
            "description": "Признак конфиденциальности параметра",
            "example": false
          }
        },
        "description": "Список дополнительных настроек"
      },
      "DataProviderSettingsFullViewDto": {
        "required": [
          "environmentSettingsId",
          "serverName",
          "sourceSettingsId"
        ],
        "type": "object",
        "properties": {
          "environmentSettingsId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "a0bb1b74-bb05-42a4-9d7d-15b3ae172180"
          },
          "serverName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Hostname источника данных. Обязателен для jdbc, tarantool",
            "example": "example.com"
          },
          "hosts": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Список хостов кластера Mongo DB с обязательным указанием Replica Set",
            "example": "rs0/127.0.0.1:51519,127.0.0.1:51518"
          },
          "port": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Порт для соединения с источником данных. Обязателен для jdbc, tarantool",
            "example": "5432"
          },
          "username": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Логин для соединения с источником данных",
            "example": "login"
          },
          "password": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Логин для соединения с источником данных",
            "example": "password"
          },
          "scheme": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Схема базы данных, которая будет использоваться в источнике данных",
            "example": "test_scheme"
          },
          "additionalProperties": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Дополнительные параметры подключения в формате соответствующей СУБД. Имя БД должно быть указано в другом параметре. В случае Oracle здесь указывается service name и, возможно, параметры, в обоих случаях без слэша.",
            "example": "fetchSize=1000&statement_timeout=90000"
          },
          "zookeeperQuorum": {
            "type": "string",
            "description": "Zookeeper Quorum. Поле обязательно для HBase",
            "format": "string",
            "example": "localhost:2181"
          },
          "zookeeperZnodeParent": {
            "type": "string",
            "description": "Zookeeper Znode Parent. Поле обязательно для HBase",
            "format": "string",
            "example": "/hbase"
          },
          "additionalSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalSettingsWithIdDto"
            }
          },
          "token": {
            "type": "string",
            "description": "Токен для доступа к данным. На текущий момент используется только для TDG",
            "format": "string",
            "example": "4b7b0fbf-faf2-4545-84b7-3f8f8da5a8ce"
          },
          "database": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Имя базы данных в случае PostgreSQL, SQL Server, Mongo DB; SID в случае Oracle",
            "example": "master"
          },
          "inputType": {
            "type": "string",
            "description": "Способ указания параметров JDBC подключения",
            "example": "url",
            "enum": [
              "parameters",
              "url"
            ]
          },
          "url": {
            "type": "string",
            "description": "JDBC URL",
            "example": "jdbc:postgresql://localhost/test"
          },
          "sourceSettingsId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор настроек источника данных в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Список настроек подключения источника данных"
      },
      "DataProviderUpdateDto": {
        "required": [
          "connectionType",
          "sourceName",
          "sourceType"
        ],
        "type": "object",
        "properties": {
          "sourceName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя источника данных",
            "example": "Витрина данных"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание источника данных",
            "example": "Операционная БД"
          },
          "sourceType": {
            "type": "string",
            "description": "Тип источника данных",
            "example": "ORACLE",
            "enum": [
              "ORACLE",
              "POSTGRES",
              "MSSQL",
              "TARANTOOL",
              "TARANTOOL_CARTRIDGE_CLUSTER",
              "TARANTOOL_DATAGRID_CLUSTER",
              "HBASE",
              "MONGO_DB"
            ]
          },
          "connectionType": {
            "type": "string",
            "description": "Тип соединения",
            "example": "JDBC",
            "enum": [
              "JDBC",
              "NO_SQL"
            ]
          },
          "settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProviderSettingsFullViewDto"
            }
          }
        },
        "description": "Объект для обновления полей источника данных"
      },
      "CustomAttributeDictionaryUpdate": {
        "required": [
          "dictName",
          "dictValueTypeId",
          "id",
          "values"
        ],
        "type": "object",
        "properties": {
          "dictName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя справочника",
            "example": "Справочник №1"
          },
          "dictValueTypeId": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Идентификатор типа значений справочника",
            "format": "string",
            "example": "1"
          },
          "id": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Идентификатор справочника в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeDictionaryValueUpdate"
            }
          }
        },
        "description": "Объект для обновления справочника"
      },
      "CustomAttributeDictionaryValueUpdate": {
        "required": [
          "dictValue",
          "dictValueDisplayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "dictValue": {
            "type": "object",
            "description": "Значение справочника",
            "example": "Отображаемое наименование значения справочника"
          },
          "dictValueDisplayName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Отображаемое наименование значения справочникаа",
            "example": "Отображаемое наименование значения справочника"
          },
          "id": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Идентификатор значения справочника в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Список значений справочника"
      },
      "AttributeCreate": {
        "required": [
          "arrayFlag",
          "attributeName",
          "complexFlag",
          "parentId"
        ],
        "type": "object",
        "properties": {
          "attributeName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя атрибута",
            "example": "name"
          },
          "complexFlag": {
            "type": "boolean",
            "description": "Флаг отображающий тип данных, к которым относится атрибут",
            "example": true
          },
          "arrayFlag": {
            "type": "boolean",
            "description": "Флаг отображающий тип объекта данных, к которым относится атрибут",
            "example": false
          },
          "primitiveTypeId": {
            "type": "string",
            "description": "Уникальный идентификатор примитивного типа. Может принимать null значения",
            "example": "1"
          },
          "complexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор комплексного типа, на который ссылается атрибут в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание атрибута",
            "example": "Имя клиента"
          },
          "parentId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор комплексного типа, от которого произведен атрибут, в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          }
        },
        "description": "Лист атрибутов для инициализации при создании пользовательского типа"
      },
      "ComplexTypeUpdate": {
        "required": [
          "displayName",
          "objectName",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "displayName": {
            "maxLength": 100,
            "type": "string",
            "description": "Имя для отображения на странице",
            "example": "Имя объекта"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание объекта комплексного типа",
            "example": "Объект пользователя, который включает в себя поля FirstName, SecondName, Phone..."
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeCreate"
            }
          }
        },
        "description": "Объект для обновления полей сложного типа"
      },
      "AttributeUpdate": {
        "required": [
          "arrayFlag",
          "attributeId",
          "attributeName",
          "complexFlag",
          "parentId"
        ],
        "type": "object",
        "properties": {
          "attributeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "attributeName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя атрибута",
            "example": "name"
          },
          "complexFlag": {
            "type": "boolean",
            "description": "Флаг отображающий тип данных, к которым относится атрибут",
            "example": true
          },
          "arrayFlag": {
            "type": "boolean",
            "description": "Флаг отображающий тип объекта данных, к которым относится атрибут",
            "example": false
          },
          "primitiveTypeId": {
            "type": "string",
            "description": "Уникальный идентификатор примитивного типа. Может принимать null значения",
            "example": "1"
          },
          "complexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор комплексного типа, на который ссылается атрибут в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание атрибута",
            "example": "Имя клиента"
          },
          "parentId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор комплексного типа, от которого произведен атрибут, в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          }
        }
      },
      "CommunicationChannelUpdateDto": {
        "required": [
          "objectName",
          "scriptVersionId"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание канала коммуникации",
            "example": "Канал коммуникации PUSH"
          },
          "scriptVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор версии скрипта, связанного с каналом коммуникации в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "communicationVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunicationVariableFullViewDto"
            }
          }
        },
        "description": "Объект для обновления канала коммуникации"
      },
      "CommunicationVariableFullViewDto": {
        "required": [
          "arrayFlag",
          "dataSourceType",
          "id",
          "mandatoryFlag",
          "scriptVariableName",
          "variableName"
        ],
        "type": "object",
        "properties": {
          "variableName": {
            "type": "string",
            "description": "Имя переменной",
            "example": "имя_переменной"
          },
          "scriptVariableName": {
            "type": "string",
            "description": "Имя переменной скрипта",
            "example": "имя_переменной_скрипта"
          },
          "primitiveTypeId": {
            "type": "string",
            "description": "Id простого типа переменной",
            "example": "1"
          },
          "complexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id комплексного типа переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "arrayFlag": {
            "type": "boolean",
            "description": "Является ли переменная массивом",
            "example": false
          },
          "dataSourceType": {
            "type": "string",
            "description": "Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)",
            "enum": [
              "USER_INPUT",
              "DICTIONARY",
              "DIAGRAM_ELEMENT"
            ]
          },
          "minValue": {
            "type": "number",
            "description": "Минимальное значение переменной",
            "format": "double",
            "example": 5.0
          },
          "maxValue": {
            "type": "number",
            "description": "Максимальное значение переменной",
            "format": "double",
            "example": 15.0
          },
          "maxSize": {
            "type": "integer",
            "description": "Максимальная длина переменной",
            "format": "int32",
            "example": 100
          },
          "dictionaryId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id справочника, в котором находятся допустимые значения переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "dynamicListType": {
            "type": "string",
            "description": "Тип отображения динамического списка",
            "enum": [
              "RADIO_BUTTON",
              "DROP_DOWN_LIST"
            ]
          },
          "mandatoryFlag": {
            "type": "boolean",
            "description": "Является ли переменная обязательной",
            "example": false
          },
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Id переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          }
        },
        "description": "Список переменных канала коммуникации"
      },
      "CommunicationChannelUpdateUserVersionDto": {
        "type": "object",
        "properties": {
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          }
        },
        "description": "Объект для обновления канала коммуникации"
      },
      "CatalogUpdate": {
        "required": [
          "catalogName"
        ],
        "type": "object",
        "properties": {
          "catalogName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя Каталога",
            "example": "Каталог №1"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Объект для перемещения элемента из каталога в каталог"
      },
      "CatalogMove": {
        "type": "object",
        "properties": {
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "elementId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор элемента в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Объект для перемещения элемента из каталога в каталог"
      },
      "AggregateJson": {
        "required": [
          "aggregateDescription",
          "aggregateFunction",
          "aggregateName",
          "aggregateVariableType",
          "groupingElement"
        ],
        "type": "object",
        "properties": {
          "aggregateName": {
            "maxLength": 100,
            "type": "string",
            "description": "Техническое наименование агрегата",
            "example": "Amount_client_24_h"
          },
          "aggregateVariableType": {
            "maxLength": 2,
            "type": "string",
            "description": "Тип переменной агрегата",
            "example": "1"
          },
          "aggregateFunction": {
            "maxLength": 100,
            "type": "string",
            "description": "Функция агрегата",
            "example": "aggSum",
            "enum": [
              "AggAverage",
              "AggCount",
              "AggCountDistinct",
              "AggCountNonNull",
              "AggFirstValue",
              "AggLastValue",
              "AggMax",
              "AggMin",
              "AggMode",
              "AggSum",
              "AggStd"
            ]
          },
          "aggregateDescription": {
            "maxLength": 1000,
            "type": "string",
            "description": "Описание агрегата",
            "example": "Сумма операций клиента за 24 часа"
          },
          "groupingElement": {
            "maxLength": 100,
            "type": "string",
            "description": "Группирующий элемент",
            "example": "Client_id"
          }
        },
        "description": "Json агрегата"
      },
      "AggregateUpdate": {
        "required": [
          "aggregateJson",
          "objectName"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "aggregateDescription": {
            "maxLength": 1000,
            "type": "string",
            "description": "Описание агрегата (бизнес наименование)",
            "example": "описание агрегата"
          },
          "aggregateJson": {
            "$ref": "#/components/schemas/AggregateJson"
          }
        }
      },
      "SqlValidationApiDto": {
        "required": [
          "dataProviderUuid",
          "sqlSelectQuery",
          "validationType"
        ],
        "type": "object",
        "properties": {
          "validationType": {
            "type": "string",
            "description": "Тип валидации sql-запроса. По этому полю выбирается нужная стратегия извлечения данных, необходимых для процесса валидациии.",
            "example": "NODE",
            "enum": [
              "NODE",
              "BATCH"
            ]
          },
          "dataProviderUuid": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор источника данных в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "sqlSelectQuery": {
            "type": "string",
            "description": "SQL-запрос для проверки",
            "format": "string",
            "example": "select column_name from table_name"
          },
          "nodeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор валидируемого узла в формате UUID 4. Необходим при типе валидации NODE",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "diagramVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор версии диаграммы в формате UUID 4. Необходим при типе валидации BATCH",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        }
      },
      "ExpressionEditorJsonGenerationDto": {
        "type": "object",
        "properties": {
          "expressionParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpressionEditorValidationParametersDto"
            }
          }
        }
      },
      "ExpressionEditorValidationParametersDto": {
        "required": [
          "typeId",
          "variableName"
        ],
        "type": "object",
        "properties": {
          "variableName": {
            "type": "string",
            "description": "Имя переменной"
          },
          "variablePath": {
            "type": "string",
            "description": "Путь до переменной"
          },
          "typeId": {
            "type": "string",
            "description": "Идентификатор типа переменной"
          },
          "isArray": {
            "type": "boolean",
            "description": "Признак массива"
          },
          "isComplex": {
            "type": "boolean",
            "description": "Признак сложного типа"
          },
          "isDict": {
            "type": "boolean",
            "description": "Признак словаря"
          },
          "variableRootId": {
            "type": "string",
            "description": "Исходный комплексный тип"
          }
        }
      },
      "ExpressionEditorJsonGenerationResultDto": {
        "type": "object",
        "properties": {
          "json": {
            "type": "string",
            "description": "Сгенерированный json"
          }
        }
      },
      "ExpressionEditorValidationDto": {
        "required": [
          "calculatedParameter",
          "expression"
        ],
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "Валидируемое выражение"
          },
          "functionIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "Идентификаторы используемых в выражении пользовательских функций",
            "items": {
              "type": "string",
              "description": "Идентификаторы используемых в выражении пользовательских функций"
            }
          },
          "json": {
            "type": "string",
            "description": "Заполненный json"
          },
          "calculatedParameter": {
            "$ref": "#/components/schemas/ExpressionEditorValidationParametersDto"
          },
          "expressionParameters": {
            "type": "array",
            "description": "Параметры, используемые в выражении",
            "items": {
              "$ref": "#/components/schemas/ExpressionEditorValidationParametersDto"
            }
          }
        }
      },
      "ExpressionEditorValidationResultDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Статус валидации",
            "enum": [
              "SUCCESS",
              "FAILED"
            ]
          },
          "result": {
            "type": "string",
            "description": "Результат валидации"
          }
        }
      },
      "UserFunctionShortView": {
        "required": [
          "functionClass",
          "jarFunctionName",
          "objectName"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "jarFunctionName": {
            "type": "string",
            "description": "Имя пользовательской функции в jar-файле",
            "example": "myFunction(java.lang.Integer)"
          },
          "functionClass": {
            "type": "string",
            "description": "Полный путь до класса, в котором содержится функция в jar-файле",
            "example": "com.package.SomeClass"
          }
        }
      },
      "UserJarFunctionsDto": {
        "type": "object",
        "properties": {
          "jarId": {
            "type": "string"
          },
          "functions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFunctionShortView"
            }
          }
        }
      },
      "UserFunctionUploadView": {
        "required": [
          "functionClass",
          "jarFunctionName",
          "objectName"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "jarFunctionName": {
            "type": "string",
            "description": "Имя пользовательской функции в jar-файле",
            "example": "myFunction(java.lang.Integer)"
          },
          "functionClass": {
            "type": "string",
            "description": "Полный путь до класса, в котором содержится функция в jar-файле",
            "example": "com.package.SomeClass"
          },
          "resultType": {
            "type": "string",
            "description": "Тип возвращаемого пользовательской функцией значения",
            "example": "Дробный"
          },
          "description": {
            "type": "string",
            "description": "Описание пользовательской функции",
            "example": "Описание"
          }
        }
      },
      "StartTestsDto": {
        "type": "object",
        "properties": {
          "startedTests": {
            "type": "array",
            "description": "Идентификаторы запущенных",
            "items": {
              "type": "string",
              "description": "Идентификаторы запущенных"
            }
          },
          "failedToStartTests": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Тесты, которые не удалось запустить. Ключ - id теста, значение - текст причины"
            },
            "description": "Тесты, которые не удалось запустить. Ключ - id теста, значение - текст причины"
          }
        }
      },
      "EmptyTestCreate": {
        "required": [
          "diagramId",
          "locale"
        ],
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "enum": [
              "en",
              "ru"
            ]
          },
          "diagramId": {
            "type": "string"
          }
        }
      },
      "EmptyTestDto": {
        "required": [
          "testId",
          "testName"
        ],
        "type": "object",
        "properties": {
          "testId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор теста в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "testName": {
            "type": "string",
            "description": "Имя теста",
            "example": "test_01"
          },
          "timeout": {
            "type": "integer",
            "description": "Таймаут в секундах",
            "format": "int32",
            "example": 10
          }
        }
      },
      "ExternalServiceCreateDto": {
        "required": [
          "objectName",
          "protocol",
          "syncType"
        ],
        "type": "object",
        "properties": {
          "isAvailableInProperties": {
            "type": "boolean",
            "description": "Флаг того, что характеристики ВС будут доступны в __PROPERTIES__",
            "example": true
          },
          "batchFlag": {
            "type": "boolean",
            "description": "Признак пакетного взаимодействия",
            "example": false
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание внешнего сервиса",
            "example": "Внешний сервис данных"
          },
          "fileFormat": {
            "type": "string",
            "description": "Формат сообщения",
            "example": "JSON",
            "enum": [
              "JSON",
              "XML"
            ]
          },
          "method": {
            "type": "string",
            "description": "Используемый метод взаимодействия",
            "example": "GET",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH"
            ]
          },
          "protocol": {
            "type": "string",
            "description": "Протокол доступа",
            "example": "REST",
            "enum": [
              "REST",
              "SOAP"
            ]
          },
          "syncType": {
            "type": "string",
            "description": "Тип взаимодействия",
            "example": "SYNC",
            "enum": [
              "SYNC",
              "ASYNC"
            ]
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "body": {
            "type": "string",
            "description": "Тело запроса",
            "example": "{request_id: {requestid}}"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "serviceSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceSettingsViewWithoutIdDto"
            }
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceHeaderViewWithoutIdDto"
            }
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceVariableViewWithoutIdDto"
            }
          }
        }
      },
      "ExternalServiceHeaderViewWithoutIdDto": {
        "required": [
          "headerName",
          "headerValue"
        ],
        "type": "object",
        "properties": {
          "headerName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Имя заголовка",
            "example": "Cookie"
          },
          "headerValue": {
            "type": "string",
            "description": "Значение заголовка",
            "example": "Value"
          }
        },
        "description": "Список заголовков внешнего сервиса"
      },
      "ExternalServiceSettingsViewWithoutIdDto": {
        "required": [
          "endpoint",
          "environmentSettingsId",
          "host",
          "port",
          "serviceType"
        ],
        "type": "object",
        "properties": {
          "environmentSettingsId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "host": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Имя хоста",
            "example": "192.168.0.1"
          },
          "serviceType": {
            "type": "string",
            "description": "Тип обмена",
            "example": "HTTPS",
            "enum": [
              "HTTP",
              "HTTPS"
            ]
          },
          "endpoint": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Endpoint внешнего сервиса",
            "example": "diagram/node/{nodeId}"
          },
          "port": {
            "maximum": 65535,
            "maxLength": 5,
            "type": "integer",
            "description": "Порт внешнего сервиса",
            "format": "int32",
            "example": 8080
          },
          "secondAttemptsCnt": {
            "maximum": 10,
            "type": "integer",
            "description": "Количество повторных попыток отправки сообщения",
            "format": "int32",
            "example": 3
          },
          "transactionsPerSecond": {
            "type": "integer",
            "description": "Частота транзакций",
            "format": "int32",
            "example": 1
          },
          "interval": {
            "maxLength": 4,
            "type": "integer",
            "description": "Интервал между повторными попытками отправки в секундах",
            "format": "int32",
            "example": 5
          },
          "timeout": {
            "maxLength": 4,
            "type": "integer",
            "description": "Максимальное время ожидания ответа в секундах",
            "format": "int32",
            "example": 5
          },
          "keycloakClientId": {
            "maxLength": 50,
            "type": "string",
            "description": "Keycloak client",
            "example": "decision.frontend"
          },
          "keycloakClientSecret": {
            "maxLength": 100,
            "type": "string",
            "description": "Keycloak Client Secret",
            "example": "secret"
          },
          "keycloakUser": {
            "maxLength": 32,
            "type": "string",
            "description": "Keycloak User",
            "example": "userName"
          },
          "keycloakPassword": {
            "maxLength": 100,
            "type": "string",
            "description": "Keycloak password",
            "example": "password"
          },
          "keycloakGrantType": {
            "type": "string",
            "description": "Тип GrantType",
            "enum": [
              "CLIENT_CREDENTIALS",
              "PASSWORD"
            ]
          },
          "keycloakServer": {
            "maxLength": 200,
            "type": "string",
            "description": "Сервер Keycloak",
            "example": "https://auth.k8s.datasapience.ru/auth"
          },
          "keycloakRealm": {
            "maxLength": 50,
            "type": "string",
            "description": "Realm Keycloak",
            "example": "dev"
          },
          "isKeyCloakAuth": {
            "type": "boolean",
            "description": "Использовать авторизацию при помощи Keycloak",
            "example": false
          }
        },
        "description": "Список настроек подключения внешнего сервиса"
      },
      "ExternalServiceVariableViewWithoutIdDto": {
        "required": [
          "isArray",
          "isComplex",
          "variableName"
        ],
        "type": "object",
        "properties": {
          "variableName": {
            "type": "string",
            "description": "Имя переменной",
            "example": "имя_переменной"
          },
          "primitiveTypeId": {
            "type": "string",
            "description": "Id простого типа переменной",
            "example": "1"
          },
          "complexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id комплексного типа переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "variableType": {
            "type": "string",
            "description": "Тип параметра (входной, выходной, рассчитываемый)",
            "enum": [
              "IN",
              "OUT",
              "CALCULATED",
              "ERROR"
            ]
          },
          "isArray": {
            "type": "boolean",
            "description": "Является ли переменная массивом",
            "example": false
          },
          "isComplex": {
            "type": "boolean",
            "description": "Является ли переменная комплексным типом",
            "example": false
          },
          "sourcePath": {
            "type": "string",
            "description": "Путь к значению переменной в структуре ответа сервиса",
            "example": "/"
          },
          "expression": {
            "type": "string",
            "description": "Выражение для рассчета переменной",
            "example": "ln(e)"
          },
          "functionIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "childVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceVariableViewWithoutIdDto"
            }
          }
        },
        "description": "Список переменных внешнего сервиса"
      },
      "ExternalServiceCreateUserVersionDto": {
        "required": [
          "objectName",
          "protocol",
          "syncType"
        ],
        "type": "object",
        "properties": {
          "isAvailableInProperties": {
            "type": "boolean",
            "description": "Флаг того, что характеристики ВС будут доступны в __PROPERTIES__",
            "example": true
          },
          "batchFlag": {
            "type": "boolean",
            "description": "Признак пакетного взаимодействия",
            "example": false
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание внешнего сервиса",
            "example": "Внешний сервис данных"
          },
          "fileFormat": {
            "type": "string",
            "description": "Формат сообщения",
            "example": "JSON",
            "enum": [
              "JSON",
              "XML"
            ]
          },
          "method": {
            "type": "string",
            "description": "Используемый метод взаимодействия",
            "example": "GET",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH"
            ]
          },
          "protocol": {
            "type": "string",
            "description": "Протокол доступа",
            "example": "REST",
            "enum": [
              "REST",
              "SOAP"
            ]
          },
          "syncType": {
            "type": "string",
            "description": "Тип взаимодействия",
            "example": "SYNC",
            "enum": [
              "SYNC",
              "ASYNC"
            ]
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "body": {
            "type": "string",
            "description": "Тело запроса",
            "example": "{request_id: {requestid}}"
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "serviceSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceSettingsFullViewDto"
            }
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceHeaderViewWithoutIdDto"
            }
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceVariableViewWithoutIdDto"
            }
          }
        }
      },
      "PythonCreate": {
        "required": [
          "objectName",
          "scriptText"
        ],
        "type": "object",
        "properties": {
          "scriptText": {
            "type": "string",
            "description": "Текст скрипта",
            "example": "Текст скрипта"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание скрипта",
            "example": "описание скрипта"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptVariableViewWithoutVersionIdDto"
            }
          },
          "pythonEnvironmentVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор версии окружения python в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        }
      },
      "ScriptVariableViewWithoutVersionIdDto": {
        "required": [
          "arrayFlag",
          "variableName",
          "variableType"
        ],
        "type": "object",
        "properties": {
          "variableName": {
            "type": "string",
            "description": "Имя переменной",
            "example": "имя_переменной"
          },
          "primitiveTypeId": {
            "type": "integer",
            "description": "Id простого типа переменной",
            "format": "int32",
            "example": 1
          },
          "complexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id комплексного типа переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "variableType": {
            "type": "string",
            "description": "Тип параметра (входной, выходной)",
            "enum": [
              "IN",
              "OUT"
            ]
          },
          "arrayFlag": {
            "type": "boolean",
            "description": "Является ли переменная массивом",
            "example": false
          }
        },
        "description": "Список переменных скрипта"
      },
      "PythonValidate": {
        "required": [
          "scriptText"
        ],
        "type": "object",
        "properties": {
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptVariableFullView"
            }
          },
          "scriptText": {
            "type": "string",
            "description": "Текст скрипта",
            "example": "Текст скрипта"
          }
        },
        "description": "Объект для валидации"
      },
      "PythonCreateUserVersion": {
        "required": [
          "objectName",
          "scriptId",
          "scriptText"
        ],
        "type": "object",
        "properties": {
          "scriptText": {
            "type": "string",
            "description": "Текст скрипта",
            "example": "Текст скрипта"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание скрипта",
            "example": "описание скрипта"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptVariableViewWithoutVersionIdDto"
            }
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "pythonEnvironmentVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор версии окружения python в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "scriptId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор скрипта в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        }
      },
      "GroovyCreate": {
        "required": [
          "objectName",
          "scriptText"
        ],
        "type": "object",
        "properties": {
          "scriptText": {
            "type": "string",
            "description": "Текст скрипта",
            "example": "Текст скрипта"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание скрипта",
            "example": "описание скрипта"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptVariableViewWithoutVersionIdDto"
            }
          }
        }
      },
      "GroovyValidate": {
        "required": [
          "scriptText"
        ],
        "type": "object",
        "properties": {
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptVariableFullView"
            }
          },
          "scriptText": {
            "type": "string",
            "description": "Текст скрипта",
            "example": "Текст скрипта"
          }
        },
        "description": "Объект для валидации"
      },
      "GroovyCreateUserVersion": {
        "required": [
          "objectName",
          "scriptId",
          "scriptText"
        ],
        "type": "object",
        "properties": {
          "scriptText": {
            "type": "string",
            "description": "Текст скрипта",
            "example": "Текст скрипта"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание скрипта",
            "example": "описание скрипта"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptVariableViewWithoutVersionIdDto"
            }
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "scriptId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор скрипта в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        }
      },
      "PythonVersionFullViewDto": {
        "required": [
          "id",
          "image",
          "versionName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор версии python в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии python",
            "example": "Python 3.6"
          },
          "image": {
            "maxLength": 200,
            "minLength": 1,
            "type": "string",
            "description": "Адрес образа python",
            "example": "harbor.k8s.datasapience.ru/datasapience-registry/st-di/udf-server"
          }
        }
      },
      "PythonEnvironmentCreateDto": {
        "required": [
          "name",
          "pythonVersionId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя окружения python",
            "example": "питон"
          },
          "pythonVersionId": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Идентификатор версии python",
            "example": "597e4cc3-98d2-42a6-9209-e803417fcba7"
          },
          "requirementsTxt": {
            "type": "string",
            "description": "Текст файла requirements.txt",
            "example": "pandas==0.2.0"
          },
          "pythonEnvironmentSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PythonEnvironmentSettingsWithoutIdDto"
            }
          }
        }
      },
      "PythonEnvironmentSettingsWithoutIdDto": {
        "required": [
          "environmentId",
          "limitsCpu",
          "limitsMemory",
          "requestsCpu",
          "requestsMemory"
        ],
        "type": "object",
        "properties": {
          "limitsCpu": {
            "type": "number",
            "description": "Верхняя граница количество ядер",
            "format": "double",
            "example": 0.1
          },
          "requestsCpu": {
            "type": "number",
            "description": "Необходимое количество ядер",
            "format": "double",
            "example": 0.1
          },
          "limitsMemory": {
            "type": "integer",
            "description": "Верхняя граница количество памяти",
            "format": "int32",
            "example": 1000
          },
          "requestsMemory": {
            "type": "integer",
            "description": "Необходимое количество ядер",
            "format": "int32",
            "example": 500
          },
          "environmentId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор окружения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Список настроек окружения питона по окружению"
      },
      "RuleTypeCreateDto": {
        "required": [
          "displayName",
          "typeName"
        ],
        "type": "object",
        "properties": {
          "typeName": {
            "maxLength": 100,
            "type": "string",
            "description": "Системное имя в UTF-8",
            "example": "Name object"
          },
          "displayName": {
            "maxLength": 100,
            "type": "string",
            "description": "Имя для отображения на странице",
            "example": "Имя объекта"
          }
        },
        "description": "Объект для создания нового типа правила"
      },
      "RestSourceCreateDto": {
        "required": [
          "objectName"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание REST источника",
            "example": "REST источник"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "restSourceSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestSourceSettingsViewWithoutIdDto"
            }
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        }
      },
      "RestSourceSettingsViewWithoutIdDto": {
        "required": [
          "environmentId",
          "host",
          "port",
          "protocol"
        ],
        "type": "object",
        "properties": {
          "environmentId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор настроек окружения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "host": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Имя хоста",
            "example": "192.168.0.1"
          },
          "port": {
            "maximum": 65535,
            "maxLength": 5,
            "type": "integer",
            "description": "Порт внешнего сервиса",
            "format": "int32",
            "example": 8080
          },
          "protocol": {
            "$ref": "#/components/schemas/Protocol"
          }
        },
        "description": "Список настроек подключения внешнего сервиса"
      },
      "OfferCreateDto": {
        "required": [
          "objectName",
          "offerComplexTypeVersionId",
          "scriptId",
          "scriptName",
          "scriptVersionId"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "scriptVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор версии скрипта, связанного с шаблоном предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "scriptName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя скрипта, связанного с шаблоном предложения в формате UUID 4",
            "example": "Код создания предложения Автокредит"
          },
          "scriptId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор скрипта, связанного с шаблоном предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "offerComplexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id комплексного типа предложения",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "offerVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferVariableWithoutIdDto"
            }
          }
        }
      },
      "OfferVariableWithoutIdDto": {
        "required": [
          "arrayFlag",
          "dataSourceType",
          "mandatoryFlag",
          "scriptVariableName",
          "variableName"
        ],
        "type": "object",
        "properties": {
          "variableName": {
            "type": "string",
            "description": "Имя переменной",
            "example": "имя_переменной"
          },
          "scriptVariableName": {
            "type": "string",
            "description": "Имя переменной скрипта",
            "example": "имя_переменной_скрипта"
          },
          "primitiveTypeId": {
            "type": "string",
            "description": "Id простого типа переменной",
            "example": "1"
          },
          "complexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id комплексного типа переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "arrayFlag": {
            "type": "boolean",
            "description": "Является ли переменная массивом",
            "example": false
          },
          "dataSourceType": {
            "type": "string",
            "description": "Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)",
            "enum": [
              "USER_INPUT",
              "DICTIONARY",
              "DIAGRAM_ELEMENT"
            ]
          },
          "minValue": {
            "type": "number",
            "description": "Минимальное значение переменной",
            "format": "double",
            "example": 5.0
          },
          "maxValue": {
            "type": "number",
            "description": "Максимальное значение переменной",
            "format": "double",
            "example": 15.0
          },
          "maxSize": {
            "type": "integer",
            "description": "Максимальная длина переменной",
            "format": "int32",
            "example": 100
          },
          "dictionaryId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id справочника, в котором находятся допустимые значения переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "dynamicListType": {
            "type": "string",
            "description": "Тип отображения динамического списка",
            "enum": [
              "RADIO_BUTTON",
              "DROP_DOWN_LIST"
            ]
          },
          "mandatoryFlag": {
            "type": "boolean",
            "description": "Является ли переменная обязательной",
            "example": false
          }
        },
        "description": "Список переменных шаблона предложения"
      },
      "OfferCreateUserVersionDto": {
        "required": [
          "id",
          "objectName",
          "offerComplexTypeVersionId",
          "scriptId",
          "scriptName",
          "scriptVersionId"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "scriptVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор версии скрипта, связанного с шаблоном предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "scriptName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя скрипта, связанного с шаблоном предложения в формате UUID 4",
            "example": "Код создания предложения Автокредит"
          },
          "scriptId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор скрипта, связанного с шаблоном предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "offerComplexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id комплексного типа предложения",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор шаблона предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          },
          "offerVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferVariableWithoutIdDto"
            }
          }
        }
      },
      "ConfirmImportAllObjectInfo": {
        "type": "object",
        "properties": {
          "deploys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfirmImportObjectInfo"
            }
          },
          "diagrams": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfirmImportObjectInfo"
            }
          },
          "complexTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfirmImportObjectInfo"
            }
          },
          "dictionaries": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfirmImportObjectInfo"
            }
          },
          "scripts": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfirmImportObjectInfo"
            }
          },
          "externalServices": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfirmImportObjectInfo"
            }
          },
          "aggregates": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfirmImportObjectInfo"
            }
          },
          "dataProviders": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfirmImportObjectInfo"
            }
          },
          "communications": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfirmImportObjectInfo"
            }
          },
          "offers": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfirmImportObjectInfo"
            }
          }
        }
      },
      "ConfirmImportObjectInfo": {
        "required": [
          "isExists",
          "objectId",
          "objectName",
          "objectType",
          "objectVersionId",
          "objectVersionName",
          "objectVersionType"
        ],
        "type": "object",
        "properties": {
          "objectType": {
            "type": "string",
            "description": "Тип объекта",
            "enum": [
              "DEPLOY",
              "DIAGRAM",
              "AGGREGATE",
              "CUSTOM_CODE",
              "COMPLEX_TYPE",
              "SERVICE",
              "REST_SOURCE",
              "DATA_PROVIDER",
              "CUSTOM_ATTRIBUTE_DICTIONARY",
              "COMMUNICATION_CHANNEL",
              "OFFER",
              "USER_FUNCTION",
              "DATA_PROVIDER_RELATION",
              "CATALOG",
              "KAFKA",
              "PYTHON_ENVIRONMENT",
              "PYTHON_ENVIRONMENT_RELATION",
              "DIAGRAM_RELATION",
              "CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS",
              "OFFER_RELATION",
              "SERVICE_RELATION",
              "REST_SOURCE_RELATION",
              "CUSTOM_CODE_RELATION",
              "COMMUNICATION_RELATION",
              "AGGREGATE_RELATION",
              "MESSAGE_BROKER",
              "LOCKING"
            ]
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Диаграмма расчета платежа"
          },
          "objectId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор объекта",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии объекта",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectVersionName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Уникальный идентификатор версии объекта",
            "example": "Версия 1.0"
          },
          "objectVersionType": {
            "type": "string",
            "description": "Тип версии объекта",
            "enum": [
              "TEMP",
              "DEPLOYED",
              "LATEST",
              "USER_LOCAL",
              "USER_TEMP",
              "USER_GLOBAL",
              "TEST_DEPLOYED"
            ]
          },
          "rootObjects": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "isExists": {
            "type": "boolean",
            "description": "Признак наличия объекта или версии объекта на контуре импорта",
            "example": true
          }
        },
        "description": "Список предложений"
      },
      "ConfirmImportResponseDto": {
        "type": "object",
        "properties": {
          "objectsInfo": {
            "$ref": "#/components/schemas/ConfirmImportAllObjectInfo"
          },
          "fileName": {
            "type": "string"
          }
        }
      },
      "ImportObjectInfo": {
        "required": [
          "isExists",
          "isSelected",
          "objectId",
          "objectName",
          "objectType",
          "objectVersionId",
          "objectVersionName",
          "objectVersionType",
          "status"
        ],
        "type": "object",
        "properties": {
          "objectType": {
            "type": "string",
            "description": "Тип объекта",
            "enum": [
              "DEPLOY",
              "DIAGRAM",
              "AGGREGATE",
              "CUSTOM_CODE",
              "COMPLEX_TYPE",
              "SERVICE",
              "REST_SOURCE",
              "DATA_PROVIDER",
              "CUSTOM_ATTRIBUTE_DICTIONARY",
              "COMMUNICATION_CHANNEL",
              "OFFER",
              "USER_FUNCTION",
              "DATA_PROVIDER_RELATION",
              "CATALOG",
              "KAFKA",
              "PYTHON_ENVIRONMENT",
              "PYTHON_ENVIRONMENT_RELATION",
              "DIAGRAM_RELATION",
              "CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS",
              "OFFER_RELATION",
              "SERVICE_RELATION",
              "REST_SOURCE_RELATION",
              "CUSTOM_CODE_RELATION",
              "COMMUNICATION_RELATION",
              "AGGREGATE_RELATION",
              "MESSAGE_BROKER",
              "LOCKING"
            ]
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Диаграмма расчета платежа"
          },
          "objectId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор объекта",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии объекта",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectVersionName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Уникальный идентификатор версии объекта",
            "example": "Версия 1.0"
          },
          "objectVersionType": {
            "type": "string",
            "description": "Тип версии объекта",
            "enum": [
              "TEMP",
              "DEPLOYED",
              "LATEST",
              "USER_LOCAL",
              "USER_TEMP",
              "USER_GLOBAL",
              "TEST_DEPLOYED"
            ]
          },
          "rootObjects": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "isExists": {
            "type": "boolean",
            "description": "Признак наличия объекта или версии объекта на контуре импорта",
            "example": true
          },
          "isSelected": {
            "type": "boolean",
            "description": "Признак выбранного объекта",
            "example": true
          },
          "status": {
            "type": "string",
            "description": "Статус операции над объектом",
            "enum": [
              "SUCCESS",
              "FAILED",
              "CANCELED"
            ]
          }
        },
        "description": "Список предложений"
      },
      "SelectedImportDto": {
        "required": [
          "fileName",
          "objectsInfo"
        ],
        "type": "object",
        "properties": {
          "objectsInfo": {
            "$ref": "#/components/schemas/SelectedImportStatusDto"
          },
          "fileName": {
            "type": "string"
          }
        }
      },
      "SelectedImportStatusDto": {
        "type": "object",
        "properties": {
          "deploys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportObjectInfo"
            }
          },
          "diagrams": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportObjectInfo"
            }
          },
          "complexTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportObjectInfo"
            }
          },
          "dictionaries": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportObjectInfo"
            }
          },
          "scripts": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportObjectInfo"
            }
          },
          "externalServices": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportObjectInfo"
            }
          },
          "aggregates": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportObjectInfo"
            }
          },
          "dataProviders": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportObjectInfo"
            }
          },
          "communications": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportObjectInfo"
            }
          },
          "offers": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportObjectInfo"
            }
          }
        }
      },
      "ImportResponseDto": {
        "type": "object",
        "properties": {
          "importStatus": {
            "$ref": "#/components/schemas/SelectedImportDto"
          },
          "totalNumberOfObjects": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfSelectedObjects": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfImportedObjects": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GenerateConfirmExportDtoRequest": {
        "required": [
          "isIncludeAllVersions",
          "isIncludeDependencies",
          "objectIds",
          "objectsType"
        ],
        "type": "object",
        "properties": {
          "objectsType": {
            "type": "string",
            "description": "Тип экспортируемого объекта",
            "enum": [
              "DEPLOY",
              "DIAGRAM",
              "AGGREGATE",
              "CUSTOM_CODE",
              "COMPLEX_TYPE",
              "SERVICE",
              "REST_SOURCE",
              "DATA_PROVIDER",
              "CUSTOM_ATTRIBUTE_DICTIONARY",
              "COMMUNICATION_CHANNEL",
              "OFFER",
              "USER_FUNCTION",
              "DATA_PROVIDER_RELATION",
              "CATALOG",
              "KAFKA",
              "PYTHON_ENVIRONMENT",
              "PYTHON_ENVIRONMENT_RELATION",
              "DIAGRAM_RELATION",
              "CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS",
              "OFFER_RELATION",
              "SERVICE_RELATION",
              "REST_SOURCE_RELATION",
              "CUSTOM_CODE_RELATION",
              "COMMUNICATION_RELATION",
              "AGGREGATE_RELATION",
              "MESSAGE_BROKER",
              "LOCKING"
            ]
          },
          "objectIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isIncludeAllVersions": {
            "type": "boolean",
            "description": "Признак экспорта всех версий объекта",
            "example": false
          },
          "isIncludeDependencies": {
            "type": "boolean",
            "description": "Признак включения зависимых объектов",
            "example": false
          }
        },
        "description": "Объект для запроса списка экспортируемых объектов"
      },
      "BasicMigrationObjectInfo": {
        "required": [
          "objectId",
          "objectName",
          "objectType",
          "objectVersionId",
          "objectVersionName",
          "objectVersionType"
        ],
        "type": "object",
        "properties": {
          "objectType": {
            "type": "string",
            "description": "Тип объекта",
            "enum": [
              "DEPLOY",
              "DIAGRAM",
              "AGGREGATE",
              "CUSTOM_CODE",
              "COMPLEX_TYPE",
              "SERVICE",
              "REST_SOURCE",
              "DATA_PROVIDER",
              "CUSTOM_ATTRIBUTE_DICTIONARY",
              "COMMUNICATION_CHANNEL",
              "OFFER",
              "USER_FUNCTION",
              "DATA_PROVIDER_RELATION",
              "CATALOG",
              "KAFKA",
              "PYTHON_ENVIRONMENT",
              "PYTHON_ENVIRONMENT_RELATION",
              "DIAGRAM_RELATION",
              "CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS",
              "OFFER_RELATION",
              "SERVICE_RELATION",
              "REST_SOURCE_RELATION",
              "CUSTOM_CODE_RELATION",
              "COMMUNICATION_RELATION",
              "AGGREGATE_RELATION",
              "MESSAGE_BROKER",
              "LOCKING"
            ]
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Диаграмма расчета платежа"
          },
          "objectId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор объекта",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии объекта",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectVersionName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Уникальный идентификатор версии объекта",
            "example": "Версия 1.0"
          },
          "objectVersionType": {
            "type": "string",
            "description": "Тип версии объекта",
            "enum": [
              "TEMP",
              "DEPLOYED",
              "LATEST",
              "USER_LOCAL",
              "USER_TEMP",
              "USER_GLOBAL",
              "TEST_DEPLOYED"
            ]
          },
          "rootObjects": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "description": "Список предложений"
      },
      "ConfirmExportDto": {
        "type": "object",
        "properties": {
          "deploys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicMigrationObjectInfo"
            }
          },
          "diagrams": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicMigrationObjectInfo"
            }
          },
          "complexTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicMigrationObjectInfo"
            }
          },
          "dictionaries": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicMigrationObjectInfo"
            }
          },
          "scripts": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicMigrationObjectInfo"
            }
          },
          "externalServices": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicMigrationObjectInfo"
            }
          },
          "aggregates": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicMigrationObjectInfo"
            }
          },
          "dataProviders": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicMigrationObjectInfo"
            }
          },
          "communications": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicMigrationObjectInfo"
            }
          },
          "offers": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicMigrationObjectInfo"
            }
          }
        }
      },
      "ExportObjectInfo": {
        "required": [
          "isSelected",
          "objectId",
          "objectName",
          "objectType",
          "objectVersionId",
          "objectVersionName",
          "objectVersionType",
          "status"
        ],
        "type": "object",
        "properties": {
          "objectType": {
            "type": "string",
            "description": "Тип объекта",
            "enum": [
              "DEPLOY",
              "DIAGRAM",
              "AGGREGATE",
              "CUSTOM_CODE",
              "COMPLEX_TYPE",
              "SERVICE",
              "REST_SOURCE",
              "DATA_PROVIDER",
              "CUSTOM_ATTRIBUTE_DICTIONARY",
              "COMMUNICATION_CHANNEL",
              "OFFER",
              "USER_FUNCTION",
              "DATA_PROVIDER_RELATION",
              "CATALOG",
              "KAFKA",
              "PYTHON_ENVIRONMENT",
              "PYTHON_ENVIRONMENT_RELATION",
              "DIAGRAM_RELATION",
              "CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS",
              "OFFER_RELATION",
              "SERVICE_RELATION",
              "REST_SOURCE_RELATION",
              "CUSTOM_CODE_RELATION",
              "COMMUNICATION_RELATION",
              "AGGREGATE_RELATION",
              "MESSAGE_BROKER",
              "LOCKING"
            ]
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Диаграмма расчета платежа"
          },
          "objectId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор объекта",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии объекта",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectVersionName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Уникальный идентификатор версии объекта",
            "example": "Версия 1.0"
          },
          "objectVersionType": {
            "type": "string",
            "description": "Тип версии объекта",
            "enum": [
              "TEMP",
              "DEPLOYED",
              "LATEST",
              "USER_LOCAL",
              "USER_TEMP",
              "USER_GLOBAL",
              "TEST_DEPLOYED"
            ]
          },
          "rootObjects": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "isSelected": {
            "type": "boolean",
            "description": "Признак выбранного объекта",
            "example": true
          },
          "status": {
            "type": "string",
            "description": "Статус операции над объектом",
            "enum": [
              "SUCCESS",
              "FAILED",
              "CANCELED"
            ]
          }
        },
        "description": "Список предложений"
      },
      "ExportStatusDto": {
        "type": "object",
        "properties": {
          "deploys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportObjectInfo"
            }
          },
          "diagrams": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportObjectInfo"
            }
          },
          "complexTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportObjectInfo"
            }
          },
          "dictionaries": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportObjectInfo"
            }
          },
          "scripts": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportObjectInfo"
            }
          },
          "externalServices": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportObjectInfo"
            }
          },
          "aggregates": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportObjectInfo"
            }
          },
          "dataProviders": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportObjectInfo"
            }
          },
          "communications": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportObjectInfo"
            }
          },
          "offers": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportObjectInfo"
            }
          }
        }
      },
      "ExportResponseDto": {
        "type": "object",
        "properties": {
          "exportStatus": {
            "$ref": "#/components/schemas/ExportStatusDto"
          },
          "totalNumberOfObjects": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfSelectedObjects": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfExportedObjects": {
            "type": "integer",
            "format": "int32"
          },
          "fileName": {
            "type": "string"
          }
        }
      },
      "LockingDtoShortView": {
        "required": [
          "httpCode",
          "module",
          "objectName",
          "operation",
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "timeStamp": {
            "type": "string",
            "description": "Время ошибки",
            "format": "date-time"
          },
          "uuid": {
            "type": "string",
            "description": "uuid присвоенный при работе с объектом",
            "format": "uuid",
            "example": "d8d6ba76-ea3f-4d9b-b7b7-a819ef0f5549"
          },
          "httpCode": {
            "type": "integer",
            "description": "Дублированный http код",
            "format": "int32",
            "example": 200
          },
          "module": {
            "type": "string",
            "description": "Модуль, в котором производилось действие",
            "example": "diagram"
          },
          "operation": {
            "type": "string",
            "description": "Совершаемая операция",
            "example": "save",
            "enum": [
              "update",
              "save",
              "delete",
              "deploy",
              "validate"
            ]
          },
          "message": {
            "type": "string",
            "description": "Trace ошибки",
            "example": "Unable to find a model that matches key ModelKey"
          },
          "validationPayload": {
            "type": "object",
            "description": "Объект с ошибкой"
          },
          "objectName": {
            "maxLength": 100,
            "type": "string",
            "description": "Имя объекта",
            "example": "Тестовая диаграмма"
          },
          "createByUser": {
            "type": "string"
          }
        }
      },
      "LockedObjectEntity": {
        "type": "object",
        "properties": {
          "objectType": {
            "type": "string",
            "enum": [
              "DEPLOY",
              "DIAGRAM",
              "AGGREGATE",
              "CUSTOM_CODE",
              "COMPLEX_TYPE",
              "SERVICE",
              "REST_SOURCE",
              "DATA_PROVIDER",
              "CUSTOM_ATTRIBUTE_DICTIONARY",
              "COMMUNICATION_CHANNEL",
              "OFFER",
              "USER_FUNCTION",
              "DATA_PROVIDER_RELATION",
              "CATALOG",
              "KAFKA",
              "PYTHON_ENVIRONMENT",
              "PYTHON_ENVIRONMENT_RELATION",
              "DIAGRAM_RELATION",
              "CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS",
              "OFFER_RELATION",
              "SERVICE_RELATION",
              "REST_SOURCE_RELATION",
              "CUSTOM_CODE_RELATION",
              "COMMUNICATION_RELATION",
              "AGGREGATE_RELATION",
              "MESSAGE_BROKER",
              "LOCKING"
            ]
          },
          "objectId": {
            "type": "string"
          }
        }
      },
      "KafkaAdditionalSettingsWithoutIdDto": {
        "required": [
          "propertyName",
          "propertyValue"
        ],
        "type": "object",
        "properties": {
          "propertyName": {
            "maxLength": 100,
            "type": "string",
            "description": "Наименование параметра",
            "format": "string",
            "example": "kafka.bootstrap.servers"
          },
          "propertyValue": {
            "maxLength": 1000,
            "type": "string",
            "description": "Значение параметра",
            "format": "string",
            "example": "kafka-bootstrap.server.ru"
          },
          "propertySecure": {
            "type": "boolean",
            "description": "Признак конфиденциальности параметра",
            "example": false
          }
        },
        "description": "Список дополнительных настроек Kafka"
      },
      "KafkaCreateDto": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя kafka",
            "example": "local kafka"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание kafka",
            "example": "Kafka для тестирования"
          },
          "kafkaSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KafkaSettingsWithoutIdDto"
            }
          }
        }
      },
      "KafkaSettingsWithoutIdDto": {
        "required": [
          "environmentId"
        ],
        "type": "object",
        "properties": {
          "bootstrapServers": {
            "type": "string",
            "description": "bootstrapServers kafka",
            "example": "bootstrapServer1:9092,bootstrapServer2:9092"
          },
          "environmentId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор окружения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "kafkaAdditionalSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KafkaAdditionalSettingsWithoutIdDto"
            }
          }
        },
        "description": "Список настроек Kafka по окружению"
      },
      "EnvironmentCreateDto": {
        "required": [
          "environmentName",
          "integrationPlatformEnvSettings",
          "kafkaEnvSettings",
          "stateStoreEnvSettings",
          "streamingPlatformEnvSettings"
        ],
        "type": "object",
        "properties": {
          "environmentName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "название среды развертывания",
            "example": "prod"
          },
          "integrationPlatformEnvSettings": {
            "$ref": "#/components/schemas/IntegrationPlatformEnvironmentFullViewDto"
          },
          "stateStoreEnvSettings": {
            "$ref": "#/components/schemas/StateStoreEnvironmentFullViewDto"
          },
          "streamingPlatformEnvSettings": {
            "$ref": "#/components/schemas/StreamingPlatformEnvironmentFullViewDto"
          },
          "defaultFlag": {
            "type": "boolean",
            "description": "Флаг дефолтного окружения",
            "example": true
          },
          "kafkaEnvSettings": {
            "$ref": "#/components/schemas/KafkaEnvironmentCreateDto"
          }
        }
      },
      "KafkaEnvironmentCreateDto": {
        "required": [
          "kafkaUrl"
        ],
        "type": "object",
        "properties": {
          "kafkaUrl": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Url kafka",
            "example": "http://localhost:29092"
          },
          "kafkaEnvironmentAdditionalSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KafkaAdditionalSettingsWithoutIdDto"
            }
          }
        },
        "description": "Параметры Kafka"
      },
      "DiagramCreateNewVersion": {
        "required": [
          "diagramDescription",
          "diagramId",
          "errorResponseFlag",
          "objectName",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "diagramId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          },
          "diagramDescription": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "description": "Описание диаграммы",
            "example": "Диаграмма обладает функционалом и выполняет..."
          },
          "errorResponseFlag": {
            "type": "boolean",
            "description": "Флаг обработки аварийного ответа",
            "example": true
          },
          "metaInfo": {
            "$ref": "#/components/schemas/DiagramMetaInfo"
          }
        },
        "description": "Новая диаграмма"
      },
      "DiagramViewDto": {
        "required": [
          "changeDt",
          "createDt",
          "diagramDescription",
          "diagramId",
          "errorResponseFlag",
          "objectName",
          "versionId",
          "versionType"
        ],
        "type": "object",
        "properties": {
          "diagramId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "diagramDescription": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "description": "Описание диаграммы",
            "example": "Диаграмма обладает функционалом и выполняет..."
          },
          "versionType": {
            "type": "string",
            "description": "Тип версии",
            "enum": [
              "TEMP",
              "DEPLOYED",
              "LATEST",
              "USER_LOCAL",
              "USER_TEMP",
              "USER_GLOBAL",
              "TEST_DEPLOYED"
            ]
          },
          "nodes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/NodeViewShortInfo"
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LinkViewDto"
            }
          },
          "metaInfo": {
            "$ref": "#/components/schemas/DiagramMetaInfo"
          },
          "createByUser": {
            "type": "string"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "errorResponseFlag": {
            "type": "boolean",
            "description": "Флаг обработки аварийного ответа",
            "example": true
          }
        }
      },
      "LinkViewDto": {
        "required": [
          "nextNodeId",
          "prevNodeId"
        ],
        "type": "object",
        "properties": {
          "linkId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор ребра диаграммы",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "prevNodeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор предыдущего узла",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "nextNodeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор последующего узла",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        }
      },
      "NodeViewShortInfo": {
        "required": [
          "nodeName",
          "nodeTypeId",
          "validFlag"
        ],
        "type": "object",
        "properties": {
          "nodeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор узла",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "nodeName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя узла",
            "example": "Узел первичной фильтрации"
          },
          "validFlag": {
            "type": "boolean",
            "description": "Признак корректности узла",
            "example": false
          },
          "nodeTypeId": {
            "type": "integer",
            "description": "Уникальный идентификатор типа узла",
            "format": "int32",
            "example": 10
          },
          "inputLinks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outputLinks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metaInfo": {
            "$ref": "#/components/schemas/NodeMetaInfo"
          }
        }
      },
      "DeployConfigurationFullDto": {
        "required": [
          "callUri",
          "deployId",
          "deployType",
          "jobManagerMemory",
          "objectName",
          "parallelism",
          "replicationCount",
          "taskManagerMemory"
        ],
        "type": "object",
        "properties": {
          "deployType": {
            "type": "string",
            "description": "Тип деплоя",
            "enum": [
              "REALTIME",
              "MANUAL_BATCH",
              "AUTO_BATCH"
            ]
          },
          "deployId": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор деплоя в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "diagramId": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Идентификатор диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "lastConfigDeployId": {
            "type": "string"
          },
          "parallelism": {
            "type": "integer",
            "description": "Параллелизм",
            "format": "int32",
            "example": 2
          },
          "detailedLogging": {
            "type": "boolean",
            "description": "Включение подробного логирования",
            "example": true
          },
          "taskManagerMemory": {
            "type": "integer",
            "description": "Память task manager в мегабайтах",
            "format": "int32",
            "example": 512
          },
          "jobManagerMemory": {
            "type": "integer",
            "description": "Память job manager в мегабайтах",
            "format": "int32",
            "example": 512
          },
          "arguments": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Параметры запуска Флинк",
            "example": "-Djob.manager.key=value"
          },
          "taskManagerCpuLimit": {
            "type": "number",
            "description": "Выделяемый ресурс ядер на диаграмму task manager (верхняя граница)",
            "format": "double",
            "example": 1
          },
          "taskManagerCpu": {
            "type": "number",
            "description": "Выделяемый ресурс ядер на диаграмму task manager (базово-запрашиваемое число)",
            "format": "double",
            "example": 1
          },
          "jobManagerCpuLimit": {
            "type": "number",
            "description": "Выделяемый ресурс ядер на диаграмму job manager (верхняя граница)",
            "format": "double",
            "example": 1
          },
          "jobManagerCpu": {
            "type": "number",
            "description": "Выделяемый ресурс ядер на диаграмму job manager (базово-запрашиваемое число)",
            "format": "double",
            "example": 1
          },
          "parallelDeployFlag": {
            "type": "boolean",
            "description": "Параметр параллельного деплоя",
            "example": true
          },
          "callUri": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор вызова диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "timeout": {
            "type": "integer",
            "description": "Тайм-аут исполнения диаграммы",
            "format": "int32",
            "example": 100
          },
          "replicationCount": {
            "minimum": 1,
            "type": "integer",
            "description": "Количество репликаций",
            "format": "int32",
            "example": 2
          },
          "useLastTopics": {
            "type": "boolean",
            "description": "Использовать последние топики",
            "example": true
          },
          "deployVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeployVariablesFullDto"
            }
          },
          "subDiagramConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeployConfigurationFullDto"
            }
          }
        }
      },
      "DeployVariablesFullDto": {
        "required": [
          "id",
          "name",
          "primitiveTypeId",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "name": {
            "type": "string",
            "description": "Имя переменной",
            "example": "name"
          },
          "value": {
            "type": "object",
            "description": "Значение переменной",
            "example": 2
          },
          "primitiveTypeId": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Уникальный идентификатор примитивного типа",
            "example": "1"
          },
          "dictId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор справочника",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        }
      },
      "DiagramVariableValidationDto": {
        "required": [
          "diagramVersionId",
          "parameterName"
        ],
        "type": "object",
        "properties": {
          "diagramVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          },
          "parameterName": {
            "maxLength": 40,
            "type": "string",
            "description": "Имя входного/выходного параметра",
            "example": "Client"
          }
        },
        "description": "Объект для валидации имени переменной"
      },
      "JsonNode": {
        "type": "object",
        "description": "JSON содержимое схемы",
        "example": {
          "type": "record",
          "name": "SourceData",
          "fields": [
            {
              "name": "id",
              "type": "int"
            },
            {
              "name": "some_name",
              "type": "string"
            }
          ]
        }
      },
      "SchemaSaveDto": {
        "required": [
          "name",
          "schemaJson",
          "version"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Имя схемы",
            "example": "schema-name"
          },
          "version": {
            "pattern": "([0-9]+\\.)*[0-9]+",
            "type": "string",
            "description": "Версия схемы",
            "example": "1"
          },
          "schemaJson": {
            "$ref": "#/components/schemas/JsonNode"
          }
        },
        "description": "Объект для сохранения схемы"
      },
      "SchemaIdDto": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Уникальный идентификатор схемы",
            "format": "int32",
            "example": 10
          }
        }
      },
      "NodeCreateDto": {
        "required": [
          "diagramVersionId",
          "nodeName",
          "nodeTypeId"
        ],
        "type": "object",
        "properties": {
          "nodeTypeId": {
            "type": "integer",
            "description": "Уникальный идентификатор типа узла",
            "format": "int32",
            "example": 10
          },
          "diagramVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "nodeName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя узла",
            "example": "Узел первичной фильтрации"
          },
          "nodeDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание узла",
            "example": "Узел фильтрации данных по первичному признаку"
          },
          "properties": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AggregateCompute"
              },
              {
                "$ref": "#/components/schemas/AggregateReading"
              },
              {
                "$ref": "#/components/schemas/AggregationNode"
              },
              {
                "$ref": "#/components/schemas/Calculates"
              },
              {
                "$ref": "#/components/schemas/CdcApplyMultiTableNode"
              },
              {
                "$ref": "#/components/schemas/CdcApplyNode"
              },
              {
                "$ref": "#/components/schemas/CdcMongoDbNode"
              },
              {
                "$ref": "#/components/schemas/CdcMsSqlNode"
              },
              {
                "$ref": "#/components/schemas/CdcOracleMultiTableNode"
              },
              {
                "$ref": "#/components/schemas/CdcOracleNode"
              },
              {
                "$ref": "#/components/schemas/CdcPostgresMultiTableNode"
              },
              {
                "$ref": "#/components/schemas/CdcPostgresNode"
              },
              {
                "$ref": "#/components/schemas/Communication"
              },
              {
                "$ref": "#/components/schemas/CommunicationHub"
              },
              {
                "$ref": "#/components/schemas/CommunicationHubRead"
              },
              {
                "$ref": "#/components/schemas/CustomCode"
              },
              {
                "$ref": "#/components/schemas/DecisionTable"
              },
              {
                "$ref": "#/components/schemas/ExternalService"
              },
              {
                "$ref": "#/components/schemas/FileSinkNode"
              },
              {
                "$ref": "#/components/schemas/FilterNode"
              },
              {
                "$ref": "#/components/schemas/Finish"
              },
              {
                "$ref": "#/components/schemas/FlatMapNode"
              },
              {
                "$ref": "#/components/schemas/Fork"
              },
              {
                "$ref": "#/components/schemas/GroovyNode"
              },
              {
                "$ref": "#/components/schemas/GroupingNode"
              },
              {
                "$ref": "#/components/schemas/HBaseLookupNode"
              },
              {
                "$ref": "#/components/schemas/HBaseSinkNode"
              },
              {
                "$ref": "#/components/schemas/IcebergSinkNode"
              },
              {
                "$ref": "#/components/schemas/JdbcLookupNode"
              },
              {
                "$ref": "#/components/schemas/JdbcParallelSourceNode"
              },
              {
                "$ref": "#/components/schemas/JdbcPostgresSourceNode"
              },
              {
                "$ref": "#/components/schemas/JdbcRead"
              },
              {
                "$ref": "#/components/schemas/JdbcSinkNode"
              },
              {
                "$ref": "#/components/schemas/JdbcWrite"
              },
              {
                "$ref": "#/components/schemas/JoinFlow"
              },
              {
                "$ref": "#/components/schemas/JoinNode"
              },
              {
                "$ref": "#/components/schemas/KafkaSinkNode"
              },
              {
                "$ref": "#/components/schemas/KafkaSourceNode"
              },
              {
                "$ref": "#/components/schemas/MappingNode"
              },
              {
                "$ref": "#/components/schemas/Offer"
              },
              {
                "$ref": "#/components/schemas/OfferStorageRead"
              },
              {
                "$ref": "#/components/schemas/OfferStorageWrite"
              },
              {
                "$ref": "#/components/schemas/PolicyRead"
              },
              {
                "$ref": "#/components/schemas/PythonNode"
              },
              {
                "$ref": "#/components/schemas/RestSourceNode"
              },
              {
                "$ref": "#/components/schemas/Ruleset"
              },
              {
                "$ref": "#/components/schemas/Scorecard"
              },
              {
                "$ref": "#/components/schemas/Start"
              },
              {
                "$ref": "#/components/schemas/Subdiagram"
              },
              {
                "$ref": "#/components/schemas/TarantoolRead"
              },
              {
                "$ref": "#/components/schemas/TarantoolWrite"
              },
              {
                "$ref": "#/components/schemas/UnionNode"
              }
            ]
          },
          "metaInfo": {
            "$ref": "#/components/schemas/NodeMetaInfo"
          },
          "nodeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор узла",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Объект для создания узла диаграммы"
      },
      "NodesPasteRequestDto": {
        "required": [
          "copyId",
          "diagramVersionId",
          "position"
        ],
        "type": "object",
        "properties": {
          "copyId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор слепка",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "diagramVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор версии диаграммы, в которую вставляются узлы и линки",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          }
        },
        "description": "Тело запроса на вставку"
      },
      "NodesPasteResponseDto": {
        "type": "object",
        "properties": {
          "diagram": {
            "$ref": "#/components/schemas/DiagramViewDto"
          },
          "nodeIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "Идентификаторы вставленных узлов",
            "items": {
              "type": "string",
              "description": "Идентификаторы вставленных узлов"
            }
          },
          "linkIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "Идентификаторы вставленных линков",
            "items": {
              "type": "string",
              "description": "Идентификаторы вставленных линков"
            }
          },
          "oldParameters": {
            "uniqueItems": true,
            "type": "array",
            "description": "Параметры диаграммы до вставки в нее новых узлов",
            "items": {
              "$ref": "#/components/schemas/DiagramInOutParameterFullViewDto"
            }
          }
        }
      },
      "NodesCopyDto": {
        "required": [
          "diagramVersionId",
          "nodeIds"
        ],
        "type": "object",
        "properties": {
          "nodeIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "linkIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "diagramVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор версии диаграммы, из которой копируются узлы и линки",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Тело запроса с перечнем копируемых узлов и линков"
      },
      "LinkCreateDto": {
        "required": [
          "diagramVersionId",
          "nextNodeId",
          "prevNodeId"
        ],
        "type": "object",
        "properties": {
          "linkId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор ребра диаграммы",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "diagramVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор диаграммы",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "prevNodeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор предыдущего узла",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "nextNodeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор последующего узла",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Объект для создания ребра диаграммы"
      },
      "DiagramInOutParametersViewDto": {
        "required": [
          "changeDt",
          "createDt",
          "diagramDescription",
          "diagramId",
          "errorResponseFlag",
          "objectName",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "diagramId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "diagramDescription": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "description": "Описание диаграммы",
            "example": "Диаграмма обладает функционалом и выполняет..."
          },
          "createByUser": {
            "type": "string"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "inOutParameters": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagramInOutParameterFullViewDto"
            }
          },
          "errorResponseFlag": {
            "type": "boolean",
            "description": "Флаг обработки аварийного ответа",
            "example": true
          },
          "id": {
            "type": "string"
          }
        }
      },
      "DiagramCreateAsNew": {
        "required": [
          "diagramDescription",
          "diagramId",
          "errorResponseFlag",
          "objectName",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "diagramId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          },
          "diagramDescription": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "description": "Описание диаграммы",
            "example": "Диаграмма обладает функционалом и выполняет..."
          },
          "errorResponseFlag": {
            "type": "boolean",
            "description": "Флаг обработки аварийного ответа",
            "example": true
          },
          "metaInfo": {
            "$ref": "#/components/schemas/DiagramMetaInfo"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Новая диаграмма"
      },
      "DiagramCreateAsLatest": {
        "required": [
          "diagramId",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "diagramId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          }
        },
        "description": "Новая диаграмма"
      },
      "DiagramCreateUserVersion": {
        "required": [
          "diagramId",
          "errorResponseFlag",
          "globalFlag",
          "versionId",
          "versionName"
        ],
        "type": "object",
        "properties": {
          "diagramId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "globalFlag": {
            "type": "boolean",
            "description": "Флаг хранения версий вложенных объектов",
            "example": true
          },
          "errorResponseFlag": {
            "type": "boolean",
            "description": "Флаг обработки аварийного ответа",
            "example": true
          }
        },
        "description": "Пользовательская версия диаграммы"
      },
      "BatchAdditionalParameterFullDto": {
        "required": [
          "diagramVersionId",
          "dictFlag",
          "id",
          "name",
          "primitiveTypeId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Имя для отображения на странице",
            "example": "Имя объекта"
          },
          "primitiveTypeId": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Уникальный идентификатор примитивного типа",
            "example": "1"
          },
          "dictId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор справочника",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "dictFlag": {
            "type": "boolean",
            "description": "Признак справочника кастомных типов (true)",
            "example": false
          },
          "diagramVersionId": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          }
        }
      },
      "BatchTableCreateDto": {
        "required": [
          "dataProviderUuid",
          "diagramVersionId",
          "groupId",
          "tableName"
        ],
        "type": "object",
        "properties": {
          "tableName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Название таблицы из источника данных",
            "example": "table"
          },
          "dataProviderUuid": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор источника данных в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "groupId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор группы атрибутов в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "diagramVersionId": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          }
        }
      },
      "BatchSqlCreateDto": {
        "required": [
          "dataProviderUuid",
          "diagramVersionId",
          "groupId"
        ],
        "type": "object",
        "properties": {
          "groupId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор группы атрибутов в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "sqlSelect": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "SQL запрос для выборки данных",
            "example": "select a from b"
          },
          "dataProviderUuid": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор источника данных в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "diagramVersionId": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          }
        }
      },
      "BatchMappingKeyCreateDto": {
        "required": [
          "groupId"
        ],
        "type": "object",
        "properties": {
          "batchVariablesId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор переменной из списка батча в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "parentBatchVariablesId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор верхнеуровневой переменной из списка батча в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "groupId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор группы атрибутов в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          }
        }
      },
      "ScoreMapping": {
        "type": "object",
        "properties": {
          "variable": {
            "type": "string"
          },
          "scoreValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoreValue"
            }
          }
        }
      },
      "DataProviderCreateDto": {
        "required": [
          "connectionType",
          "sourceName",
          "sourceType"
        ],
        "type": "object",
        "properties": {
          "sourceName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя источника данных",
            "example": "Витрина данных"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание источника данных",
            "example": "Операционная БД"
          },
          "sourceType": {
            "type": "string",
            "description": "Тип источника данных",
            "example": "ORACLE",
            "enum": [
              "ORACLE",
              "POSTGRES",
              "MSSQL",
              "TARANTOOL",
              "TARANTOOL_CARTRIDGE_CLUSTER",
              "TARANTOOL_DATAGRID_CLUSTER",
              "HBASE",
              "MONGO_DB"
            ]
          },
          "connectionType": {
            "type": "string",
            "description": "Тип соединения",
            "example": "JDBC",
            "enum": [
              "JDBC",
              "NO_SQL"
            ]
          },
          "settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProviderSettingsViewWithoutIdDto"
            }
          }
        }
      },
      "DataProviderSettingsViewWithoutIdDto": {
        "required": [
          "environmentSettingsId",
          "serverName"
        ],
        "type": "object",
        "properties": {
          "environmentSettingsId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "a0bb1b74-bb05-42a4-9d7d-15b3ae172180"
          },
          "serverName": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Hostname источника данных. Обязателен для jdbc, tarantool",
            "example": "example.com"
          },
          "hosts": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Список хостов кластера Mongo DB с обязательным указанием Replica Set",
            "example": "rs0/127.0.0.1:51519,127.0.0.1:51518"
          },
          "port": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Порт для соединения с источником данных. Обязателен для jdbc, tarantool",
            "example": "5432"
          },
          "username": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Логин для соединения с источником данных",
            "example": "login"
          },
          "password": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Логин для соединения с источником данных",
            "example": "password"
          },
          "scheme": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Схема базы данных, которая будет использоваться в источнике данных",
            "example": "test_scheme"
          },
          "additionalProperties": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Дополнительные параметры подключения в формате соответствующей СУБД. Имя БД должно быть указано в другом параметре. В случае Oracle здесь указывается service name и, возможно, параметры, в обоих случаях без слэша.",
            "example": "fetchSize=1000&statement_timeout=90000"
          },
          "zookeeperQuorum": {
            "type": "string",
            "description": "Zookeeper Quorum. Поле обязательно для HBase",
            "format": "string",
            "example": "localhost:2181"
          },
          "zookeeperZnodeParent": {
            "type": "string",
            "description": "Zookeeper Znode Parent. Поле обязательно для HBase",
            "format": "string",
            "example": "/hbase"
          },
          "additionalSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalSettingsWithIdDto"
            }
          },
          "token": {
            "type": "string",
            "description": "Токен для доступа к данным. На текущий момент используется только для TDG",
            "format": "string",
            "example": "4b7b0fbf-faf2-4545-84b7-3f8f8da5a8ce"
          },
          "database": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Имя базы данных в случае PostgreSQL, SQL Server, Mongo DB; SID в случае Oracle",
            "example": "master"
          },
          "inputType": {
            "type": "string",
            "description": "Способ указания параметров JDBC подключения",
            "example": "url",
            "enum": [
              "parameters",
              "url"
            ]
          },
          "url": {
            "type": "string",
            "description": "JDBC URL",
            "example": "jdbc:postgresql://localhost/test"
          }
        },
        "description": "Список настроек подключения источника данных"
      },
      "TestConnectionRequestDto": {
        "required": [
          "connectionType",
          "sourceType"
        ],
        "type": "object",
        "properties": {
          "sourceType": {
            "type": "string",
            "description": "Тип источника данных",
            "example": "ORACLE",
            "enum": [
              "ORACLE",
              "POSTGRES",
              "MSSQL",
              "TARANTOOL",
              "TARANTOOL_CARTRIDGE_CLUSTER",
              "TARANTOOL_DATAGRID_CLUSTER",
              "HBASE",
              "MONGO_DB"
            ]
          },
          "connectionType": {
            "type": "string",
            "description": "Тип соединения",
            "example": "JDBC",
            "enum": [
              "JDBC",
              "NO_SQL"
            ]
          },
          "settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProviderSettingsViewWithoutIdDto"
            }
          }
        }
      },
      "AvailableTypesRequestDto": {
        "required": [
          "columnName",
          "sourceId",
          "typesRetrieveType"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор источника данных в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "typesRetrieveType": {
            "type": "string",
            "description": "Стратегия извлечения доступных типов данных для колонки",
            "example": "TABLE",
            "enum": [
              "TABLE",
              "QUERY",
              "TARANTOOL"
            ]
          },
          "tableName": {
            "type": "string",
            "description": "Имя таблицы",
            "example": "test-table"
          },
          "scheme": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Схема базы данных, которая будет использоваться в источнике данных",
            "example": "test_scheme"
          },
          "query": {
            "type": "string",
            "description": "SQL-запрос для для извлечения колонок и доступных для них типов данных",
            "format": "string",
            "example": "select column_name from table_name"
          },
          "columnName": {
            "type": "string",
            "description": "Название колонки",
            "format": "string",
            "example": "column_name"
          }
        }
      },
      "CustomAttributeDictionaryCreate": {
        "required": [
          "dictName",
          "dictValueTypeId",
          "values"
        ],
        "type": "object",
        "properties": {
          "dictName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя справочника",
            "example": "Справочник №1"
          },
          "dictValueTypeId": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Идентификатор типа значений справочника",
            "format": "string",
            "example": "1"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeDictionaryValueCreate"
            }
          }
        }
      },
      "CustomAttributeDictionaryValueCreate": {
        "required": [
          "dictValue",
          "dictValueDisplayName"
        ],
        "type": "object",
        "properties": {
          "dictValue": {
            "type": "object",
            "description": "Значение справочника",
            "example": "Отображаемое наименование значения справочника"
          },
          "dictValueDisplayName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Отображаемое наименование значения справочникаа",
            "example": "Отображаемое наименование значения справочника"
          }
        },
        "description": "Список значений справочника"
      },
      "ComplexTypeCreate": {
        "required": [
          "displayName",
          "objectName"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "displayName": {
            "maxLength": 100,
            "type": "string",
            "description": "Имя для отображения на странице",
            "example": "Имя объекта"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание объекта комплексного типа",
            "example": "Объект пользователя, который включает в себя поля FirstName, SecondName, Phone..."
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeCreate"
            }
          }
        }
      },
      "CommunicationChannelCreateDto": {
        "required": [
          "objectName",
          "scriptVersionId"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание канала коммуникации",
            "example": "Канал коммуникации PUSH"
          },
          "scriptVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор версии скрипта, связанного с каналом коммуникации в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "communicationVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunicationVariableViewWithoutIdDto"
            }
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        }
      },
      "CommunicationVariableViewWithoutIdDto": {
        "required": [
          "arrayFlag",
          "dataSourceType",
          "mandatoryFlag",
          "scriptVariableName",
          "variableName"
        ],
        "type": "object",
        "properties": {
          "variableName": {
            "type": "string",
            "description": "Имя переменной",
            "example": "имя_переменной"
          },
          "scriptVariableName": {
            "type": "string",
            "description": "Имя переменной скрипта",
            "example": "имя_переменной_скрипта"
          },
          "primitiveTypeId": {
            "type": "string",
            "description": "Id простого типа переменной",
            "example": "1"
          },
          "complexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id комплексного типа переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "arrayFlag": {
            "type": "boolean",
            "description": "Является ли переменная массивом",
            "example": false
          },
          "dataSourceType": {
            "type": "string",
            "description": "Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)",
            "enum": [
              "USER_INPUT",
              "DICTIONARY",
              "DIAGRAM_ELEMENT"
            ]
          },
          "minValue": {
            "type": "number",
            "description": "Минимальное значение переменной",
            "format": "double",
            "example": 5.0
          },
          "maxValue": {
            "type": "number",
            "description": "Максимальное значение переменной",
            "format": "double",
            "example": 15.0
          },
          "maxSize": {
            "type": "integer",
            "description": "Максимальная длина переменной",
            "format": "int32",
            "example": 100
          },
          "dictionaryId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id справочника, в котором находятся допустимые значения переменной",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "dynamicListType": {
            "type": "string",
            "description": "Тип отображения динамического списка",
            "enum": [
              "RADIO_BUTTON",
              "DROP_DOWN_LIST"
            ]
          },
          "mandatoryFlag": {
            "type": "boolean",
            "description": "Является ли переменная обязательной",
            "example": false
          }
        },
        "description": "Список переменных канала коммуникации"
      },
      "CommunicationChannelCreateUserVersionDto": {
        "required": [
          "objectName",
          "scriptVersionId"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание канала коммуникации",
            "example": "Канал коммуникации PUSH"
          },
          "scriptVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор версии скрипта, связанного с каналом коммуникации в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          },
          "communicationVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunicationVariableViewWithoutIdDto"
            }
          }
        }
      },
      "CatalogCreate": {
        "required": [
          "catalogName"
        ],
        "type": "object",
        "properties": {
          "catalogName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя Каталога",
            "example": "Каталог №1"
          },
          "parentCatalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор родительского каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        },
        "description": "Новая каталог"
      },
      "AggregateCreate": {
        "required": [
          "aggregateJson",
          "objectName"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "aggregateDescription": {
            "maxLength": 1000,
            "type": "string",
            "description": "Описание агрегата (бизнес наименование)",
            "example": "описание агрегата"
          },
          "aggregateJson": {
            "$ref": "#/components/schemas/AggregateJson"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        }
      },
      "EnvironmentVersion": {
        "type": "object",
        "properties": {
          "environmentId": {
            "type": "string"
          },
          "environmentName": {
            "type": "string"
          },
          "spVersion": {
            "type": "string"
          },
          "integrationModuleVersion": {
            "type": "string"
          }
        }
      },
      "VersionsDto": {
        "type": "object",
        "properties": {
          "decisionBackendVersion": {
            "type": "string"
          },
          "environments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentVersion"
            }
          }
        }
      },
      "DiagramDto": {
        "type": "object"
      },
      "UserFullView": {
        "required": [
          "userId",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор пользователя в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "userName": {
            "type": "string",
            "description": "Имя пользователя",
            "example": "Иванов Иван"
          }
        }
      },
      "UserJarFullViewDto": {
        "required": [
          "createByUser",
          "createDt",
          "id",
          "jarName",
          "jarPath"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "jarName": {
            "type": "string",
            "description": "Название jar-файла",
            "example": "user_jar_file.jar"
          },
          "jarPath": {
            "type": "string",
            "description": "Путь до jar-файла",
            "example": "opt/user-jars/user_jar_file.jar"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "createByUser": {
            "type": "string",
            "description": "Пользователь, загрузивший jar-файл",
            "example": "Иванов Иван"
          }
        }
      },
      "UserFunctionPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFunctionShortInfo"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UserFunctionShortInfo": {
        "required": [
          "changeDt",
          "id",
          "jarName",
          "objectName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "jarName": {
            "type": "string",
            "description": "Название jar-файла, в котором находится функция",
            "example": "jar_file.jar"
          },
          "resultType": {
            "type": "string",
            "description": "Тип возвращаемого пользовательской функцией значения",
            "example": "Дробный"
          },
          "description": {
            "type": "string",
            "description": "Описание пользовательской функции",
            "example": "Описание"
          },
          "lastChangeByUser": {
            "type": "string",
            "description": "Последний пользователь, внесший изменения",
            "example": "Иванов Иван"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          }
        }
      },
      "UserFunctionShortWithIsUploadedView": {
        "required": [
          "functionClass",
          "jarFunctionName",
          "objectName"
        ],
        "type": "object",
        "properties": {
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "jarFunctionName": {
            "type": "string",
            "description": "Имя пользовательской функции в jar-файле",
            "example": "myFunction(java.lang.Integer)"
          },
          "functionClass": {
            "type": "string",
            "description": "Полный путь до класса, в котором содержится функция в jar-файле",
            "example": "com.package.SomeClass"
          },
          "isUploaded": {
            "type": "boolean",
            "description": "Была ли функция загружена ранее>",
            "example": false
          }
        }
      },
      "UserFunctionCatalogPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFunctionCatalogShortInfo"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UserFunctionCatalogShortInfo": {
        "required": [
          "catalogFlag",
          "changeDt",
          "id",
          "jarName",
          "objectName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "jarName": {
            "type": "string",
            "description": "Название jar-файла, в котором находится функция",
            "example": "jar_file.jar"
          },
          "resultType": {
            "type": "string",
            "description": "Тип возвращаемого пользовательской функцией значения",
            "example": "Дробный"
          },
          "description": {
            "type": "string",
            "description": "Описание пользовательской функции",
            "example": "Описание"
          },
          "lastChangeByUser": {
            "type": "string",
            "description": "Последний пользователь, изменивший объект",
            "example": "Иван Иванов"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "elementId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор элемента в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "catalogFlag": {
            "type": "boolean",
            "description": "Признак каталога",
            "format": "boolean",
            "example": true
          }
        }
      },
      "TestInfo": {
        "required": [
          "testId",
          "testName"
        ],
        "type": "object",
        "properties": {
          "testId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор теста в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "testName": {
            "type": "string",
            "description": "Имя теста",
            "example": "test_01"
          },
          "testFile": {
            "type": "string",
            "description": "Путь к файлу с данными для теста",
            "example": "/path/to/file"
          },
          "testDescription": {
            "type": "string",
            "description": "Описание теста",
            "example": "test description"
          },
          "timeout": {
            "type": "integer",
            "description": "Таймаут в секундах",
            "format": "int32",
            "example": 10
          },
          "lastExecutionDt": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "DEPLOYING",
              "IN_PROGRESS",
              "SUCCESS",
              "FAIL",
              "CREATED",
              "MANUAL_STOP",
              "EMERGENCY_STOP"
            ]
          }
        }
      },
      "TestCaseInfo": {
        "required": [
          "caseId",
          "caseResult"
        ],
        "type": "object",
        "properties": {
          "caseId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор тест-кейса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "caseResult": {
            "type": "boolean",
            "description": "Статус выполнения тест-кейса",
            "format": "boolean",
            "example": true
          }
        }
      },
      "TestStatusDto": {
        "type": "object",
        "properties": {
          "testId": {
            "type": "string"
          },
          "timeStart": {
            "type": "string",
            "format": "date-time"
          },
          "timeFinish": {
            "type": "string",
            "format": "date-time"
          },
          "timeout": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "DEPLOYING",
              "IN_PROGRESS",
              "SUCCESS",
              "FAIL",
              "CREATED",
              "MANUAL_STOP",
              "EMERGENCY_STOP"
            ]
          }
        }
      },
      "TestCaseGetFullView": {
        "required": [
          "caseExpResponseJson",
          "caseFactResponseJson",
          "caseId",
          "caseRequestJson",
          "caseResult"
        ],
        "type": "object",
        "properties": {
          "caseId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор тест-кейса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "caseResult": {
            "type": "boolean",
            "description": "Статус выполнения тест-кейса",
            "format": "boolean",
            "example": true
          },
          "caseRequestJson": {
            "type": "string",
            "description": "Json тест-кейса",
            "example": "{}"
          },
          "caseExpResponseJson": {
            "type": "string",
            "description": "Json ожидаемого ответа тест-кейса",
            "example": "{}"
          },
          "caseFactResponseJson": {
            "type": "string",
            "description": "Json фактического ответа тест-кейса",
            "example": "{}"
          }
        }
      },
      "TestCaseDebugFullView": {
        "required": [
          "diagramVersionId",
          "testName"
        ],
        "type": "object",
        "properties": {
          "diagramVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "testName": {
            "type": "string",
            "description": "Имя теста",
            "example": "test_01"
          },
          "testCaseNumber": {
            "type": "integer",
            "description": "Номер тестового набора",
            "format": "int32",
            "example": 22
          },
          "debugNodeInfo": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/TestCaseDebugNodeInfoFullView"
            },
            "description": "Отладочная информация по узлам (ключ - уникальный идентификатор узла)"
          }
        }
      },
      "TestCaseDebugNodeInfoFullView": {
        "required": [
          "successFlag"
        ],
        "type": "object",
        "properties": {
          "successFlag": {
            "type": "boolean",
            "description": "Признак успешного прохождения заявки через узел (в случае ошибки - false)",
            "example": true
          },
          "inputData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestCaseNodeInputDataFullView"
            }
          },
          "calculatedData": {
            "type": "string",
            "description": "Рассчитанные на узле данные",
            "example": "{\"vyhod1\":1,\"vyhod2\":1}"
          },
          "errorMessage": {
            "type": "string",
            "description": "Информация об ошибке",
            "example": "Exception occurred"
          }
        },
        "description": "Отладочная информация по узлам (ключ - уникальный идентификатор узла)"
      },
      "TestCaseNodeInputDataFullView": {
        "required": [
          "nodeId",
          "nodeName"
        ],
        "type": "object",
        "properties": {
          "nodeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор узла, с которого пришли данные",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "nodeName": {
            "type": "string",
            "description": "Название узла, с которого пришли данные",
            "example": "Начало"
          },
          "inputData": {
            "type": "string",
            "description": "Данные, пришедшие с узла",
            "example": "{\"vhod1\":1,\"vhod2\":1}"
          }
        },
        "description": "Список входящих сообщений"
      },
      "SwaggerResource": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "swaggerVersion": {
            "type": "string"
          },
          "location": {
            "type": "string",
            "deprecated": true
          }
        }
      },
      "UiConfiguration": {
        "type": "object",
        "properties": {
          "deepLinking": {
            "type": "boolean"
          },
          "displayOperationId": {
            "type": "boolean"
          },
          "defaultModelsExpandDepth": {
            "type": "integer",
            "format": "int32"
          },
          "defaultModelExpandDepth": {
            "type": "integer",
            "format": "int32"
          },
          "defaultModelRendering": {
            "type": "string",
            "enum": [
              "example",
              "model"
            ]
          },
          "displayRequestDuration": {
            "type": "boolean"
          },
          "docExpansion": {
            "type": "string",
            "enum": [
              "none",
              "list",
              "full"
            ]
          },
          "filter": {
            "type": "object"
          },
          "maxDisplayedTags": {
            "type": "integer",
            "format": "int32"
          },
          "operationsSorter": {
            "type": "string",
            "enum": [
              "alpha",
              "method"
            ]
          },
          "showExtensions": {
            "type": "boolean"
          },
          "showCommonExtensions": {
            "type": "boolean"
          },
          "tagsSorter": {
            "type": "string",
            "enum": [
              "alpha"
            ]
          },
          "validatorUrl": {
            "type": "string"
          },
          "supportedSubmitMethods": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "swaggerBaseUiUrl": {
            "type": "string"
          }
        }
      },
      "SecurityConfiguration": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "deprecated": true
          },
          "apiKeyVehicle": {
            "type": "string",
            "deprecated": true
          },
          "apiKeyName": {
            "type": "string",
            "deprecated": true
          },
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          },
          "realm": {
            "type": "string"
          },
          "appName": {
            "type": "string"
          },
          "scopeSeparator": {
            "type": "string"
          },
          "additionalQueryStringParams": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "useBasicAuthenticationWithAccessCodeGrant": {
            "type": "boolean"
          },
          "enableCsrfSupport": {
            "type": "boolean"
          }
        }
      },
      "ExternalServicePage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceShortInfoDto"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ExternalServiceShortInfoDto": {
        "required": [
          "changeDt",
          "objectName",
          "serviceId",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "serviceId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "uri": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "URI внешнего сервиса",
              "example": "https://host:port/diagram/node/{nodeId}"
            }
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          }
        }
      },
      "ExternalServiceFullViewDto": {
        "required": [
          "objectName",
          "protocol",
          "serviceId",
          "syncType",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "isAvailableInProperties": {
            "type": "boolean",
            "description": "Флаг того, что характеристики ВС будут доступны в __PROPERTIES__",
            "example": true
          },
          "serviceId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание внешнего сервиса",
            "example": "Внешний сервис данных"
          },
          "syncType": {
            "type": "string",
            "description": "Тип взаимодействия",
            "example": "SYNC",
            "enum": [
              "SYNC",
              "ASYNC"
            ]
          },
          "protocol": {
            "type": "string",
            "description": "Протокол доступа",
            "example": "REST",
            "enum": [
              "REST",
              "SOAP"
            ]
          },
          "method": {
            "type": "string",
            "description": "Используемый метод взаимодействия",
            "example": "GET",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH"
            ]
          },
          "fileFormat": {
            "type": "string",
            "description": "Формат сообщения",
            "example": "JSON",
            "enum": [
              "JSON",
              "XML"
            ]
          },
          "batchFlag": {
            "type": "boolean",
            "description": "Признак пакетного взаимодействия",
            "example": false
          },
          "body": {
            "type": "string",
            "description": "Тело запроса",
            "example": "{request_id: {requestid}}"
          },
          "serviceSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceSettingsFullViewDto"
            }
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceHeaderFullViewDto"
            }
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceVariableFullViewDto"
            }
          }
        }
      },
      "ExternalServiceGetIdWithVariables": {
        "required": [
          "serviceId",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "serviceId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceVariableFullViewDto"
            }
          }
        }
      },
      "ExternalServiceShortInfoVersionDto": {
        "required": [
          "changeDt",
          "objectName",
          "serviceId",
          "versionId",
          "versionType"
        ],
        "type": "object",
        "properties": {
          "serviceId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "uri": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "URI внешнего сервиса",
              "example": "https://host:port/diagram/node/{nodeId}"
            }
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "versionType": {
            "type": "string",
            "description": "Тип версии",
            "enum": [
              "TEMP",
              "DEPLOYED",
              "LATEST",
              "USER_LOCAL",
              "USER_TEMP",
              "USER_GLOBAL",
              "TEST_DEPLOYED"
            ]
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          }
        }
      },
      "ExternalServiceTechDto": {
        "type": "object",
        "description": "Тип технического сервиса сервиса",
        "example": "OFFER_STORAGE_WRITE"
      },
      "ExternalServiceTechFullViewDto": {
        "required": [
          "objectName",
          "serviceId",
          "serviceType",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "serviceId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceVariableFullViewDto"
            }
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "serviceType": {
            "$ref": "#/components/schemas/ExternalServiceTechDto"
          }
        }
      },
      "ExternalServiceCatalogPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalServiceCatalogShortInfoDto"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ExternalServiceCatalogShortInfoDto": {
        "required": [
          "catalogFlag",
          "changeDt",
          "objectName",
          "serviceId",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "serviceId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии внешнего сервиса в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "uri": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "URI внешнего сервиса",
              "example": "https://host:port/diagram/node/{nodeId}"
            }
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string",
            "description": "Последний пользователь, изменивший объект",
            "example": "Иван Иванов"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "elementId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор элемента в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "catalogFlag": {
            "type": "boolean",
            "description": "Признак каталога",
            "format": "boolean",
            "example": true
          }
        }
      },
      "ScriptPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptShortInfoDto"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ScriptShortInfoDto": {
        "required": [
          "changeDt",
          "objectName",
          "scriptId",
          "scriptType",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание скрипта",
            "example": "описание скрипта"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string",
            "description": "Последний пользователь, изменивший объект",
            "example": "Иван Иванов"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "scriptType": {
            "type": "string",
            "description": "Язык скрипта",
            "enum": [
              "GROOVY",
              "PYTHON"
            ]
          },
          "scriptId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор скрипта в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии скрипта в формате UUID",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          }
        }
      },
      "ScriptWithIdWithVariables": {
        "required": [
          "scriptId",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptVariableFullView"
            }
          },
          "scriptId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор скрипта в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии скрипта в формате UUID",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          }
        }
      },
      "ScriptFullVersionView": {
        "required": [
          "changeDt",
          "objectName",
          "scriptId",
          "scriptType",
          "versionId",
          "versionType"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание скрипта",
            "example": "описание скрипта"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string",
            "description": "Последний пользователь, изменивший объект",
            "example": "Иван Иванов"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "scriptType": {
            "type": "string",
            "description": "Язык скрипта",
            "enum": [
              "GROOVY",
              "PYTHON"
            ]
          },
          "versionType": {
            "type": "string",
            "description": "Тип версии",
            "enum": [
              "TEMP",
              "DEPLOYED",
              "LATEST",
              "USER_LOCAL",
              "USER_TEMP",
              "USER_GLOBAL",
              "TEST_DEPLOYED"
            ]
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          },
          "scriptId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор скрипта в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии скрипта в формате UUID",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          }
        }
      },
      "ScriptCatalogPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptCatalogShortInfoDto"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ScriptCatalogShortInfoDto": {
        "required": [
          "catalogFlag",
          "changeDt",
          "objectName",
          "scriptId",
          "scriptType",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание скрипта",
            "example": "описание скрипта"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string",
            "description": "Последний пользователь, изменивший объект",
            "example": "Иван Иванов"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "scriptType": {
            "type": "string",
            "description": "Язык скрипта",
            "enum": [
              "GROOVY",
              "PYTHON"
            ]
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "elementId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор элемента в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "catalogFlag": {
            "type": "boolean",
            "description": "Признак каталога",
            "format": "boolean",
            "example": true
          },
          "scriptId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор скрипта в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии скрипта в формате UUID",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          }
        }
      },
      "PythonEnvironmentPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PythonEnvironmentShortInfoDto"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PythonEnvironmentShortInfoDto": {
        "required": [
          "changeDt",
          "createDt",
          "id",
          "name",
          "pythonVersionName",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор окружения python в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии окружения python  в формате UUID",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя окружения python",
            "example": "питон"
          },
          "pythonVersionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии python",
            "example": "Python 3.6"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "createByUser": {
            "type": "string"
          }
        }
      },
      "PythonEnvironmentGetFullViewDto": {
        "required": [
          "changeDt",
          "createDt",
          "id",
          "name",
          "pythonVersionName",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор окружения python в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии окружения python  в формате UUID",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя окружения python",
            "example": "питон"
          },
          "pythonVersionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии python",
            "example": "Python 3.6"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "createByUser": {
            "type": "string"
          },
          "requirementsTxt": {
            "type": "string",
            "description": "Текст файла requirements.txt",
            "example": "pandas==0.2.0"
          },
          "pythonVersionId": {
            "type": "string"
          },
          "pythonEnvironmentSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PythonEnvironmentSettingsWithIdDto"
            }
          }
        }
      },
      "PythonEnvironmentVersionViewDto": {
        "required": [
          "changeDt",
          "createDt",
          "id",
          "name",
          "pythonVersionName",
          "rootObjectVersionId",
          "versionId",
          "versionType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор окружения python в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии окружения python  в формате UUID",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "name": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя окружения python",
            "example": "питон"
          },
          "pythonVersionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии python",
            "example": "Python 3.6"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "createByUser": {
            "type": "string"
          },
          "versionType": {
            "type": "string",
            "description": "Тип версии",
            "enum": [
              "TEMP",
              "DEPLOYED",
              "LATEST",
              "USER_LOCAL",
              "USER_TEMP",
              "USER_GLOBAL",
              "TEST_DEPLOYED"
            ]
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          },
          "rootObjectVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор родительского объекта версии окружения питона в формате UUID",
            "format": "uuid",
            "example": "9d4ade21-cf23-4819-ac9d-f052dba69002"
          }
        }
      },
      "RuleTypeGetFullView": {
        "required": [
          "changeDt",
          "createByUser",
          "createDt",
          "displayName",
          "lastChangeByUser",
          "typeId",
          "typeName"
        ],
        "type": "object",
        "properties": {
          "typeName": {
            "maxLength": 100,
            "type": "string",
            "description": "Системное имя в UTF-8",
            "example": "Name object"
          },
          "displayName": {
            "maxLength": 100,
            "type": "string",
            "description": "Имя для отображения на странице",
            "example": "Имя объекта"
          },
          "typeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор типа правила",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "createByUser": {
            "type": "string",
            "description": "Пользователь, который создал тип правила",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "lastChangeByUser": {
            "type": "string",
            "description": "Последний пользователь, который внес изменения в тип правила",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          }
        }
      },
      "RestSourcePage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestSourceShortInfoDto"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RestSourceShortInfoDto": {
        "required": [
          "changeDt",
          "createDt",
          "objectName",
          "restSourceId"
        ],
        "type": "object",
        "properties": {
          "restSourceId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор REST источника в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "createByUser": {
            "type": "string"
          }
        }
      },
      "RestSourceFullViewDto": {
        "required": [
          "changeDt",
          "createDt",
          "objectName",
          "restSourceId"
        ],
        "type": "object",
        "properties": {
          "restSourceId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор REST источника в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание REST источника",
            "example": "REST источник"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "createByUser": {
            "type": "string"
          },
          "restSourceSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestSourceSettingsFullViewDto"
            }
          }
        }
      },
      "RestSourceCatalogPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RestSourceCatalogShortInfoDto"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RestSourceCatalogShortInfoDto": {
        "required": [
          "catalogFlag",
          "changeDt",
          "createDt",
          "objectName",
          "restSourceId"
        ],
        "type": "object",
        "properties": {
          "restSourceId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор REST источника в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string",
            "description": "Последний пользователь, изменивший объект",
            "example": "Иван Иванов"
          },
          "createByUser": {
            "type": "string",
            "description": "Последний пользователь, создавший объект",
            "example": "Иван Иванов"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "elementId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор элемента в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "catalogFlag": {
            "type": "boolean",
            "description": "Признак каталога",
            "format": "boolean",
            "example": true
          }
        }
      },
      "NodeTypeGetFullView": {
        "required": [
          "displayName",
          "typeId",
          "typeName"
        ],
        "type": "object",
        "properties": {
          "typeId": {
            "type": "integer",
            "description": "Уникальный идентификатор",
            "format": "int32",
            "example": 2
          },
          "typeName": {
            "maxLength": 100,
            "type": "string",
            "description": "Системное имя в UTF-8",
            "example": "Name object"
          },
          "displayName": {
            "maxLength": 100,
            "type": "string",
            "description": "Имя для отображения на странице",
            "example": "Имя объекта"
          }
        }
      },
      "FunctionGetFullView": {
        "required": [
          "description",
          "functionId",
          "functionName",
          "resultType"
        ],
        "type": "object",
        "properties": {
          "functionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор списка функий. ",
            "format": "uuid"
          },
          "functionName": {
            "maxLength": 100,
            "type": "string",
            "description": "Наименование функции",
            "example": "Функция №1"
          },
          "description": {
            "maxLength": 200,
            "type": "string",
            "description": "Описание функции в формате <Наименование функции>(<тип параметра 1>{, ...<тип параметра N>}) <Краткое описание что делает данная функция>"
          },
          "resultType": {
            "maxLength": 15,
            "type": "string",
            "description": "Тип результирующего значения функции"
          },
          "isExternal": {
            "type": "boolean",
            "description": "Является ли функция загруженной пользователем"
          }
        }
      },
      "DataTypeGetFullView": {
        "required": [
          "complexFlag",
          "displayName",
          "typeId",
          "typeName"
        ],
        "type": "object",
        "properties": {
          "typeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор списка типов данных. Объединяет в себе примитивные и комплексные списки. ID может принимать числовое значение в строковом формате, либо UUID",
            "format": "uuid"
          },
          "typeName": {
            "maxLength": 100,
            "type": "string",
            "description": "Системное имя в UTF-8",
            "example": "Name object"
          },
          "displayName": {
            "maxLength": 100,
            "type": "string",
            "description": "Имя для отображения на странице",
            "example": "Имя объекта"
          },
          "complexFlag": {
            "type": "boolean",
            "description": "Флаг, определяющий сложность типа. true - тип данных сложный, false - тип данных примитивный",
            "example": false
          }
        }
      },
      "AttributeFullViewDto": {
        "required": [
          "key",
          "name",
          "values"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 100,
            "type": "string",
            "description": "Техническое название атрибута",
            "example": "Attribute key"
          },
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Название канала атрибута",
            "example": "Attribute value"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeValuesFullViewDto"
            }
          }
        }
      },
      "AttributeValuesFullViewDto": {
        "required": [
          "key",
          "name"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 100,
            "type": "string",
            "description": "Техническое название атрибута",
            "example": "Attribute key"
          },
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Название канала атрибута",
            "example": "Attribute value"
          }
        },
        "description": "Список атрибутов"
      },
      "OfferPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferShortInfoDto"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "OfferShortInfoDto": {
        "required": [
          "changeDt",
          "id",
          "objectName",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор шаблона предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии шаблона предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          }
        }
      },
      "OfferFullViewDto": {
        "required": [
          "id",
          "objectName",
          "offerComplexTypeVersionId",
          "scriptId",
          "scriptName",
          "scriptVersionId",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор шаблона предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии шаблона предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "scriptVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор версии скрипта, связанного с шаблоном предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "scriptId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор скрипта, связанного с шаблоном предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "scriptName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя скрипта, связанного с шаблоном предложения в формате UUID 4",
            "example": "Код создания предложения Автокредит"
          },
          "offerComplexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id комплексного типа предложения",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "offerVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferVariableFullViewDto"
            }
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          }
        }
      },
      "OfferWithVariablesDto": {
        "required": [
          "id",
          "offerComplexTypeVersionId",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор шаблона предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии шаблона предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "offerComplexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Id комплексного типа предложения",
            "format": "uuid",
            "example": "8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d"
          },
          "offerVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferVariableFullViewDto"
            }
          }
        }
      },
      "OfferShortInfoVersionDto": {
        "required": [
          "changeDt",
          "id",
          "objectName",
          "versionId",
          "versionType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор шаблона предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии шаблона предложения в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionType": {
            "type": "string",
            "description": "Тип версии",
            "enum": [
              "TEMP",
              "DEPLOYED",
              "LATEST",
              "USER_LOCAL",
              "USER_TEMP",
              "USER_GLOBAL",
              "TEST_DEPLOYED"
            ]
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          }
        }
      },
      "DiagramShortInfoView": {
        "required": [
          "changeDt",
          "diagramDescription",
          "diagramId",
          "objectName",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "diagramId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "diagramDescription": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "description": "Описание диаграммы",
            "example": "Диаграмма обладает функционалом и выполняет..."
          }
        }
      },
      "OfferCatalogPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagramShortInfoView"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "OfferStorageClientIdTypeFullDto": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Код типа идентификатора клиента",
            "example": "1"
          },
          "description": {
            "type": "string",
            "description": "Описание типа идентификатора клиента",
            "example": "subscriber"
          }
        },
        "description": "Список типов клиентов"
      },
      "OfferStorageClientIdTypesFullDto": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "string",
            "description": "Детальное описание ошибки",
            "example": "Не передано обязательное для передачи поле"
          },
          "title": {
            "type": "string",
            "description": "Название ошибки",
            "example": "Constraint Violation"
          },
          "type": {
            "type": "string",
            "description": "Тип ошибки",
            "example": "/problems/bad-request"
          },
          "instance": {
            "type": "string",
            "description": "Инстанс",
            "example": "/api/campaign-runs"
          },
          "status": {
            "type": "integer",
            "description": "HTTP-статус",
            "format": "int32",
            "example": 200
          },
          "clientIdTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferStorageClientIdTypeFullDto"
            }
          }
        }
      },
      "ObjectRelationPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRelationsFullViewDto"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ObjectRelationsFullViewDto": {
        "required": [
          "aggregateType",
          "nodeName",
          "objectFromVersionId",
          "objectName",
          "objectToType",
          "objectToVersionId",
          "objectToVersionType"
        ],
        "type": "object",
        "properties": {
          "objectFromVersionId": {
            "type": "string",
            "description": "Идентификатор версии родителя в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "objectName": {
            "type": "string",
            "description": "Название зависимого объекта",
            "example": "Object display name"
          },
          "objectToVersionId": {
            "type": "string",
            "description": "Идентификатор версии ребенка в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "objectToVersionType": {
            "type": "string",
            "description": "Тип версии зависимого объекта",
            "example": "USER_GLOBAL",
            "enum": [
              "TEMP",
              "DEPLOYED",
              "LATEST",
              "USER_LOCAL",
              "USER_TEMP",
              "USER_GLOBAL",
              "TEST_DEPLOYED"
            ]
          },
          "objectToType": {
            "type": "string",
            "description": "Тип объекта ребенка",
            "example": "AGGREGATE",
            "enum": [
              "DEPLOY",
              "DIAGRAM",
              "AGGREGATE",
              "CUSTOM_CODE",
              "COMPLEX_TYPE",
              "SERVICE",
              "REST_SOURCE",
              "DATA_PROVIDER",
              "CUSTOM_ATTRIBUTE_DICTIONARY",
              "COMMUNICATION_CHANNEL",
              "OFFER",
              "USER_FUNCTION",
              "DATA_PROVIDER_RELATION",
              "CATALOG",
              "KAFKA",
              "PYTHON_ENVIRONMENT",
              "PYTHON_ENVIRONMENT_RELATION",
              "DIAGRAM_RELATION",
              "CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS",
              "OFFER_RELATION",
              "SERVICE_RELATION",
              "REST_SOURCE_RELATION",
              "CUSTOM_CODE_RELATION",
              "COMMUNICATION_RELATION",
              "AGGREGATE_RELATION",
              "MESSAGE_BROKER",
              "LOCKING"
            ]
          },
          "nodeName": {
            "type": "string",
            "description": "Имя узла, в котором вызывается объект",
            "example": "Узел предложения"
          },
          "aggregateType": {
            "type": "string",
            "description": "Тип агрегата",
            "example": "Чтение",
            "enum": [
              "CALC",
              "READ"
            ]
          }
        }
      },
      "LockingDto": {
        "type": "object"
      },
      "LockingDictionaryPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockingDtoShortView"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "KafkaPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KafkaShortInfoDto"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "KafkaShortInfoDto": {
        "required": [
          "changeDt",
          "createDt",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор kafka в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя kafka",
            "example": "local kafka"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание kafka",
            "example": "Kafka для тестирования"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "createByUser": {
            "type": "string"
          }
        }
      },
      "KafkaGetFullViewDto": {
        "required": [
          "changeDt",
          "createDt",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор kafka в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "name": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя kafka",
            "example": "local kafka"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание kafka",
            "example": "Kafka для тестирования"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "createByUser": {
            "type": "string"
          },
          "kafkaSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KafkaSettingsWithIdDto"
            }
          }
        }
      },
      "EnvironmentShortInfoDto": {
        "required": [
          "environmentId",
          "environmentName",
          "integrationUrl",
          "kafkaUrl",
          "streamingPlatformUrl"
        ],
        "type": "object",
        "properties": {
          "environmentId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор среды развертывания в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "environmentName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "название среды развертывания",
            "example": "prod"
          },
          "defaultFlag": {
            "type": "boolean",
            "description": "Флаг дефолтного окружения",
            "example": true
          },
          "kafkaUrl": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Url kafka",
            "example": "http://localhost:29092"
          },
          "stateStoreUrl": {
            "type": "string",
            "description": "Url базы данных state store агрегатов",
            "example": "http://localhost:5432/decision_aggregate?currentSchema=decision"
          },
          "integrationUrl": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Url модуля интеграции",
            "example": "http://localhost:8081"
          },
          "streamingPlatformUrl": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Url платформы",
            "example": "http://localhost:8083"
          }
        }
      },
      "EnvironmentFullViewDto": {
        "required": [
          "changeDt",
          "createDt",
          "environmentId",
          "environmentName",
          "integrationPlatformEnvSettings",
          "kafkaEnvSettings",
          "lastChangeByUser",
          "stateStoreEnvSettings",
          "streamingPlatformEnvSettings"
        ],
        "type": "object",
        "properties": {
          "environmentId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор среды развертывания в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "environmentName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "название среды развертывания",
            "example": "prod"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "createByUser": {
            "type": "string"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "defaultFlag": {
            "type": "boolean",
            "description": "Флаг дефолтного окружения",
            "example": true
          },
          "streamingPlatformEnvSettings": {
            "$ref": "#/components/schemas/StreamingPlatformEnvironmentFullViewDto"
          },
          "integrationPlatformEnvSettings": {
            "$ref": "#/components/schemas/IntegrationPlatformEnvironmentFullViewDto"
          },
          "kafkaEnvSettings": {
            "$ref": "#/components/schemas/KafkaEnvironmentFullViewDto"
          },
          "stateStoreEnvSettings": {
            "$ref": "#/components/schemas/StateStoreEnvironmentFullViewDto"
          }
        }
      },
      "KafkaEnvironmentFullViewDto": {
        "required": [
          "kafkaUrl"
        ],
        "type": "object",
        "properties": {
          "kafkaUrl": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Url kafka",
            "example": "http://localhost:29092"
          },
          "kafkaEnvironmentAdditionalSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KafkaAdditionalSettingsWithIdDto"
            }
          }
        },
        "description": "Параметры Kafka"
      },
      "DiagramPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagramShortInfoView"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DiagramShortInfoVersionsView": {
        "required": [
          "changeDt",
          "diagramDescription",
          "diagramId",
          "objectName",
          "versionId",
          "versionName",
          "versionType"
        ],
        "type": "object",
        "properties": {
          "diagramId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "diagramDescription": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "description": "Описание диаграммы",
            "example": "Диаграмма обладает функционалом и выполняет..."
          },
          "versionType": {
            "type": "string",
            "description": "Тип версии",
            "enum": [
              "TEMP",
              "DEPLOYED",
              "LATEST",
              "USER_LOCAL",
              "USER_TEMP",
              "USER_GLOBAL",
              "TEST_DEPLOYED"
            ]
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          }
        }
      },
      "SchemaInfoDto": {
        "required": [
          "id",
          "name",
          "url",
          "version"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Уникальный идентификатор схемы",
            "format": "int32",
            "example": 10
          },
          "name": {
            "type": "string",
            "description": "Имя схемы",
            "example": "schema-name"
          },
          "version": {
            "pattern": "([0-9]+\\.)*[0-9]+",
            "type": "string",
            "description": "Версия схемы",
            "example": "1"
          },
          "url": {
            "type": "string",
            "description": "Url схемы",
            "example": "http://sp:8083/schema/10/content"
          }
        }
      },
      "SchemaFullDto": {
        "required": [
          "id",
          "name",
          "schemaJson",
          "url",
          "version"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Уникальный идентификатор схемы",
            "format": "int32",
            "example": 10
          },
          "name": {
            "type": "string",
            "description": "Имя схемы",
            "example": "schema-name"
          },
          "version": {
            "pattern": "([0-9]+\\.)*[0-9]+",
            "type": "string",
            "description": "Версия схемы",
            "example": "1"
          },
          "url": {
            "type": "string",
            "description": "Url схемы",
            "example": "http://sp:8083/schema/10/content"
          },
          "schemaJson": {
            "$ref": "#/components/schemas/JsonNode"
          }
        }
      },
      "NodeValidationPayload": {
        "type": "object",
        "properties": {
          "nodeValidationMap": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "commonNodeValidationMessages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "JSON-детализаия валидации"
      },
      "NodeViewWithVariablesDto": {
        "required": [
          "nodeName",
          "nodeTypeId",
          "validFlag"
        ],
        "type": "object",
        "properties": {
          "nodeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор узла",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "nodeName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя узла",
            "example": "Узел первичной фильтрации"
          },
          "nodeDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание узла",
            "example": "Узел фильтрации данных по первичному признаку"
          },
          "validFlag": {
            "type": "boolean",
            "description": "Признак корректности узла",
            "example": false
          },
          "nodeTypeId": {
            "type": "integer",
            "description": "Уникальный идентификатор типа узла",
            "format": "int32",
            "example": 10
          },
          "properties": {
            "$ref": "#/components/schemas/Properties"
          },
          "inputLinks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outputLinks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metaInfo": {
            "$ref": "#/components/schemas/NodeMetaInfo"
          },
          "validationPayload": {
            "$ref": "#/components/schemas/NodeValidationPayload"
          },
          "availableToMap": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariableViewDto"
            }
          },
          "availableToCalc": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariableViewDto"
            }
          }
        }
      },
      "DiagramCatalogPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagramCatalogShortInfoView"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DiagramCatalogShortInfoView": {
        "required": [
          "catalogFlag",
          "changeDt",
          "diagramDescription",
          "diagramId",
          "objectName",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "diagramId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          },
          "lastChangeByUser": {
            "type": "string",
            "description": "Последний пользователь, изменивший объект",
            "example": "Иван Иванов"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "diagramDescription": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "description": "Описание диаграммы",
            "example": "Диаграмма обладает функционалом и выполняет..."
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "elementId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор элемента в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "catalogFlag": {
            "type": "boolean",
            "description": "Признак каталога",
            "format": "boolean",
            "example": true
          }
        }
      },
      "BatchVariableGetDto": {
        "required": [
          "batchOccupancyStatus",
          "complexTypeVersionId",
          "diagramVersionId",
          "groupId",
          "id",
          "name",
          "parentGroupId",
          "primitiveTypeId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "diagramVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "groupId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор группы атрибутов в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "parentGroupId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор родительской группы атрибутов в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "primitiveTypeId": {
            "maxLength": 36,
            "minLength": 0,
            "type": "string",
            "description": "Уникальный идентификатор примитивного типа в формате UUID 4",
            "example": "1"
          },
          "name": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Имя для отображения на странице",
            "example": "Имя объекта"
          },
          "parameterVersionId": {
            "type": "string"
          },
          "complexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор пользовательского типа ",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "batchOccupancyStatus": {
            "type": "string",
            "description": "Тип заполненности",
            "enum": [
              "IN_PROGRESS",
              "FULL",
              "EMPTY"
            ]
          },
          "batchVariableList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatchVariableGetDto"
            }
          }
        }
      },
      "BatchTableGetFullView": {
        "required": [
          "dataProviderUuid",
          "diagramVersionId",
          "groupId",
          "id",
          "tableName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор таблицы в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "tableName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Название таблицы из источника данных",
            "example": "table"
          },
          "dataProviderUuid": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор источника данных в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "groupId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор группы атрибутов в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "diagramVersionId": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          }
        }
      },
      "BatchMappingKeyGetDto": {
        "required": [
          "diagramVersionId",
          "groupId",
          "mapping",
          "name",
          "primitiveTypeId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "batchVariablesId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор переменной из списка батча в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "parentBatchVariablesId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор верхнеуровневой переменной из списка батча в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "groupId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор группы атрибутов в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "mapping": {
            "maxLength": 36,
            "type": "string",
            "description": "Маппинг элемента запроса на диаграмму",
            "format": "uuid"
          },
          "primitiveTypeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор примитивного типа в формате UUID 4",
            "example": "1"
          },
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Имя для отображения на странице",
            "example": "Имя объекта"
          },
          "diagramVersionId": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          }
        }
      },
      "DeployInnerInfo": {
        "required": [
          "deployId",
          "deployStatus"
        ],
        "type": "object",
        "properties": {
          "deployId": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор деплоя в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "diagram": {
            "$ref": "#/components/schemas/DiagramVersionNameView"
          },
          "deployStatus": {
            "type": "string",
            "description": "Статус деплоя",
            "enum": [
              "CREATED",
              "ERROR",
              "CANCELED",
              "STOPPED",
              "STOPPING",
              "READY_FOR_DEPLOY",
              "TEST_DEPLOYED",
              "INHERIT_DEPLOYED",
              "DEPLOYED_WITH_ERROR_IN_REPLICAS",
              "IN_PROGRESS",
              "DEPLOYED"
            ]
          }
        }
      },
      "DeployPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeployViewDto"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DeployViewDto": {
        "required": [
          "changeDt",
          "createUser",
          "deployDt",
          "deployId",
          "deployStatus",
          "deployType",
          "deployUser"
        ],
        "type": "object",
        "properties": {
          "deployId": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор деплоя в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "diagram": {
            "$ref": "#/components/schemas/DiagramVersionNameView"
          },
          "deployStatus": {
            "type": "string",
            "description": "Статус деплоя",
            "enum": [
              "CREATED",
              "ERROR",
              "CANCELED",
              "STOPPED",
              "STOPPING",
              "READY_FOR_DEPLOY",
              "TEST_DEPLOYED",
              "INHERIT_DEPLOYED",
              "DEPLOYED_WITH_ERROR_IN_REPLICAS",
              "IN_PROGRESS",
              "DEPLOYED"
            ]
          },
          "deployDt": {
            "type": "string",
            "description": "Дата Время деплоя",
            "format": "date-time"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "deployUser": {
            "type": "string",
            "description": "Пользователь, задеплоивший диаграмму",
            "example": "Иван Иванов"
          },
          "createUser": {
            "type": "string",
            "description": "Пользователь, задеплоивший диаграмму",
            "example": "Иван Иванов"
          },
          "deployType": {
            "type": "string",
            "description": "Тип деплоя",
            "enum": [
              "REALTIME",
              "MANUAL_BATCH",
              "AUTO_BATCH"
            ]
          },
          "callUri": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор вызова диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "flinkTrackingUrl": {
            "type": "string"
          },
          "childDeploys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeployInnerInfo"
            }
          },
          "createByUser": {
            "type": "string",
            "writeOnly": true
          },
          "lastChangeByUser": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "DiagramVersionNameView": {
        "required": [
          "diagramId",
          "objectName",
          "versionId",
          "versionName"
        ],
        "type": "object",
        "properties": {
          "diagramId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "7d96348c-0724-4eab-a0d6-8706b1acfa77"
          }
        },
        "description": "Информация о диаграмме"
      },
      "IntegrationFullDto": {
        "required": [
          "callUri",
          "deployType",
          "inTopicName",
          "jobId",
          "outTopicName"
        ],
        "type": "object",
        "properties": {
          "inTopicName": {
            "type": "string",
            "description": "Входящий топик диаграммы",
            "example": "b73b4500-27f7-42b6-abbe-938f3705955e"
          },
          "outTopicName": {
            "type": "string",
            "description": "Входящий топик диаграммы",
            "example": "b73b4500-27f7-42b6-abbe-938f3705955e"
          },
          "callUri": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор вызова диаграммы в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "timeout": {
            "type": "integer",
            "description": "Тайм-аут исполнения диаграммы",
            "format": "int32",
            "example": 100
          },
          "deployType": {
            "type": "string",
            "description": "Тип деплоя",
            "enum": [
              "REALTIME",
              "MANUAL_BATCH",
              "AUTO_BATCH"
            ]
          },
          "jobId": {
            "type": "integer",
            "description": "Id джоба в оркестраторе",
            "format": "int64",
            "example": 1
          }
        }
      },
      "IntegrationMapDto": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/IntegrationFullDto"
        }
      },
      "DataProviderGetFullView": {
        "required": [
          "changeDt",
          "connectionType",
          "createDt",
          "sourceId",
          "sourceName",
          "sourceType"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор источника данных в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "sourceName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя источника данных",
            "example": "Витрина данных"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "createByUser": {
            "type": "string"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание источника данных",
            "example": "Операционная БД"
          },
          "sourceType": {
            "type": "string",
            "description": "Тип источника данных",
            "example": "ORACLE",
            "enum": [
              "ORACLE",
              "POSTGRES",
              "MSSQL",
              "TARANTOOL",
              "TARANTOOL_CARTRIDGE_CLUSTER",
              "TARANTOOL_DATAGRID_CLUSTER",
              "HBASE",
              "MONGO_DB"
            ]
          },
          "connectionType": {
            "type": "string",
            "description": "Тип соединения",
            "example": "JDBC",
            "enum": [
              "JDBC",
              "NO_SQL"
            ]
          },
          "settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProviderSettingsFullViewDto"
            }
          }
        }
      },
      "DataProviderGetFullViewWithTables": {
        "required": [
          "changeDt",
          "connectionType",
          "createDt",
          "sourceId",
          "sourceName",
          "sourceType"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор источника данных в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "sourceName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя источника данных",
            "example": "Витрина данных"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "createByUser": {
            "type": "string"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание источника данных",
            "example": "Операционная БД"
          },
          "sourceType": {
            "type": "string",
            "description": "Тип источника данных",
            "example": "ORACLE",
            "enum": [
              "ORACLE",
              "POSTGRES",
              "MSSQL",
              "TARANTOOL",
              "TARANTOOL_CARTRIDGE_CLUSTER",
              "TARANTOOL_DATAGRID_CLUSTER",
              "HBASE",
              "MONGO_DB"
            ]
          },
          "connectionType": {
            "type": "string",
            "description": "Тип соединения",
            "example": "JDBC",
            "enum": [
              "JDBC",
              "NO_SQL"
            ]
          },
          "settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataProviderSettingsFullViewDto"
            }
          },
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TablesDto"
            }
          },
          "isConnectionSucceeded": {
            "type": "boolean",
            "description": "Признак успещного соединения",
            "example": true
          }
        }
      },
      "TablesDto": {
        "required": [
          "tableName"
        ],
        "type": "object",
        "properties": {
          "tableName": {
            "type": "string",
            "description": "Название таблицы",
            "example": "RTDM_APPLICATIONS"
          },
          "schemaName": {
            "type": "string",
            "description": "Название схемы",
            "example": "public"
          }
        }
      },
      "IndexDto": {
        "required": [
          "indexName",
          "isPrimary",
          "isUnique"
        ],
        "type": "object",
        "properties": {
          "indexName": {
            "type": "string",
            "description": "Название индекса",
            "example": "primary"
          },
          "columns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isUnique": {
            "type": "boolean",
            "description": "Признак уникального индекса",
            "example": true
          },
          "isPrimary": {
            "type": "boolean",
            "description": "Признак первичного индекса",
            "example": true
          }
        }
      },
      "ColumnsDto": {
        "required": [
          "columnName",
          "dataType"
        ],
        "type": "object",
        "properties": {
          "columnName": {
            "type": "string",
            "description": "Название поля в таблице",
            "example": "RUN_ID"
          },
          "dataType": {
            "type": "string",
            "description": "Тип поля",
            "example": "VARCHAR"
          },
          "isPrimary": {
            "type": "boolean",
            "description": "Признак первичного ключа",
            "example": true
          },
          "isNullable": {
            "type": "boolean",
            "description": "Признак возможности null-значения",
            "example": true
          },
          "isAutoIncrement": {
            "type": "boolean",
            "description": "Признак авто-увеличения значения",
            "example": true
          },
          "haveDefault": {
            "type": "boolean",
            "description": "Признак наличия значения по умолчанию",
            "example": true
          }
        }
      },
      "FunctionsDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название функции",
            "example": "sum"
          },
          "body": {
            "type": "string",
            "description": "Тело функции",
            "example": "function(a, b) return a + b end"
          },
          "arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CustomAttributeDictionaryPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeDictionaryShortInfo"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CustomAttributeDictionaryShortInfo": {
        "required": [
          "changeDt",
          "createDt",
          "dictName",
          "dictValueTypeId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Идентификатор справочника в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "dictName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя справочника",
            "example": "Справочник №1"
          },
          "dictValueTypeId": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Идентификатор типа значений справочника",
            "format": "string",
            "example": "1"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "createByUser": {
            "type": "string"
          }
        }
      },
      "CustomAttributeDictionaryFullView": {
        "required": [
          "changeDt",
          "createDt",
          "dictName",
          "dictValueTypeId",
          "id",
          "values"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Идентификатор справочника в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "dictName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя справочника",
            "example": "Справочник №1"
          },
          "dictValueTypeId": {
            "maxLength": 1,
            "minLength": 1,
            "type": "string",
            "description": "Идентификатор типа значений справочника",
            "format": "string",
            "example": "1"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "createByUser": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeDictionaryValueFullView"
            }
          }
        }
      },
      "CustomAttributeDictionaryValueFullView": {
        "required": [
          "dictExpression",
          "dictValue",
          "dictValueDisplayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 36,
            "minLength": 36,
            "type": "string",
            "description": "Идентификатор значения справочника в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "dictExpression": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "description": "Выражение значения справочника",
            "example": "Выражение значения справочника"
          },
          "dictValue": {
            "type": "object",
            "description": "Значение справочника",
            "example": "Отображаемое наименование значения справочника"
          },
          "dictValueDisplayName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Отображаемое наименование значения справочникаа",
            "example": "Отображаемое наименование значения справочника"
          }
        },
        "description": "Список значений справочника"
      },
      "CounterFullViewDto": {
        "required": [
          "successCounter"
        ],
        "type": "object",
        "properties": {
          "successCounter": {
            "type": "integer",
            "description": "Счетчик успешных прохождений заявки",
            "format": "int32",
            "example": 123
          }
        }
      },
      "AttributeShortView": {
        "required": [
          "arrayFlag",
          "attributeId",
          "attributeName",
          "complexFlag"
        ],
        "type": "object",
        "properties": {
          "attributeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "attributeName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя атрибута",
            "example": "name"
          },
          "complexFlag": {
            "type": "boolean",
            "description": "Флаг отображающий тип данных, к которым относится атрибут",
            "example": true
          },
          "arrayFlag": {
            "type": "boolean",
            "description": "Флаг отображающий тип объекта данных, к которым относится атрибут",
            "example": false
          },
          "primitiveTypeId": {
            "type": "string",
            "description": "Уникальный идентификатор примитивного типа. Может принимать null значения",
            "example": "1"
          },
          "complexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор комплексного типа, на который ссылается атрибут в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          }
        },
        "description": "Лист атрибутов входящий в состав комплексного типа"
      },
      "ComplexTypeGetFullView": {
        "required": [
          "changeDt",
          "displayName",
          "objectName",
          "typeId",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "typeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "displayName": {
            "maxLength": 100,
            "type": "string",
            "description": "Имя для отображения на странице",
            "example": "Имя объекта"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание объекта комплексного типа",
            "example": "Объект пользователя, который включает в себя поля FirstName, SecondName, Phone..."
          },
          "createByUser": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeShortView"
            }
          }
        }
      },
      "ComplexTypePage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplexTypeGetFullView"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AttributeTreeView": {
        "required": [
          "arrayFlag",
          "attributeId",
          "attributeName",
          "complexFlag"
        ],
        "type": "object",
        "properties": {
          "attributeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "attributeName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя атрибута",
            "example": "name"
          },
          "complexFlag": {
            "type": "boolean",
            "description": "Флаг отображающий тип данных, к которым относится атрибут",
            "example": true
          },
          "arrayFlag": {
            "type": "boolean",
            "description": "Флаг отображающий тип объекта данных, к которым относится атрибут",
            "example": false
          },
          "primitiveTypeId": {
            "type": "string",
            "description": "Уникальный идентификатор примитивного типа. Может принимать null значения",
            "example": "1"
          },
          "complexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор комплексного типа, на который ссылается атрибут в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "complexTypeVersion": {
            "$ref": "#/components/schemas/ComplexTypeGetTreeView"
          }
        },
        "description": "Лист атрибутов входящий в состав комплексного типа"
      },
      "ComplexTypeGetTreeView": {
        "required": [
          "objectName",
          "typeId",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "typeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeTreeView"
            }
          }
        }
      },
      "ComplexTypeMap": {
        "required": [
          "displayName",
          "objectName",
          "typeId",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "typeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "displayName": {
            "maxLength": 100,
            "type": "string",
            "description": "Имя для отображения на странице",
            "example": "Имя объекта"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeCreate"
            }
          }
        }
      },
      "AttributeGetFullView": {
        "required": [
          "arrayFlag",
          "attributeId",
          "attributeName",
          "complexFlag",
          "parentId"
        ],
        "type": "object",
        "properties": {
          "attributeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "attributeName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя атрибута",
            "example": "name"
          },
          "complexFlag": {
            "type": "boolean",
            "description": "Флаг отображающий тип данных, к которым относится атрибут",
            "example": true
          },
          "arrayFlag": {
            "type": "boolean",
            "description": "Флаг отображающий тип объекта данных, к которым относится атрибут",
            "example": false
          },
          "primitiveTypeId": {
            "type": "string",
            "description": "Уникальный идентификатор примитивного типа. Может принимать null значения",
            "example": "1"
          },
          "complexTypeVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор комплексного типа, на который ссылается атрибут в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание атрибута",
            "example": "Имя клиента"
          },
          "parentId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор комплексного типа, от которого произведен атрибут, в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          }
        }
      },
      "ComplexTypeGetFullVersionView": {
        "required": [
          "changeDt",
          "displayName",
          "objectName",
          "typeId",
          "versionId",
          "versionType"
        ],
        "type": "object",
        "properties": {
          "typeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "displayName": {
            "maxLength": 100,
            "type": "string",
            "description": "Имя для отображения на странице",
            "example": "Имя объекта"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "versionType": {
            "type": "string",
            "description": "Тип версии",
            "enum": [
              "TEMP",
              "DEPLOYED",
              "LATEST",
              "USER_LOCAL",
              "USER_TEMP",
              "USER_GLOBAL",
              "TEST_DEPLOYED"
            ]
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          }
        }
      },
      "ComplexTypeCatalogPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplexTypeCatalogShortView"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ComplexTypeCatalogShortView": {
        "required": [
          "catalogFlag",
          "changeDt",
          "displayName",
          "objectName",
          "typeId",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "typeId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор в формате UUID 4",
            "format": "uuid",
            "example": "a190d64d-ef84-4d17-b05b-096f4b82365a"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии в формате UUID 4",
            "format": "uuid",
            "example": "29445f2b-89fa-4268-af3f-1b8160a7679c"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "displayName": {
            "maxLength": 100,
            "type": "string",
            "description": "Имя для отображения на странице",
            "example": "Имя объекта"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string",
            "description": "Последний пользователь, изменивший объект",
            "example": "Иван Иванов"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "elementId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор элемента в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "catalogFlag": {
            "type": "boolean",
            "description": "Признак каталога",
            "format": "boolean",
            "example": true
          }
        }
      },
      "CommunicationChannelShortInfoDto": {
        "required": [
          "changeDt",
          "communicationChannelId",
          "objectName",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "communicationChannelId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор канала коммуникации в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии канала коммуникации в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          }
        }
      },
      "CommunicationPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunicationChannelShortInfoDto"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CommunicationChannelFullViewDto": {
        "required": [
          "communicationChannelId",
          "objectName",
          "scriptId",
          "scriptName",
          "scriptVersionId",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "communicationChannelId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор канала коммуникации в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии канала коммуникации в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "description": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Описание канала коммуникации",
            "example": "Канал коммуникации PUSH"
          },
          "scriptId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор скрипта, связанного с каналом коммуникации в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "scriptVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор версии скрипта, связанного с каналом коммуникации в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "scriptName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя скрипта, связанного с каналом коммуникации в формате UUID 4",
            "example": "Код вызова канала коммуникации PUSH"
          },
          "communicationVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunicationVariableFullViewDto"
            }
          }
        }
      },
      "CommunicationChannelWithVariablesDto": {
        "required": [
          "communicationChannelId",
          "communicationScriptVariables",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "communicationChannelId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор канала коммуникации в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии канала коммуникации в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "communicationVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunicationVariableFullViewDto"
            }
          },
          "communicationScriptVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScriptVariableFullView"
            }
          }
        }
      },
      "CommunicationChannelShortInfoVersionDto": {
        "required": [
          "changeDt",
          "communicationChannelId",
          "objectName",
          "versionId",
          "versionType"
        ],
        "type": "object",
        "properties": {
          "communicationChannelId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор канала коммуникации в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии канала коммуникации в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionType": {
            "type": "string",
            "description": "Тип версии",
            "enum": [
              "TEMP",
              "DEPLOYED",
              "LATEST",
              "USER_LOCAL",
              "USER_TEMP",
              "USER_GLOBAL",
              "TEST_DEPLOYED"
            ]
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          }
        }
      },
      "ChannelFullViewDto": {
        "required": [
          "key",
          "name"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 100,
            "type": "string",
            "description": "Техническое название канала коммуникации",
            "example": "SMS"
          },
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Название канала коммуникации",
            "example": "СМС"
          }
        }
      },
      "CommunicationCatalogPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunicationChannelCatalogShortInfoDto"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CommunicationChannelCatalogShortInfoDto": {
        "required": [
          "catalogFlag",
          "changeDt",
          "communicationChannelId",
          "objectName",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "communicationChannelId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор канала коммуникации в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии канала коммуникации в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "lastChangeByUser": {
            "type": "string",
            "description": "Последний пользователь, изменивший объект",
            "example": "Иван Иванов"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "elementId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор элемента в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "catalogFlag": {
            "type": "boolean",
            "description": "Признак каталога",
            "format": "boolean",
            "example": true
          }
        }
      },
      "CatalogPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CatalogShortView"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CatalogShortView": {
        "required": [
          "catalogName"
        ],
        "type": "object",
        "properties": {
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "catalogName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя Каталога",
            "example": "Каталог №1"
          }
        }
      },
      "AggregatePage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateShortView"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AggregateShortView": {
        "required": [
          "aggregateId",
          "aggregateJson",
          "changeDt",
          "objectName",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "aggregateId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор агрегата в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии агрегата в формате UUID",
            "format": "uuid",
            "example": "9d4ade21-cf23-4819-ac9d-f052dba69002"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "aggregateDescription": {
            "maxLength": 1000,
            "type": "string",
            "description": "Описание агрегата (бизнес наименование)",
            "example": "описание агрегата"
          },
          "aggregateJson": {
            "$ref": "#/components/schemas/AggregateJson"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          }
        }
      },
      "AggregateGetFullView": {
        "required": [
          "aggregateId",
          "aggregateJson",
          "changeDt",
          "createDt",
          "objectName",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "aggregateId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор агрегата в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии агрегата в формате UUID",
            "format": "uuid",
            "example": "9d4ade21-cf23-4819-ac9d-f052dba69002"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "aggregateDescription": {
            "maxLength": 1000,
            "type": "string",
            "description": "Описание агрегата (бизнес наименование)",
            "example": "описание агрегата"
          },
          "aggregateJson": {
            "$ref": "#/components/schemas/AggregateJson"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "createByUser": {
            "type": "string"
          },
          "lastChangeByUser": {
            "type": "string"
          }
        }
      },
      "AggregateGetFullVersionView": {
        "required": [
          "aggregateId",
          "aggregateJson",
          "changeDt",
          "createDt",
          "objectName",
          "rootObjectVersionId",
          "versionId",
          "versionType"
        ],
        "type": "object",
        "properties": {
          "aggregateId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор агрегата в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии агрегата в формате UUID",
            "format": "uuid",
            "example": "9d4ade21-cf23-4819-ac9d-f052dba69002"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "aggregateDescription": {
            "maxLength": 1000,
            "type": "string",
            "description": "Описание агрегата (бизнес наименование)",
            "example": "описание агрегата"
          },
          "aggregateJson": {
            "$ref": "#/components/schemas/AggregateJson"
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          },
          "createDt": {
            "type": "string",
            "description": "Дата Время создания",
            "format": "date-time"
          },
          "createByUser": {
            "type": "string"
          },
          "lastChangeByUser": {
            "type": "string"
          },
          "versionType": {
            "type": "string",
            "description": "Тип версии",
            "enum": [
              "TEMP",
              "DEPLOYED",
              "LATEST",
              "USER_LOCAL",
              "USER_TEMP",
              "USER_GLOBAL",
              "TEST_DEPLOYED"
            ]
          },
          "versionName": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Имя версии",
            "example": "имя версии"
          },
          "versionDescription": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "Описание версии",
            "example": "описание версии"
          },
          "rootObjectVersionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор родительского объекта версии агрегата в формате UUID",
            "format": "uuid",
            "example": "9d4ade21-cf23-4819-ac9d-f052dba69002"
          }
        }
      },
      "AggregateCatalogGetFullView": {
        "required": [
          "aggregateId",
          "aggregateJson",
          "catalogFlag",
          "changeDt",
          "objectName",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "aggregateId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор агрегата в формате UUID",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "versionId": {
            "maxLength": 36,
            "type": "string",
            "description": "Уникальный идентификатор версии агрегата в формате UUID",
            "format": "uuid",
            "example": "9d4ade21-cf23-4819-ac9d-f052dba69002"
          },
          "objectName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Имя объекта",
            "example": "Объект №1"
          },
          "aggregateDescription": {
            "maxLength": 1000,
            "type": "string",
            "description": "Описание агрегата (бизнес наименование)",
            "example": "описание агрегата"
          },
          "aggregateJson": {
            "$ref": "#/components/schemas/AggregateJson"
          },
          "catalogId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор каталога в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "elementId": {
            "maxLength": 36,
            "type": "string",
            "description": "Идентификатор элемента в формате UUID 4",
            "format": "uuid",
            "example": "ae61e4be-8402-43dc-bcdb-5f12d0ddf339"
          },
          "catalogFlag": {
            "type": "boolean",
            "description": "Признак каталога",
            "format": "boolean",
            "example": true
          },
          "changeDt": {
            "type": "string",
            "description": "Дата Время обновления",
            "format": "date-time"
          }
        }
      },
      "AggregateCatalogPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateCatalogGetFullView"
            }
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "currentPageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "password": {
            "tokenUrl": "https://auth.demo.datasapience.ru/auth/realms/prod/protocol/openid-connect/token"
          }
        }
      }
    }
  }
}