# generated by datamodel-codegen:
#   filename:  decision.json
#   timestamp: 2024-03-19T10:30:25+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, Field, RootModel, conint, constr


class UserFunctionUpdateDto(BaseModel):
    """
    Объект для обновления полей функции
    """

    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    resultType: Optional[str] = Field(None, examples=['Дробный'])
    """
    Тип возвращаемого пользовательской функцией значения
    """
    description: Optional[str] = Field(None, examples=['Описание'])
    """
    Описание пользовательской функции
    """


class Operation(Enum):
    """
    Совершаемая операция
    """

    UPDATE = 'update'
    SAVE = 'save'
    DELETE = 'delete'
    DEPLOY = 'deploy'
    VALIDATE = 'validate'


class ResponseDto(BaseModel):
    timeStamp: AwareDatetime
    """
    Время ошибки
    """
    uuid: Optional[UUID] = Field(
        None, examples=['d8d6ba76-ea3f-4d9b-b7b7-a819ef0f5549']
    )
    """
    uuid присвоенный при работе с объектом
    """
    httpCode: int = Field(..., examples=[200])
    """
    Дублированный http код
    """
    module: str = Field(..., examples=['diagram'])
    """
    Модуль, в котором производилось действие
    """
    operation: Operation = Field(..., examples=['save'])
    """
    Совершаемая операция
    """
    message: Optional[str] = Field(
        None, examples=['Unable to find a model that matches key ModelKey']
    )
    """
    Trace ошибки
    """
    validationPayload: Optional[Dict[str, Any]] = None
    """
    Объект с ошибкой
    """


class TestCreate(BaseModel):
    testName: str = Field(..., examples=['test_01'])
    """
    Имя теста
    """
    testFile: Optional[str] = Field(None, examples=['/path/to/file'])
    """
    Путь к файлу с данными для теста
    """
    testDescription: Optional[str] = Field(None, examples=['test description'])
    """
    Описание теста
    """
    diagramId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор диаграммы в формате UUID 4
    """
    timeout: Optional[int] = Field(None, examples=[10])
    """
    Таймаут в секундах
    """


class ExternalServiceHeaderFullViewDto(BaseModel):
    """
    Список заголовков внешнего сервиса
    """

    headerId: Optional[UUID] = Field(
        None, examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    UUID заголовка
    """
    headerName: constr(min_length=0, max_length=50) = Field(..., examples=['Cookie'])
    """
    Имя заголовка
    """
    headerValue: str = Field(..., examples=['Value'])
    """
    Значение заголовка
    """


class ServiceType(Enum):
    """
    Тип обмена
    """

    HTTP = 'HTTP'
    HTTPS = 'HTTPS'


class KeycloakGrantType(Enum):
    """
    Тип GrantType
    """

    CLIENT_CREDENTIALS = 'CLIENT_CREDENTIALS'
    PASSWORD = 'PASSWORD'


class ExternalServiceSettingsFullViewDto(BaseModel):
    """
    Список настроек подключения внешнего сервиса
    """

    environmentSettingsId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор внешнего сервиса в формате UUID 4
    """
    host: constr(min_length=0, max_length=50) = Field(..., examples=['192.168.0.1'])
    """
    Имя хоста
    """
    serviceType: ServiceType = Field(..., examples=['HTTPS'])
    """
    Тип обмена
    """
    endpoint: constr(min_length=0, max_length=50) = Field(
        ..., examples=['diagram/node/{nodeId}']
    )
    """
    Endpoint внешнего сервиса
    """
    port: conint(le=65535) = Field(..., examples=[8080])
    """
    Порт внешнего сервиса
    """
    secondAttemptsCnt: Optional[conint(le=10)] = Field(None, examples=[3])
    """
    Количество повторных попыток отправки сообщения
    """
    transactionsPerSecond: Optional[int] = Field(None, examples=[1])
    """
    Частота транзакций
    """
    interval: Optional[int] = Field(None, examples=[5])
    """
    Интервал между повторными попытками отправки в секундах
    """
    timeout: Optional[int] = Field(None, examples=[5])
    """
    Максимальное время ожидания ответа в секундах
    """
    keycloakClientId: Optional[constr(max_length=50)] = Field(
        None, examples=['decision.frontend']
    )
    """
    Keycloak client
    """
    keycloakClientSecret: Optional[constr(max_length=100)] = Field(
        None, examples=['secret']
    )
    """
    Keycloak Client Secret
    """
    keycloakUser: Optional[constr(max_length=32)] = Field(None, examples=['userName'])
    """
    Keycloak User
    """
    keycloakPassword: Optional[constr(max_length=100)] = Field(
        None, examples=['password']
    )
    """
    Keycloak password
    """
    keycloakGrantType: Optional[KeycloakGrantType] = None
    """
    Тип GrantType
    """
    keycloakServer: Optional[constr(max_length=200)] = Field(
        None, examples=['https://auth.k8s.datasapience.ru/auth']
    )
    """
    Сервер Keycloak
    """
    keycloakRealm: Optional[constr(max_length=50)] = Field(None, examples=['dev'])
    """
    Realm Keycloak
    """
    isKeyCloakAuth: Optional[bool] = Field(None, examples=[False])
    """
    Использовать авторизацию при помощи Keycloak
    """
    serviceSettingsId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор настроек внешнего сервиса в формате UUID 4
    """


class FileFormat(Enum):
    """
    Формат сообщения
    """

    JSON = 'JSON'
    XML = 'XML'


class Method(Enum):
    """
    Используемый метод взаимодействия
    """

    GET = 'GET'
    POST = 'POST'
    PUT = 'PUT'
    PATCH = 'PATCH'


class Protocol(Enum):
    """
    Протокол доступа
    """

    REST = 'REST'
    SOAP = 'SOAP'


class SyncType(Enum):
    """
    Тип взаимодействия
    """

    SYNC = 'SYNC'
    ASYNC_ = 'ASYNC'


class VariableType(Enum):
    """
    Тип параметра (входной, выходной, рассчитываемый)
    """

    IN_ = 'IN'
    OUT = 'OUT'
    CALCULATED = 'CALCULATED'
    ERROR = 'ERROR'


class ExternalServiceVariableFullViewDto(BaseModel):
    """
    Список переменных внешнего сервиса
    """

    variableName: str = Field(..., examples=['имя_переменной'])
    """
    Имя переменной
    """
    primitiveTypeId: Optional[str] = Field(None, examples=['1'])
    """
    Id простого типа переменной
    """
    complexTypeVersionId: Optional[UUID] = Field(
        None, examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id комплексного типа переменной
    """
    variableType: Optional[VariableType] = None
    """
    Тип параметра (входной, выходной, рассчитываемый)
    """
    isArray: bool = Field(..., examples=[False])
    """
    Является ли переменная массивом
    """
    isComplex: bool = Field(..., examples=[False])
    """
    Является ли переменная комплексным типом
    """
    sourcePath: Optional[str] = Field(None, examples=['/'])
    """
    Путь к значению переменной в структуре ответа сервиса
    """
    expression: Optional[str] = Field(None, examples=['ln(e)'])
    """
    Выражение для рассчета переменной
    """
    functionIds: Optional[List[str]] = None
    variableId: Optional[UUID] = Field(
        None, examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id переменной
    """
    childVariables: Optional[List[ExternalServiceVariableFullViewDto]] = None


class ExternalServiceUpdateUserVersionDto(BaseModel):
    """
    Объект для обновления внешнего сервиса
    """

    versionName: Optional[constr(min_length=1, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """


class ScriptUpdateUserVersion(BaseModel):
    """
    Объект для обновления версии скрипта
    """

    versionName: Optional[constr(min_length=1, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """


class ScriptType(Enum):
    """
    Язык скрипта
    """

    GROOVY = 'GROOVY'
    PYTHON = 'PYTHON'


class VariableType1(Enum):
    """
    Тип параметра (входной, выходной)
    """

    IN_ = 'IN'
    OUT = 'OUT'


class ScriptVariableFullView(BaseModel):
    """
    Список переменных скрипта канала коммуникации
    """

    variableName: str = Field(..., examples=['имя_переменной'])
    """
    Имя переменной
    """
    primitiveTypeId: Optional[int] = Field(None, examples=[1])
    """
    Id простого типа переменной
    """
    complexTypeVersionId: Optional[UUID] = Field(
        None, examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id комплексного типа переменной
    """
    variableType: VariableType1
    """
    Тип параметра (входной, выходной)
    """
    arrayFlag: bool = Field(..., examples=[False])
    """
    Является ли переменная массивом
    """
    variableId: Optional[UUID] = Field(
        None, examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id переменной
    """


class ScriptFullView(BaseModel):
    scriptText: str = Field(..., examples=['Текст скрипта'])
    """
    Текст скрипта
    """
    description: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание скрипта']
    )
    """
    Описание скрипта
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    variables: Optional[List[ScriptVariableFullView]] = None
    scriptId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор скрипта в формате UUID
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии скрипта в формате UUID
    """


class GroovyUpdate(BaseModel):
    """
    Объект для обновления скрипта
    """

    scriptText: str = Field(..., examples=['Текст скрипта'])
    """
    Текст скрипта
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    description: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание скрипта']
    )
    """
    Описание скрипта
    """
    variables: Optional[List[ScriptVariableFullView]] = None
    scriptType: ScriptType
    """
    Язык скрипта
    """
    scriptId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор скрипта в формате UUID
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии скрипта в формате UUID
    """


class PythonEnvironmentSettingsWithIdDto(BaseModel):
    """
    Список настроек окружения питона по окружению
    """

    limitsCpu: float = Field(..., examples=[0.1])
    """
    Верхняя граница количество ядер
    """
    requestsCpu: float = Field(..., examples=[0.1])
    """
    Необходимое количество ядер
    """
    limitsMemory: int = Field(..., examples=[1000])
    """
    Верхняя граница количество памяти
    """
    requestsMemory: int = Field(..., examples=[500])
    """
    Необходимое количество ядер
    """
    environmentId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор окружения в формате UUID 4
    """
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор настроек kafka в формате UUID 4
    """


class PythonEnvironmentUpdateDto(BaseModel):
    name: constr(min_length=1, max_length=100) = Field(..., examples=['питон'])
    """
    Имя окружения python
    """
    pythonVersionId: constr(min_length=36, max_length=36) = Field(
        ..., examples=['597e4cc3-98d2-42a6-9209-e803417fcba7']
    )
    """
    Идентификатор версии python
    """
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор окружения python в формате UUID
    """
    versionId: Optional[str] = None
    requirementsTxt: Optional[str] = Field(None, examples=['pandas==0.2.0'])
    """
    Текст файла requirements.txt
    """
    pythonEnvironmentSettings: Optional[List[PythonEnvironmentSettingsWithIdDto]] = None


class RuleTypeUpdateDto(BaseModel):
    """
    Объект для обновления типа правила
    """

    typeName: constr(max_length=100) = Field(..., examples=['Name object'])
    """
    Системное имя в UTF-8
    """
    displayName: constr(max_length=100) = Field(..., examples=['Имя объекта'])
    """
    Имя для отображения на странице
    """


class Protocol1(BaseModel):
    """
    Протокол
    """


class RestSourceSettingsFullViewDto(BaseModel):
    """
    Список настроек подключения внешнего сервиса
    """

    environmentId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор настроек окружения в формате UUID 4
    """
    host: constr(min_length=0, max_length=50) = Field(..., examples=['192.168.0.1'])
    """
    Имя хоста
    """
    port: conint(le=65535) = Field(..., examples=[8080])
    """
    Порт внешнего сервиса
    """
    protocol: Protocol1
    restSourceSettingsId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор настроек REST источника в формате UUID 4
    """


class RestSourceUpdateDto(BaseModel):
    """
    Объект для обновления REST источника
    """

    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['REST источник']
    )
    """
    Описание REST источника
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    restSourceSettings: Optional[List[RestSourceSettingsFullViewDto]] = None


class DataSourceType(Enum):
    """
    Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)
    """

    USER_INPUT = 'USER_INPUT'
    DICTIONARY = 'DICTIONARY'
    DIAGRAM_ELEMENT = 'DIAGRAM_ELEMENT'


class DynamicListType(Enum):
    """
    Тип отображения динамического списка
    """

    RADIO_BUTTON = 'RADIO_BUTTON'
    DROP_DOWN_LIST = 'DROP_DOWN_LIST'


class OfferVariableFullViewDto(BaseModel):
    """
    Список переменных шаблона предложения
    """

    variableName: str = Field(..., examples=['имя_переменной'])
    """
    Имя переменной
    """
    scriptVariableName: str = Field(..., examples=['имя_переменной_скрипта'])
    """
    Имя переменной скрипта
    """
    primitiveTypeId: Optional[str] = Field(None, examples=['1'])
    """
    Id простого типа переменной
    """
    complexTypeVersionId: Optional[UUID] = Field(
        None, examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id комплексного типа переменной
    """
    arrayFlag: bool = Field(..., examples=[False])
    """
    Является ли переменная массивом
    """
    dataSourceType: DataSourceType
    """
    Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)
    """
    minValue: Optional[float] = Field(None, examples=[5.0])
    """
    Минимальное значение переменной
    """
    maxValue: Optional[float] = Field(None, examples=[15.0])
    """
    Максимальное значение переменной
    """
    maxSize: Optional[int] = Field(None, examples=[100])
    """
    Максимальная длина переменной
    """
    dictionaryId: Optional[UUID] = Field(
        None, examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id справочника, в котором находятся допустимые значения переменной
    """
    dynamicListType: Optional[DynamicListType] = None
    """
    Тип отображения динамического списка
    """
    mandatoryFlag: bool = Field(..., examples=[False])
    """
    Является ли переменная обязательной
    """
    id: UUID = Field(..., examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'])
    """
    Id переменной
    """


class OfferUpdateUserVersionDto(BaseModel):
    """
    Объект для обновления шаблона предложения
    """

    versionName: Optional[constr(min_length=1, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """


class KafkaAdditionalSettingsWithIdDto(BaseModel):
    """
    Список дополнительных настроек Kafka
    """

    propertyName: constr(max_length=100) = Field(
        ..., examples=['kafka.bootstrap.servers']
    )
    """
    Наименование параметра
    """
    propertyValue: constr(max_length=1000) = Field(
        ..., examples=['kafka-bootstrap.server.ru']
    )
    """
    Значение параметра
    """
    propertySecure: Optional[bool] = Field(None, examples=[False])
    """
    Признак конфиденциальности параметра
    """
    kafkaAdditionalId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор дополнительных параметров Kafka в формате UUID 4
    """


class KafkaSettingsWithIdDto(BaseModel):
    """
    Список настроек Kafka по окружению
    """

    bootstrapServers: Optional[str] = Field(
        None, examples=['bootstrapServer1:9092,bootstrapServer2:9092']
    )
    """
    bootstrapServers kafka
    """
    environmentId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор окружения в формате UUID 4
    """
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор настроек kafka в формате UUID 4
    """
    kafkaAdditionalSettings: Optional[List[KafkaAdditionalSettingsWithIdDto]] = None


class KafkaUpdateDto(BaseModel):
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор kafka в формате UUID 4
    """
    name: constr(min_length=0, max_length=100) = Field(..., examples=['local kafka'])
    """
    Имя kafka
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Kafka для тестирования']
    )
    """
    Описание kafka
    """
    kafkaSettings: Optional[List[KafkaSettingsWithIdDto]] = None


class IntegrationPlatformEnvironmentFullViewDto(BaseModel):
    """
    Параметры модуля интеграции
    """

    integrationUrl: constr(min_length=0, max_length=100) = Field(
        ..., examples=['http://localhost:8081']
    )
    """
    Url модуля интеграции
    """


class KafkaEnvironmentUpdateDto(BaseModel):
    """
    Параметры Kafka
    """

    kafkaUrl: constr(min_length=0, max_length=100) = Field(
        ..., examples=['http://localhost:29092']
    )
    """
    Url kafka
    """
    kafkaEnvironmentAdditionalSettings: Optional[
        List[KafkaAdditionalSettingsWithIdDto]
    ] = None


class StateStoreServerType(Enum):
    """
    Тип СУБД кэша агрегатов
    """

    POSTGRESQL = 'POSTGRESQL'


class StateStoreEnvironmentFullViewDto(BaseModel):
    """
    Параметры базы данных state store агрегатов
    """

    stateStoreUsername: constr(min_length=0, max_length=32) = Field(
        ..., examples=['decision']
    )
    """
    Имя пользователя базы данных state store агрегатов
    """
    stateStorePassword: constr(min_length=0, max_length=32) = Field(
        ..., examples=['decision']
    )
    """
    Пароль пользователя базы данных state store агрегатов
    """
    stateStoreSchema: constr(min_length=0, max_length=100) = Field(
        ..., examples=['decision']
    )
    """
    Схема базы данных state store агрегатов
    """
    stateStoreServerName: constr(min_length=0, max_length=32) = Field(
        ..., examples=['example.com']
    )
    """
    Hostname базы данных state store агрегатов
    """
    stateStoreServerPort: constr(min_length=0, max_length=32) = Field(
        ..., examples=['example.com']
    )
    """
    Hostname базы данных state store агрегатов
    """
    stateStoreAdditionalProperties: constr(min_length=0, max_length=200) = Field(
        ..., examples=['/postgres']
    )
    """
    Допольнительные параметры подключения
    """
    stateStoreServerType: StateStoreServerType = Field(..., examples=['POSTGRESQL'])
    """
    Тип СУБД кэша агрегатов
    """


class StreamingPlatformEnvironmentFullViewDto(BaseModel):
    """
    Параметры модуля исполнения
    """

    streamingPlatformUsername: Optional[constr(min_length=0, max_length=32)] = Field(
        None, examples=['decision']
    )
    """
    Имя пользователя модуля исполнения
    """
    streamingPlatformPassword: Optional[constr(min_length=0, max_length=32)] = Field(
        None, examples=['decision']
    )
    """
    Пароль пользователя модуля исполнения
    """
    streamingPlatformUrl: constr(min_length=0, max_length=1000) = Field(
        ..., examples=['http://localhost:8083']
    )
    """
    Url платформы
    """


class DiagramMetaInfo(BaseModel):
    """
    Объект метаинформации диаграммы
    """

    nodeCounter: Optional[int] = None
    """
    Счетчик узла
    """


class DiagramUpdate(BaseModel):
    """
    Объект для обновления полей диаграммы
    """

    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    diagramDescription: Optional[constr(min_length=0, max_length=2000)] = Field(
        None, examples=['Диаграмма обладает функционалом и выполняет...']
    )
    """
    Описание диаграммы
    """
    errorResponseFlag: bool = Field(..., examples=[True])
    """
    Флаг обработки аварийного ответа
    """
    metaInfo: Optional[DiagramMetaInfo] = None


class DiagramUpdateUserVersion(BaseModel):
    """
    Объект для обновления полей диаграммы
    """

    versionName: constr(min_length=1, max_length=100) = Field(
        ..., examples=['имя версии']
    )
    """
    Имя версии
    """
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """


class Jwt(BaseModel):
    tokenValue: Optional[str] = None
    issuedAt: Optional[AwareDatetime] = None
    expiresAt: Optional[AwareDatetime] = None
    headers: Optional[Dict[str, Dict[str, Any]]] = None
    claims: Optional[Dict[str, Dict[str, Any]]] = None
    id: Optional[str] = None
    notBefore: Optional[AwareDatetime] = None
    subject: Optional[str] = None
    issuer: Optional[str] = None
    audience: Optional[List[str]] = None


class ParameterType(Enum):
    """
    Тип параметра (входной, выходной)
    """

    IN_ = 'IN'
    OUT = 'OUT'
    IN_OUT = 'IN_OUT'


class DiagramInnerVariableFullViewDto(BaseModel):
    parameterVersionId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор версии входного/выходного параметра
    """
    parameterId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор входного/выходного параметра
    """
    parameterName: constr(max_length=40) = Field(..., examples=['Client'])
    """
    Имя входного/выходного параметра
    """
    dictName: Optional[constr(max_length=100)] = Field(None, examples=['Справочник №1'])
    """
    Наименование справочника
    """
    typeId: constr(min_length=1, max_length=36) = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор примитивного или пользовательского типа входного/выходного параметра.
    """
    dictId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор справочника
    """
    arrayFlag: bool = Field(..., examples=[False])
    """
    Признак массива (true)
    """
    complexFlag: bool = Field(..., examples=[False])
    """
    Признак комплексного типа (true)
    """
    dictFlag: bool = Field(..., examples=[False])
    """
    Признак справочника кастомных типов (true)
    """


class InOutParamMetaInfo(BaseModel):
    """
    JSON-настройки отображения
    """

    orderNum: Optional[int] = None
    """
    Порядковый номер записи в таблице интерфейса входные/выходные перменные. Вспомогательное поле
    """
    isExecuteStatus: Optional[bool] = None
    """
    Является ли переменная статусом выполнения диаграммы. Вспомогательное поле
    """


class DiagramValidateResponseDto(BaseModel):
    timeStamp: AwareDatetime
    """
    Время ошибки
    """
    uuid: Optional[UUID] = Field(
        None, examples=['d8d6ba76-ea3f-4d9b-b7b7-a819ef0f5549']
    )
    """
    uuid присвоенный при работе с объектом
    """
    httpCode: int = Field(..., examples=[200])
    """
    Дублированный http код
    """
    module: str = Field(..., examples=['diagram'])
    """
    Модуль, в котором производилось действие
    """
    operation: Operation = Field(..., examples=['save'])
    """
    Совершаемая операция
    """
    message: Optional[str] = Field(
        None, examples=['Unable to find a model that matches key ModelKey']
    )
    """
    Trace ошибки
    """
    validationPayload: Optional[Dict[str, Any]] = None
    """
    Объект с ошибкой
    """
    invalidNodeIds: Optional[List[str]] = None


class DiagramRename(BaseModel):
    """
    Объект для обновления имени диаграммы
    """

    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """


class RetentionType(Enum):
    EVENT = 'event'
    PROCESS = 'process'


class RetentionTimeUnit(Enum):
    MS = 'ms'
    S = 's'
    M = 'm'
    H = 'h'
    D = 'd'


class WatermarkType(Enum):
    MONOTONOUS = 'monotonous'
    BOUNDED_UNORDERED = 'bounded_unordered'
    PERIODIC = 'periodic'
    PERIODIC_BOUNDED_UNORDERED = 'periodic_bounded_unordered'


class AggregateFunction(Enum):
    AGG_AVERAGE = 'AggAverage'
    AGG_COUNT = 'AggCount'
    AGG_COUNT_DISTINCT = 'AggCountDistinct'
    AGG_COUNT_NON_NULL = 'AggCountNonNull'
    AGG_FIRST_VALUE = 'AggFirstValue'
    AGG_LAST_VALUE = 'AggLastValue'
    AGG_MAX = 'AggMax'
    AGG_MIN = 'AggMin'
    AGG_MODE = 'AggMode'
    AGG_SUM = 'AggSum'
    AGG_STD = 'AggStd'


class AggregateComputeProperties(BaseModel):
    aggregateId: Optional[str] = None
    versionId: Optional[str] = None
    aggregateName: Optional[str] = None
    aggregateVariableType: Optional[str] = None
    diagramAggregateElement: Optional[str] = None
    aggregateElementTypeId: Optional[str] = None
    isUsedInDiagram: Optional[bool] = None
    aggregateFunction: Optional[AggregateFunction] = None


class AggregateReadingProperties(BaseModel):
    aggregateId: Optional[str] = None
    versionId: Optional[str] = None
    aggregateName: Optional[str] = None
    aggregateVariableType: Optional[str] = None
    aggregateDescription: Optional[str] = None


class ArrayConfig(BaseModel):
    field_name: Optional[str] = None


class Batch(BaseModel):
    interval: Optional[constr(pattern=r'^\d+(ms|s|m|h|d)$')] = None
    max_size: Optional[int] = None


class Branch(BaseModel):
    rowKey: Optional[str] = None
    nodeId: Optional[str] = None
    linkId: Optional[str] = None
    priority: Optional[int] = None


class Assigner(Enum):
    BASE_PATH = 'base_path'
    DATE_TIME = 'date_time'
    DATE_TIME_PARTITIONED = 'date_time_partitioned'


class Bucket(BaseModel):
    check_interval: Optional[str] = None
    partition_column_name: Optional[str] = None
    assigner: Optional[Assigner] = None
    date_time_pattern: Optional[str] = None


class Bulk(BaseModel):
    format: Optional[str] = None


class CalculateExpression(BaseModel):
    calculateExpressionValue: Optional[str] = None
    functionIds: Optional[List[str]] = None


class CalculateNodeVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    expression: Optional[CalculateExpression] = None


class Type(Enum):
    HADOOP = 'hadoop'
    HIVE = 'hive'


class Type1(Enum):
    SCD1 = 'SCD1'


class CdcTargetFields(BaseModel):
    capture_ts: Optional[str] = None
    apply_ts: Optional[str] = None
    source_ts: Optional[str] = None
    delete_flag: Optional[str] = None


class Mode(Enum):
    ALL = 'all'
    UPSERT = 'upsert'


class Changelog(BaseModel):
    mode: Optional[Mode] = None


class ChannelNodeMappingVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    nodeVariable: Optional[str] = None
    externalId: Optional[str] = None
    isVariableFromTemplate: Optional[bool] = None
    mandatoryFlag: Optional[bool] = None


class ResetStrategy(Enum):
    LATEST = 'LATEST'
    EARLIEST = 'EARLIEST'
    NONE = 'NONE'


class Committed(BaseModel):
    reset_strategy: Optional[ResetStrategy] = None


class EmbedEnum(Enum):
    LAST_TASK_STATES = 'LAST_TASK_STATES'
    TASK_STATES = 'TASK_STATES'
    BATCHES = 'BATCHES'
    TEMPLATES = 'TEMPLATES'
    CONTENTS = 'CONTENTS'
    PROPERTIES = 'PROPERTIES'
    OFFERS = 'OFFERS'
    CONTACT_INFO = 'CONTACT_INFO'


class ContactDateTimeNodeVariable(BaseModel):
    expression: Optional[str] = None
    functionIds: Optional[List[str]] = None


class Csv(BaseModel):
    delimiter: Optional[constr(pattern=r'^.$')] = None
    null_value: Optional[str] = None


class ScriptType2(Enum):
    GROOVY = 'GROOVY'
    PYTHON = 'PYTHON'


class DataSourceVariable(BaseModel):
    columnName: Optional[str] = None
    dataType: Optional[str] = None
    isNullable: Optional[bool] = None
    isPrimary: Optional[bool] = None


class DeJson(BaseModel):
    timestamp_pattern: Optional[str] = None


class Format(Enum):
    STRING = 'string'
    JSON = 'json'


class DeKey(BaseModel):
    enabled: Optional[bool] = None
    schema_: Optional[str] = Field(None, alias='schema')
    format: Optional[Format] = None
    name: Optional[str] = None
    json_: Optional[DeJson] = Field(None, alias='json')


class Format1(Enum):
    CSV = 'csv'
    JSON = 'json'
    AVRO = 'avro'
    AVRO_CONFLUENT = 'avro_confluent'
    BINARY = 'binary'
    STRING = 'string'
    XML = 'xml'


class DeValue(BaseModel):
    confluent_url: Optional[str] = None
    confluent_subject: Optional[str] = None
    format: Optional[Format1] = None
    json_: Optional[DeJson] = Field(None, alias='json')
    csv: Optional[Csv] = None
    exclude_key: Optional[bool] = None


class DefaultBranch(BaseModel):
    rowKey: Optional[str] = None
    nodeId: Optional[str] = None
    linkId: Optional[str] = None


class ExecutionOptions(BaseModel):
    timeout: Optional[constr(pattern=r'^\d+(ms|s|m|h|d)$')] = None
    batch: Optional[Batch] = None


class FieldMapping(BaseModel):
    flow_key: str
    table_key: str


class File(BaseModel):
    bucket: Optional[Bucket] = None
    path: Optional[str] = None
    bulk: Optional[Bulk] = None


class Type3(Enum):
    ARRAY = 'ARRAY'
    MAP = 'MAP'


class MissingDataStrategy(Enum):
    NULL = 'NULL'
    DISCARD = 'DISCARD'


class FlinkAggregate(BaseModel):
    expression: str
    alias: str


class GroupingElementsMapping(BaseModel):
    rowKey: Optional[str] = None
    aggregateElement: Optional[str] = None
    diagramElement: Optional[str] = None


class Type4(Enum):
    TUMBLE = 'TUMBLE'
    SESSION = 'SESSION'


class GroupingWindow(BaseModel):
    interval: Optional[str] = None
    type: Optional[Type4] = None


class EnrichmentType(Enum):
    OUTER = 'OUTER'
    INNER = 'INNER'


class Input(BaseModel):
    field_name: str


class JdbcConnection(BaseModel):
    provider_type: Optional[str] = None
    password: Optional[str] = None
    driver: Optional[str] = None
    user: Optional[str] = None
    url: Optional[str] = None


class QueryType(Enum):
    SINGLE = 'SINGLE'
    BATCH = 'BATCH'


class InputType(Enum):
    SQL = 'SQL'
    REQUEST_PARAMETERS = 'REQUEST_PARAMETERS'


class QueryType1(Enum):
    INSERT = 'INSERT'
    UPDATE = 'UPDATE'
    MERGE = 'MERGE'
    INSERT_ARRAY = 'INSERT_ARRAY'
    UPDATE_ARRAY = 'UPDATE_ARRAY'
    MERGE_ARRAY = 'MERGE_ARRAY'


class JoinConditionType(Enum):
    COMPLETION_OF_ALL_PREVIOUS_BLOCKS = 'COMPLETION_OF_ALL_PREVIOUS_BLOCKS'
    COMPLETION_OF_AT_LEAST_ONE_PREVIOUS_BLOCK = (
        'COMPLETION_OF_AT_LEAST_ONE_PREVIOUS_BLOCK'
    )


class JoinType(Enum):
    INNER = 'INNER'
    LEFT = 'LEFT'
    RIGHT = 'RIGHT'
    FULL = 'FULL'


class JoinStream(BaseModel):
    name: str
    alias: constr(pattern=r'^\S+$')
    ttl: Optional[constr(pattern=r'^\d+(ms|s|m|h|d)$')] = None


class Type5(Enum):
    NONE = 'none'
    EARLIEST = 'earliest'
    LATEST = 'latest'
    COMMITTED = 'committed'
    TIMESTAMP = 'timestamp'


class KafkaConsumerOffsets(BaseModel):
    type: Optional[Type5] = None
    timestamp: Optional[int] = None
    committed: Optional[Committed] = None


class KafkaProperty(BaseModel):
    name: str
    value: str


class Semantic(Enum):
    EXACTLY_ONCE = 'EXACTLY_ONCE'
    AT_LEAST_ONCE = 'AT_LEAST_ONCE'
    NONE = 'NONE'


class KafkaSinkProducerCfg(BaseModel):
    semantic: Optional[Semantic] = None
    topic: constr(pattern=r'^[-\w.]+$')
    properties: Optional[List[KafkaProperty]] = None


class KafkaSourceConsumerCfg(BaseModel):
    group_id: Optional[str] = None
    start_offsets: Optional[KafkaConsumerOffsets] = None
    stop_offsets: Optional[KafkaConsumerOffsets] = None
    topic: constr(pattern=r'^[-\w.]+$')
    properties: Optional[List[KafkaProperty]] = None


class KafkaSourceKafkaNodeCfg(BaseModel):
    consumer: KafkaSourceConsumerCfg


class Boundedness(Enum):
    BOUNDED = 'BOUNDED'
    CONTINUOUS_UNBOUNDED = 'CONTINUOUS_UNBOUNDED'


class Key(BaseModel):
    password: Optional[str] = None


class Type6(Enum):
    INNER = 'inner'
    OUTER = 'outer'


class Lookup(BaseModel):
    type: Type6


class MapConfig(BaseModel):
    value_field_name: Optional[str] = None
    key_field_name: Optional[str] = None


class MappingOperation(BaseModel):
    expression: str
    alias: Optional[constr(pattern=r'^\S+$')] = None


class NodeMappingVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    nodeVariable: Optional[str] = None
    externalId: Optional[str] = None


class OfferNodeMappingVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    nodeVariable: Optional[str] = None
    externalId: Optional[str] = None
    isVariableFromTemplate: Optional[bool] = None
    mandatoryFlag: Optional[bool] = None


class ServiceType1(Enum):
    OFFER_STORAGE_WRITE = 'OFFER_STORAGE_WRITE'
    COMMUNICATION_HUB = 'COMMUNICATION_HUB'
    COMMUNICATION_HUB_READ = 'COMMUNICATION_HUB_READ'
    OFFER_STORAGE_READ_BY_CLIENT_ID = 'OFFER_STORAGE_READ_BY_CLIENT_ID'
    OFFER_STORAGE_READ_BY_OFFER_ID = 'OFFER_STORAGE_READ_BY_OFFER_ID'
    POLICY_READ = 'POLICY_READ'


class OutParameterShortInfo(BaseModel):
    parameterName: Optional[str] = None
    parameterId: Optional[str] = None
    isNullValue: Optional[bool] = None


class Output(BaseModel):
    array: Optional[ArrayConfig] = None
    map: Optional[MapConfig] = None


class PartitionType(Enum):
    RANGE = 'RANGE'
    LIST = 'LIST'


class Plugin(BaseModel):
    name: Optional[str] = None


class Position(BaseModel):
    """
    Координаты узла
    """

    x: Optional[float] = None
    """
    Расположение узла по оси X
    """
    y: Optional[float] = None
    """
    Расположение узла по оси Y
    """


class Properties(BaseModel):
    """
    JSON-свойства узла в соответствии с типом узла
    """

    nodeType: str


class Property(BaseModel):
    name: str
    value: Optional[str] = None


class PythonNode(Properties):
    schema_: str = Field(..., alias='schema')
    python_environment_version_id: UUID
    python_code: Optional[str] = None
    execution_options: Optional[ExecutionOptions] = None


class Type7(Enum):
    STRING = 'STRING'
    INT = 'INT'
    DOUBLE = 'DOUBLE'
    LONG = 'LONG'
    BOOLEAN = 'BOOLEAN'


class Qualifier(BaseModel):
    name: str
    type: Type7


class Range(BaseModel):
    lower_bound: Optional[str] = None
    upper_bound: Optional[str] = None
    num_partitions: Optional[int] = None


class Request(BaseModel):
    endpoint: Optional[str] = None
    headers: Optional[str] = None


class Format2(Enum):
    TXT = 'txt'
    JSON = 'json'


class Response(BaseModel):
    charset: Optional[str] = None
    format: Optional[Format2] = None
    field_name: Optional[str] = None
    array: Optional[bool] = None


class RestSourceNode(Properties):
    rest_service_uuid: Optional[UUID] = None
    request: Optional[Request] = None
    response: Optional[Response] = None
    execution_options: Optional[ExecutionOptions] = None


class RulesetProperties(BaseModel):
    rowKey: Optional[str] = None
    applyRule: Optional[bool] = None
    ruleName: Optional[str] = None
    ruleCode: Optional[str] = None
    ruleTypeId: Optional[str] = None
    ruleDescription: Optional[str] = None
    ruleExpression: Optional[str] = None
    functionIds: Optional[List[str]] = None
    ruleWeightFactor: Optional[float] = None


class RulesetVariableProperties(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None


class ScoreValue(BaseModel):
    rowKey: Optional[str] = None
    minValue: Optional[Dict[str, Any]] = None
    maxValue: Optional[Dict[str, Any]] = None
    includeMinValue: Optional[bool] = None
    includeMaxValue: Optional[bool] = None
    value: Optional[Dict[str, Any]] = None
    scoreValue: Optional[float] = None


class ScorecardInputVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    defaultValue: Optional[float] = None
    scoreValues: Optional[List[ScoreValue]] = None


class ScorecardOutputVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    defaultValue: Optional[float] = None


class Protocol2(Enum):
    PLAINTEXT = 'plaintext'
    SSL = 'ssl'


class SerJson(BaseModel):
    fail_on_missing_field: Optional[str] = None
    timestamp_pattern: Optional[str] = None


class Format3(Enum):
    CSV = 'csv'
    JSON = 'json'


class SerKey(BaseModel):
    enabled: Optional[bool] = None
    format: Optional[Format3] = None
    json_: Optional[SerJson] = Field(None, alias='json')
    key_by: Optional[List[str]] = None


class Format4(Enum):
    XML = 'xml'
    JSON = 'json'
    AVRO = 'avro'


class SerValue(BaseModel):
    confluent_url: Optional[str] = None
    confluent_subject: Optional[str] = None
    format: Optional[Format4] = None
    json_: Optional[SerJson] = Field(None, alias='json')
    csv: Optional[Csv] = None
    exclude_key: Optional[bool] = None


class Shape(BaseModel):
    """
    Размеры для отрисовки прямоугольника
    """

    x: Optional[float] = None
    """
    Параметр Х для отрисовки группы узлов
    """
    y: Optional[float] = None
    """
    Параметр Y для отрисовки группы узлов
    """


class SimpleVariableProperties(BaseModel):
    variableName: Optional[str] = None
    variablePath: Optional[str] = None


class SinkSerde(BaseModel):
    value: Optional[SerValue] = None
    key: Optional[SerKey] = None


class Slot(BaseModel):
    name: Optional[str] = None


class SourceSerde(BaseModel):
    value: Optional[DeValue] = None
    key: Optional[DeKey] = None


class StartNodeVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    parameterId: Optional[str] = None


class Store(BaseModel):
    location: str
    password: str


class SubDiagramOutVariableMapping(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    nodeVariable: Optional[str] = None
    externalId: Optional[str] = None
    isHide: Optional[bool] = None


class Subdiagram(Properties):
    parallelism: Optional[int] = None
    subdiagramId: Optional[str] = None
    versionId: Optional[str] = None
    inputVariablesMapping: List[NodeMappingVariable]
    outputVariablesMapping: List[SubDiagramOutVariableMapping]


class Table(BaseModel):
    name: str
    replicated: Optional[bool] = None


class TableWithFilter(BaseModel):
    name: str
    filter: Optional[str] = None


class SearchType(Enum):
    INDEX_SEARCH = 'INDEX_SEARCH'
    LUA_FUNCTION_SEARCH = 'LUA_FUNCTION_SEARCH'


class LuaResultType(Enum):
    SCALAR = 'SCALAR'
    SCALAR_ARRAY = 'SCALAR_ARRAY'
    ROW = 'ROW'
    ROW_ARRAY = 'ROW_ARRAY'


class Predicate(Enum):
    EQUALS = 'EQUALS'
    GREATER_THAN = 'GREATER_THAN'
    GREATER_OR_EQUALS = 'GREATER_OR_EQUALS'
    LESS_THAN = 'LESS_THAN'
    LESS_OR_EQUALS = 'LESS_OR_EQUALS'


class TarantoolReadInputMappingVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    nodeVariable: Optional[DataSourceVariable] = None
    isNullValue: Optional[bool] = None


class DataSourceType1(Enum):
    USER_INPUT = 'USER_INPUT'
    DICTIONARY = 'DICTIONARY'
    DIAGRAM_ELEMENT = 'DIAGRAM_ELEMENT'


class DynamicListType1(Enum):
    RADIO_BUTTON = 'RADIO_BUTTON'
    DROP_DOWN_LIST = 'DROP_DOWN_LIST'


class TemplateMappingVariable(BaseModel):
    rowKey: Optional[str] = None
    id: Optional[str] = None
    displayName: Optional[str] = None
    value: Optional[Dict[str, Any]] = None
    variableName: Optional[str] = None
    primitiveTypeId: Optional[str] = None
    dataSourceType: Optional[DataSourceType1] = None
    dictionaryId: Optional[str] = None
    dynamicListType: Optional[DynamicListType1] = None
    mandatoryFlag: Optional[bool] = None
    minValue: Optional[float] = None
    maxValue: Optional[float] = None
    maxSize: Optional[int] = None


class Time(BaseModel):
    zone: Optional[str] = None


class TimeAttribute(BaseModel):
    field: Optional[str] = None
    format: Optional[str] = None


class Unit(Enum):
    MS = 'ms'
    S = 's'
    M = 'm'
    H = 'h'
    D = 'd'


class TimeInterval(BaseModel):
    value: Optional[int] = None
    unit: Optional[Unit] = None


class UnionNode(Properties):
    complete_schemes_equality: Optional[bool] = None


class VariablePropertiesBase(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None


class VariableViewDto(BaseModel):
    """
    Список входных параметров, доступных для назначения в качестверасчитываемого атрибута или для расчета
    """

    id: Optional[UUID] = Field(None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор переменной
    """
    variableName: constr(max_length=40) = Field(..., examples=['Client'])
    """
    Имя переменной
    """
    typeId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор типа переменной
    """
    dictId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор справочника
    """
    isComplex: bool = Field(..., examples=[False])
    """
    Признак комплексного типа (true)
    """
    isDict: bool = Field(..., examples=[False])
    """
    Признак справочника кастомных типов (true)
    """
    isArray: bool = Field(..., examples=[False])
    """
    Признак массива (true)
    """
    variableRootId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор корневой переменной
    """
    variablePath: Optional[constr(min_length=0, max_length=150)] = Field(
        None, examples=['customer/address']
    )
    """
    Путь переменной в комплексном типе
    """


class Watermark(BaseModel):
    watermark_type: WatermarkType
    wait_duration: Optional[TimeInterval] = None
    time_passing_coefficient: Optional[float] = None


class Write(BaseModel):
    options: Optional[List[Property]] = None


class FilterSign(Enum):
    EQUAL = 'EQUAL'
    NOT_EQUAL = 'NOT_EQUAL'
    GREATER = 'GREATER'
    LESS = 'LESS'
    GREATER_OR_EQUAL = 'GREATER_OR_EQUAL'
    LESS_OR_EQUAL = 'LESS_OR_EQUAL'
    NOT_IN = 'NOT_IN'
    IN_ = 'IN'


class WriteReadVariableProperties(BaseModel):
    variableName: Optional[str] = None
    variablePath: Optional[str] = None


class NodeValidateStateResponseDto(BaseModel):
    timeStamp: AwareDatetime
    """
    Время ошибки
    """
    uuid: Optional[UUID] = Field(
        None, examples=['d8d6ba76-ea3f-4d9b-b7b7-a819ef0f5549']
    )
    """
    uuid присвоенный при работе с объектом
    """
    httpCode: int = Field(..., examples=[200])
    """
    Дублированный http код
    """
    module: str = Field(..., examples=['diagram'])
    """
    Модуль, в котором производилось действие
    """
    operation: Operation = Field(..., examples=['save'])
    """
    Совершаемая операция
    """
    message: Optional[str] = Field(
        None, examples=['Unable to find a model that matches key ModelKey']
    )
    """
    Trace ошибки
    """
    validationPayload: Optional[Dict[str, Any]] = None
    """
    Объект с ошибкой
    """
    validFlag: bool = Field(..., examples=[False])
    """
    Признак корректности узла
    """


class LinkDeletedDto(BaseModel):
    """
    Список линков, которые были удалены
    """

    linkId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор ребра диаграммы
    """
    nextNodeId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор последующего узла
    """


class NodeUpdateLeadToDiagramChangeResultDto(BaseModel):
    addedLinkIds: Optional[List[str]] = None
    deletedLinks: Optional[List[LinkDeletedDto]] = None


class NodeAutoMappingConflictViewDto(BaseModel):
    """
    Список расхождений, содержащий перечень атрибутов с ранее заполненным значением и переменных диаграммы, подходящих для маппинга
    """

    variableId: str = Field(..., examples=['Идентификатор переменной'])
    variableName: str = Field(..., examples=['Имя переменной'])
    currentVariableValue: str = Field(..., examples=['Значение переменной'])
    suggestedVariableValue: str = Field(
        ..., examples=['Предлагаемое значение переменной']
    )


class NodeAutoMappingResponseDto(BaseModel):
    timeStamp: AwareDatetime
    """
    Время ошибки
    """
    uuid: Optional[UUID] = Field(
        None, examples=['d8d6ba76-ea3f-4d9b-b7b7-a819ef0f5549']
    )
    """
    uuid присвоенный при работе с объектом
    """
    httpCode: int = Field(..., examples=[200])
    """
    Дублированный http код
    """
    module: str = Field(..., examples=['diagram'])
    """
    Модуль, в котором производилось действие
    """
    operation: Operation = Field(..., examples=['save'])
    """
    Совершаемая операция
    """
    message: Optional[str] = Field(
        None, examples=['Unable to find a model that matches key ModelKey']
    )
    """
    Trace ошибки
    """
    validationPayload: Optional[Dict[str, Any]] = None
    """
    Объект с ошибкой
    """
    autoMappingConflicts: Optional[List[NodeAutoMappingConflictViewDto]] = None


class LinkMoveDto(BaseModel):
    """
    Объект для изменения таргета ребра диаграммы
    """

    linkId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор ребра диаграммы
    """
    diagramVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор диаграммы
    """
    prevNodeId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор предыдущего узла
    """
    nextNodeId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор последующего узла
    """


class BatchSqlGetDto(BaseModel):
    groupId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор группы атрибутов в формате UUID 4
    """
    sqlSelect: Optional[constr(min_length=0, max_length=4000)] = Field(
        None, examples=['select a from b']
    )
    """
    SQL запрос для выборки данных
    """
    dataProviderUuid: UUID = Field(
        ..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c']
    )
    """
    Уникальный идентификатор источника данных в формате UUID 4
    """
    diagramVersionId: UUID = Field(
        ..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77']
    )
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """
    id: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор в формате UUID 4
    """


class BatchMappingGetDto(BaseModel):
    id: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор маппинга переменных в рамках батча в формате UUID 4
    """
    batchVariableId: UUID = Field(
        ..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c']
    )
    """
    Уникальный идентификатор переменной в рамках батча в формате UUID 4
    """
    groupId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор группы атрибутов в формате UUID 4
    """
    mapping: Optional[constr(min_length=0, max_length=255)] = Field(
        None, examples=['mapping']
    )
    """
    Маппинг элемента запроса на диаграмму
    """
    primitiveTypeId: constr(min_length=0, max_length=36) = Field(..., examples=['1'])
    """
    Уникальный идентификатор примитивного типа
    """
    name: constr(min_length=0, max_length=255) = Field(..., examples=['Имя объекта'])
    """
    Имя для отображения на странице
    """
    isNull: Optional[bool] = Field(None, examples=[True])
    """
    Признак null значения для переменной диаграммы
    """
    diagramVersionId: UUID = Field(
        ..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77']
    )
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """


class BatchMappingKeyUpdateDto(BaseModel):
    batchVariablesId: Optional[UUID] = Field(
        None, examples=['29445f2b-89fa-4268-af3f-1b8160a7679c']
    )
    """
    Уникальный идентификатор переменной из списка батча в формате UUID 4
    """
    parentBatchVariablesId: Optional[UUID] = Field(
        None, examples=['29445f2b-89fa-4268-af3f-1b8160a7679c']
    )
    """
    Уникальный идентификатор верхнеуровневой переменной из списка батча в формате UUID 4
    """
    groupId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор группы атрибутов в формате UUID 4
    """
    id: Optional[UUID] = Field(None, examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор в формате UUID 4
    """


class AdditionalSettingsWithIdDto(BaseModel):
    """
    Список дополнительных настроек
    """

    id: Optional[str] = Field(None, examples=['2dc26a3b-aac0-4d26-8485-0e71e8815732'])
    """
    Идентификатор расширенного параметра
    """
    name: constr(max_length=100) = Field(..., examples=['hbase.client.retries.number'])
    """
    Наименование параметра
    """
    value: constr(max_length=1000) = Field(..., examples=['3'])
    """
    Значение параметра
    """
    secure: Optional[bool] = Field(None, examples=[False])
    """
    Признак конфиденциальности параметра
    """


class InputType1(Enum):
    """
    Способ указания параметров JDBC подключения
    """

    PARAMETERS = 'parameters'
    URL = 'url'


class DataProviderSettingsFullViewDto(BaseModel):
    """
    Список настроек подключения источника данных
    """

    environmentSettingsId: UUID = Field(
        ..., examples=['a0bb1b74-bb05-42a4-9d7d-15b3ae172180']
    )
    """
    Идентификатор внешнего сервиса в формате UUID 4
    """
    serverName: constr(min_length=0, max_length=200) = Field(
        ..., examples=['example.com']
    )
    """
    Hostname источника данных. Обязателен для jdbc, tarantool
    """
    hosts: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['rs0/127.0.0.1:51519,127.0.0.1:51518']
    )
    """
    Список хостов кластера Mongo DB или ClickHouse. В случае MongoDB обязательно указать Replica Set: rs0/<hosts>
    """
    port: Optional[constr(min_length=0, max_length=32)] = Field(None, examples=['5432'])
    """
    Порт для соединения с источником данных. Обязателен для jdbc, tarantool
    """
    username: Optional[constr(min_length=0, max_length=32)] = Field(
        None, examples=['login']
    )
    """
    Логин для соединения с источником данных
    """
    password: Optional[constr(min_length=0, max_length=32)] = Field(
        None, examples=['password']
    )
    """
    Логин для соединения с источником данных
    """
    scheme: Optional[constr(min_length=0, max_length=50)] = Field(
        None, examples=['test_scheme']
    )
    """
    Схема базы данных, которая будет использоваться в источнике данных
    """
    additionalProperties: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['fetchSize=1000&statement_timeout=90000']
    )
    """
    Дополнительные параметры подключения в формате соответствующей СУБД. Имя БД должно быть указано в другом параметре. В случае Oracle здесь указывается service name и, возможно, параметры, в обоих случаях без слэша.
    """
    zookeeperQuorum: Optional[str] = Field(None, examples=['localhost:2181'])
    """
    Zookeeper Quorum. Поле обязательно для HBase
    """
    zookeeperZnodeParent: Optional[str] = Field(None, examples=['/hbase'])
    """
    Zookeeper Znode Parent для источника HBase
    """
    additionalSettings: Optional[List[AdditionalSettingsWithIdDto]] = None
    token: Optional[str] = Field(
        None, examples=['4b7b0fbf-faf2-4545-84b7-3f8f8da5a8ce']
    )
    """
    Токен для доступа к данным. На текущий момент используется только для TDG
    """
    database: Optional[constr(min_length=0, max_length=50)] = Field(
        None, examples=['master']
    )
    """
    Имя базы данных в случае PostgreSQL, SQL Server, Mongo DB; SID в случае Oracle
    """
    inputType: Optional[InputType1] = Field(None, examples=['url'])
    """
    Способ указания параметров JDBC подключения
    """
    url: Optional[str] = Field(None, examples=['jdbc:postgresql://localhost/test'])
    """
    JDBC URL
    """
    sourceSettingsId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор настроек источника данных в формате UUID 4
    """


class SourceType(Enum):
    """
    Тип источника данных
    """

    ORACLE = 'ORACLE'
    POSTGRES = 'POSTGRES'
    MSSQL = 'MSSQL'
    TARANTOOL = 'TARANTOOL'
    TARANTOOL_CARTRIDGE_CLUSTER = 'TARANTOOL_CARTRIDGE_CLUSTER'
    TARANTOOL_DATAGRID_CLUSTER = 'TARANTOOL_DATAGRID_CLUSTER'
    HBASE = 'HBASE'
    MONGO_DB = 'MONGO_DB'
    CLICK_HOUSE = 'CLICK_HOUSE'


class ConnectionType(Enum):
    """
    Тип соединения
    """

    JDBC = 'JDBC'
    NO_SQL = 'NO_SQL'


class DataProviderUpdateDto(BaseModel):
    """
    Объект для обновления полей источника данных
    """

    sourceName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Витрина данных']
    )
    """
    Имя источника данных
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Операционная БД']
    )
    """
    Описание источника данных
    """
    sourceType: SourceType = Field(..., examples=['ORACLE'])
    """
    Тип источника данных
    """
    connectionType: ConnectionType = Field(..., examples=['JDBC'])
    """
    Тип соединения
    """
    settings: Optional[List[DataProviderSettingsFullViewDto]] = None


class CustomAttributeDictionaryValueUpdate(BaseModel):
    """
    Список значений справочника
    """

    dictValue: Dict[str, Any] = Field(
        ..., examples=['Отображаемое наименование значения справочника']
    )
    """
    Значение справочника
    """
    dictValueDisplayName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Отображаемое наименование значения справочника']
    )
    """
    Отображаемое наименование значения справочникаа
    """
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор значения справочника в формате UUID 4
    """


class AttributeCreate(BaseModel):
    """
    Лист атрибутов для инициализации при создании пользовательского типа
    """

    attributeName: constr(min_length=1, max_length=100) = Field(..., examples=['name'])
    """
    Имя атрибута
    """
    complexFlag: bool = Field(..., examples=[True])
    """
    Флаг отображающий тип данных, к которым относится атрибут
    """
    arrayFlag: bool = Field(..., examples=[False])
    """
    Флаг отображающий тип объекта данных, к которым относится атрибут
    """
    primitiveTypeId: Optional[str] = Field(None, examples=['1'])
    """
    Уникальный идентификатор примитивного типа. Может принимать null значения
    """
    complexTypeVersionId: Optional[UUID] = Field(
        None, examples=['a190d64d-ef84-4d17-b05b-096f4b82365a']
    )
    """
    Уникальный идентификатор комплексного типа, на который ссылается атрибут в формате UUID 4
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Имя клиента']
    )
    """
    Описание атрибута
    """
    parentId: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Уникальный идентификатор комплексного типа, от которого произведен атрибут, в формате UUID 4
    """


class ComplexTypeUpdate(BaseModel):
    """
    Объект для обновления полей сложного типа
    """

    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    displayName: constr(max_length=100) = Field(..., examples=['Имя объекта'])
    """
    Имя для отображения на странице
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None,
        examples=[
            'Объект пользователя, который включает в себя поля FirstName, SecondName, Phone...'
        ],
    )
    """
    Описание объекта комплексного типа
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии в формате UUID 4
    """
    attributes: Optional[List[AttributeCreate]] = None


class AttributeUpdate(BaseModel):
    attributeId: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Уникальный идентификатор в формате UUID 4
    """
    attributeName: constr(min_length=1, max_length=100) = Field(..., examples=['name'])
    """
    Имя атрибута
    """
    complexFlag: bool = Field(..., examples=[True])
    """
    Флаг отображающий тип данных, к которым относится атрибут
    """
    arrayFlag: bool = Field(..., examples=[False])
    """
    Флаг отображающий тип объекта данных, к которым относится атрибут
    """
    primitiveTypeId: Optional[str] = Field(None, examples=['1'])
    """
    Уникальный идентификатор примитивного типа. Может принимать null значения
    """
    complexTypeVersionId: Optional[UUID] = Field(
        None, examples=['a190d64d-ef84-4d17-b05b-096f4b82365a']
    )
    """
    Уникальный идентификатор комплексного типа, на который ссылается атрибут в формате UUID 4
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Имя клиента']
    )
    """
    Описание атрибута
    """
    parentId: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Уникальный идентификатор комплексного типа, от которого произведен атрибут, в формате UUID 4
    """


class DataSourceType2(Enum):
    """
    Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)
    """

    USER_INPUT = 'USER_INPUT'
    DICTIONARY = 'DICTIONARY'
    DIAGRAM_ELEMENT = 'DIAGRAM_ELEMENT'


class DynamicListType2(Enum):
    """
    Тип отображения динамического списка
    """

    RADIO_BUTTON = 'RADIO_BUTTON'
    DROP_DOWN_LIST = 'DROP_DOWN_LIST'


class CommunicationVariableFullViewDto(BaseModel):
    """
    Список переменных канала коммуникации
    """

    variableName: str = Field(..., examples=['имя_переменной'])
    """
    Имя переменной
    """
    scriptVariableName: str = Field(..., examples=['имя_переменной_скрипта'])
    """
    Имя переменной скрипта
    """
    primitiveTypeId: Optional[str] = Field(None, examples=['1'])
    """
    Id простого типа переменной
    """
    complexTypeVersionId: Optional[UUID] = Field(
        None, examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id комплексного типа переменной
    """
    arrayFlag: bool = Field(..., examples=[False])
    """
    Является ли переменная массивом
    """
    dataSourceType: DataSourceType2
    """
    Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)
    """
    minValue: Optional[float] = Field(None, examples=[5.0])
    """
    Минимальное значение переменной
    """
    maxValue: Optional[float] = Field(None, examples=[15.0])
    """
    Максимальное значение переменной
    """
    maxSize: Optional[int] = Field(None, examples=[100])
    """
    Максимальная длина переменной
    """
    dictionaryId: Optional[UUID] = Field(
        None, examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id справочника, в котором находятся допустимые значения переменной
    """
    dynamicListType: Optional[DynamicListType2] = None
    """
    Тип отображения динамического списка
    """
    mandatoryFlag: bool = Field(..., examples=[False])
    """
    Является ли переменная обязательной
    """
    id: UUID = Field(..., examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d'])
    """
    Id переменной
    """


class CommunicationChannelUpdateUserVersionDto(BaseModel):
    """
    Объект для обновления канала коммуникации
    """

    versionName: Optional[constr(min_length=1, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """


class CatalogUpdate(BaseModel):
    """
    Объект для перемещения элемента из каталога в каталог
    """

    catalogName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Каталог №1']
    )
    """
    Имя Каталога
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """


class CatalogMove(BaseModel):
    """
    Объект для перемещения элемента из каталога в каталог
    """

    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    elementId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор элемента в формате UUID 4
    """


class AggregateFunction1(Enum):
    """
    Функция агрегата
    """

    AGG_AVERAGE = 'AggAverage'
    AGG_COUNT = 'AggCount'
    AGG_COUNT_DISTINCT = 'AggCountDistinct'
    AGG_COUNT_NON_NULL = 'AggCountNonNull'
    AGG_FIRST_VALUE = 'AggFirstValue'
    AGG_LAST_VALUE = 'AggLastValue'
    AGG_MAX = 'AggMax'
    AGG_MIN = 'AggMin'
    AGG_MODE = 'AggMode'
    AGG_SUM = 'AggSum'
    AGG_STD = 'AggStd'


class AggregateJson(BaseModel):
    """
    Json агрегата
    """

    aggregateName: constr(max_length=100) = Field(..., examples=['Amount_client_24_h'])
    """
    Техническое наименование агрегата
    """
    aggregateVariableType: constr(max_length=2) = Field(..., examples=['1'])
    """
    Тип переменной агрегата
    """
    aggregateFunction: AggregateFunction1 = Field(..., examples=['aggSum'])
    """
    Функция агрегата
    """
    aggregateDescription: constr(max_length=1000) = Field(
        ..., examples=['Сумма операций клиента за 24 часа']
    )
    """
    Описание агрегата
    """
    groupingElement: constr(max_length=100) = Field(..., examples=['Client_id'])
    """
    Группирующий элемент
    """


class AggregateUpdate(BaseModel):
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    aggregateDescription: Optional[constr(max_length=1000)] = Field(
        None, examples=['описание агрегата']
    )
    """
    Описание агрегата (бизнес наименование)
    """
    aggregateJson: AggregateJson


class ValidationType(Enum):
    """
    Тип валидации sql-запроса. По этому полю выбирается нужная стратегия извлечения данных, необходимых для процесса валидациии.
    """

    NODE = 'NODE'
    BATCH = 'BATCH'


class SqlValidationApiDto(BaseModel):
    validationType: ValidationType = Field(..., examples=['NODE'])
    """
    Тип валидации sql-запроса. По этому полю выбирается нужная стратегия извлечения данных, необходимых для процесса валидациии.
    """
    dataProviderUuid: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор источника данных в формате UUID 4
    """
    sqlSelectQuery: str = Field(..., examples=['select column_name from table_name'])
    """
    SQL-запрос для проверки
    """
    nodeId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор валидируемого узла в формате UUID 4. Необходим при типе валидации NODE
    """
    diagramVersionId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор версии диаграммы в формате UUID 4. Необходим при типе валидации BATCH
    """


class JsonGenerationVariableDto(BaseModel):
    """
    Параметры, используемые в выражении
    """

    variableName: str
    """
    Имя переменной
    """
    variablePath: Optional[str] = None
    """
    Путь до переменной
    """
    typeId: str
    """
    Идентификатор типа переменной
    """
    isArray: Optional[bool] = None
    """
    Признак массива
    """
    isComplex: Optional[bool] = None
    """
    Признак сложного типа
    """
    isDict: Optional[bool] = None
    """
    Признак словаря
    """
    variableRootId: Optional[str] = None
    """
    Исходный комплексный тип
    """


class Status(Enum):
    """
    Статус валидации
    """

    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


class JsonGenerationResultValidationDto(BaseModel):
    status: Optional[Status] = None
    """
    Статус валидации
    """
    result: Optional[str] = None
    """
    Результат валидации
    """


class UserFunctionShortView(BaseModel):
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    jarFunctionName: str = Field(..., examples=['myFunction(java.lang.Integer)'])
    """
    Имя пользовательской функции в jar-файле
    """
    functionClass: str = Field(..., examples=['com.package.SomeClass'])
    """
    Полный путь до класса, в котором содержится функция в jar-файле
    """


class UserJarFunctionsDto(BaseModel):
    jarId: Optional[str] = None
    functions: Optional[List[UserFunctionShortView]] = None


class UserFunctionUploadView(BaseModel):
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    jarFunctionName: str = Field(..., examples=['myFunction(java.lang.Integer)'])
    """
    Имя пользовательской функции в jar-файле
    """
    functionClass: str = Field(..., examples=['com.package.SomeClass'])
    """
    Полный путь до класса, в котором содержится функция в jar-файле
    """
    resultType: Optional[str] = Field(None, examples=['Дробный'])
    """
    Тип возвращаемого пользовательской функцией значения
    """
    description: Optional[str] = Field(None, examples=['Описание'])
    """
    Описание пользовательской функции
    """


class StartTestsDto(BaseModel):
    startedTests: Optional[List[str]] = None
    """
    Идентификаторы запущенных
    """
    failedToStartTests: Optional[Dict[str, str]] = None
    """
    Тесты, которые не удалось запустить. Ключ - id теста, значение - текст причины
    """


class Locale(Enum):
    EN = 'en'
    RU = 'ru'


class EmptyTestCreate(BaseModel):
    locale: Locale
    diagramId: str


class EmptyTestDto(BaseModel):
    testId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор теста в формате UUID 4
    """
    testName: str = Field(..., examples=['test_01'])
    """
    Имя теста
    """
    timeout: Optional[int] = Field(None, examples=[10])
    """
    Таймаут в секундах
    """


class Protocol3(Enum):
    """
    Протокол доступа
    """

    REST = 'REST'
    SOAP = 'SOAP'


class ExternalServiceHeaderViewWithoutIdDto(BaseModel):
    """
    Список заголовков внешнего сервиса
    """

    headerName: constr(min_length=0, max_length=50) = Field(..., examples=['Cookie'])
    """
    Имя заголовка
    """
    headerValue: str = Field(..., examples=['Value'])
    """
    Значение заголовка
    """


class ServiceType2(Enum):
    """
    Тип обмена
    """

    HTTP = 'HTTP'
    HTTPS = 'HTTPS'


class ExternalServiceSettingsViewWithoutIdDto(BaseModel):
    """
    Список настроек подключения внешнего сервиса
    """

    environmentSettingsId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор внешнего сервиса в формате UUID 4
    """
    host: constr(min_length=0, max_length=50) = Field(..., examples=['192.168.0.1'])
    """
    Имя хоста
    """
    serviceType: ServiceType2 = Field(..., examples=['HTTPS'])
    """
    Тип обмена
    """
    endpoint: constr(min_length=0, max_length=50) = Field(
        ..., examples=['diagram/node/{nodeId}']
    )
    """
    Endpoint внешнего сервиса
    """
    port: conint(le=65535) = Field(..., examples=[8080])
    """
    Порт внешнего сервиса
    """
    secondAttemptsCnt: Optional[conint(le=10)] = Field(None, examples=[3])
    """
    Количество повторных попыток отправки сообщения
    """
    transactionsPerSecond: Optional[int] = Field(None, examples=[1])
    """
    Частота транзакций
    """
    interval: Optional[int] = Field(None, examples=[5])
    """
    Интервал между повторными попытками отправки в секундах
    """
    timeout: Optional[int] = Field(None, examples=[5])
    """
    Максимальное время ожидания ответа в секундах
    """
    keycloakClientId: Optional[constr(max_length=50)] = Field(
        None, examples=['decision.frontend']
    )
    """
    Keycloak client
    """
    keycloakClientSecret: Optional[constr(max_length=100)] = Field(
        None, examples=['secret']
    )
    """
    Keycloak Client Secret
    """
    keycloakUser: Optional[constr(max_length=32)] = Field(None, examples=['userName'])
    """
    Keycloak User
    """
    keycloakPassword: Optional[constr(max_length=100)] = Field(
        None, examples=['password']
    )
    """
    Keycloak password
    """
    keycloakGrantType: Optional[KeycloakGrantType] = None
    """
    Тип GrantType
    """
    keycloakServer: Optional[constr(max_length=200)] = Field(
        None, examples=['https://auth.k8s.datasapience.ru/auth']
    )
    """
    Сервер Keycloak
    """
    keycloakRealm: Optional[constr(max_length=50)] = Field(None, examples=['dev'])
    """
    Realm Keycloak
    """
    isKeyCloakAuth: Optional[bool] = Field(None, examples=[False])
    """
    Использовать авторизацию при помощи Keycloak
    """


class VariableType2(Enum):
    """
    Тип параметра (входной, выходной, рассчитываемый)
    """

    IN_ = 'IN'
    OUT = 'OUT'
    CALCULATED = 'CALCULATED'
    ERROR = 'ERROR'


class ExternalServiceVariableViewWithoutIdDto(BaseModel):
    """
    Список переменных внешнего сервиса
    """

    variableName: str = Field(..., examples=['имя_переменной'])
    """
    Имя переменной
    """
    primitiveTypeId: Optional[str] = Field(None, examples=['1'])
    """
    Id простого типа переменной
    """
    complexTypeVersionId: Optional[UUID] = Field(
        None, examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id комплексного типа переменной
    """
    variableType: Optional[VariableType2] = None
    """
    Тип параметра (входной, выходной, рассчитываемый)
    """
    isArray: bool = Field(..., examples=[False])
    """
    Является ли переменная массивом
    """
    isComplex: bool = Field(..., examples=[False])
    """
    Является ли переменная комплексным типом
    """
    sourcePath: Optional[str] = Field(None, examples=['/'])
    """
    Путь к значению переменной в структуре ответа сервиса
    """
    expression: Optional[str] = Field(None, examples=['ln(e)'])
    """
    Выражение для рассчета переменной
    """
    functionIds: Optional[List[str]] = None
    childVariables: Optional[List[ExternalServiceVariableViewWithoutIdDto]] = None


class ExternalServiceCreateUserVersionDto(BaseModel):
    isAvailableInProperties: Optional[bool] = Field(None, examples=[True])
    """
    Флаг того, что характеристики ВС будут доступны в __PROPERTIES__
    """
    batchFlag: Optional[bool] = Field(None, examples=[False])
    """
    Признак пакетного взаимодействия
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Внешний сервис данных']
    )
    """
    Описание внешнего сервиса
    """
    fileFormat: Optional[FileFormat] = Field(None, examples=['JSON'])
    """
    Формат сообщения
    """
    method: Optional[Method] = Field(None, examples=['GET'])
    """
    Используемый метод взаимодействия
    """
    protocol: Protocol3 = Field(..., examples=['REST'])
    """
    Протокол доступа
    """
    syncType: SyncType = Field(..., examples=['SYNC'])
    """
    Тип взаимодействия
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    body: Optional[str] = Field(None, examples=['{request_id: {requestid}}'])
    """
    Тело запроса
    """
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """
    versionName: Optional[constr(min_length=1, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    serviceId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор внешнего сервиса в формате UUID 4
    """
    serviceSettings: Optional[List[ExternalServiceSettingsFullViewDto]] = None
    headers: Optional[List[ExternalServiceHeaderViewWithoutIdDto]] = None
    variables: Optional[List[ExternalServiceVariableViewWithoutIdDto]] = None
    id: Optional[str] = None


class VariableType3(Enum):
    """
    Тип параметра (входной, выходной)
    """

    IN_ = 'IN'
    OUT = 'OUT'


class ScriptVariableViewWithoutVersionIdDto(BaseModel):
    """
    Список переменных скрипта
    """

    variableName: str = Field(..., examples=['имя_переменной'])
    """
    Имя переменной
    """
    primitiveTypeId: Optional[int] = Field(None, examples=[1])
    """
    Id простого типа переменной
    """
    complexTypeVersionId: Optional[UUID] = Field(
        None, examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id комплексного типа переменной
    """
    variableType: VariableType3
    """
    Тип параметра (входной, выходной)
    """
    arrayFlag: bool = Field(..., examples=[False])
    """
    Является ли переменная массивом
    """


class PythonValidate(BaseModel):
    """
    Объект для валидации
    """

    variables: Optional[List[ScriptVariableFullView]] = None
    scriptText: str = Field(..., examples=['Текст скрипта'])
    """
    Текст скрипта
    """


class PythonCreateUserVersion(BaseModel):
    scriptText: str = Field(..., examples=['Текст скрипта'])
    """
    Текст скрипта
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    description: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание скрипта']
    )
    """
    Описание скрипта
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    variables: Optional[List[ScriptVariableViewWithoutVersionIdDto]] = None
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """
    versionName: Optional[constr(min_length=1, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    pythonEnvironmentVersionId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор версии окружения python в формате UUID
    """
    scriptId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор скрипта в формате UUID
    """


class GroovyCreate(BaseModel):
    scriptText: str = Field(..., examples=['Текст скрипта'])
    """
    Текст скрипта
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    description: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание скрипта']
    )
    """
    Описание скрипта
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    variables: Optional[List[ScriptVariableViewWithoutVersionIdDto]] = None


class GroovyValidate(BaseModel):
    """
    Объект для валидации
    """

    variables: Optional[List[ScriptVariableFullView]] = None
    scriptText: str = Field(..., examples=['Текст скрипта'])
    """
    Текст скрипта
    """


class GroovyCreateUserVersion(BaseModel):
    scriptText: str = Field(..., examples=['Текст скрипта'])
    """
    Текст скрипта
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    description: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание скрипта']
    )
    """
    Описание скрипта
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    variables: Optional[List[ScriptVariableViewWithoutVersionIdDto]] = None
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """
    versionName: Optional[constr(min_length=1, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    scriptId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор скрипта в формате UUID
    """


class PythonVersionFullViewDto(BaseModel):
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор версии python в формате UUID
    """
    versionName: constr(min_length=1, max_length=100) = Field(
        ..., examples=['Python 3.6']
    )
    """
    Имя версии python
    """
    image: constr(min_length=1, max_length=200) = Field(
        ...,
        examples=['harbor.k8s.datasapience.ru/datasapience-registry/st-di/udf-server'],
    )
    """
    Адрес образа python
    """


class PythonEnvironmentSettingsWithoutIdDto(BaseModel):
    """
    Список настроек окружения питона по окружению
    """

    limitsCpu: float = Field(..., examples=[0.1])
    """
    Верхняя граница количество ядер
    """
    requestsCpu: float = Field(..., examples=[0.1])
    """
    Необходимое количество ядер
    """
    limitsMemory: int = Field(..., examples=[1000])
    """
    Верхняя граница количество памяти
    """
    requestsMemory: int = Field(..., examples=[500])
    """
    Необходимое количество ядер
    """
    environmentId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор окружения в формате UUID 4
    """


class RuleTypeCreateDto(BaseModel):
    """
    Объект для создания нового типа правила
    """

    typeName: constr(max_length=100) = Field(..., examples=['Name object'])
    """
    Системное имя в UTF-8
    """
    displayName: constr(max_length=100) = Field(..., examples=['Имя объекта'])
    """
    Имя для отображения на странице
    """


class RestSourceSettingsViewWithoutIdDto(BaseModel):
    """
    Список настроек подключения внешнего сервиса
    """

    environmentId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор настроек окружения в формате UUID 4
    """
    host: constr(min_length=0, max_length=50) = Field(..., examples=['192.168.0.1'])
    """
    Имя хоста
    """
    port: conint(le=65535) = Field(..., examples=[8080])
    """
    Порт внешнего сервиса
    """
    protocol: Protocol1


class OfferVariableWithoutIdDto(BaseModel):
    """
    Список переменных шаблона предложения
    """

    variableName: str = Field(..., examples=['имя_переменной'])
    """
    Имя переменной
    """
    scriptVariableName: str = Field(..., examples=['имя_переменной_скрипта'])
    """
    Имя переменной скрипта
    """
    primitiveTypeId: Optional[str] = Field(None, examples=['1'])
    """
    Id простого типа переменной
    """
    complexTypeVersionId: Optional[UUID] = Field(
        None, examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id комплексного типа переменной
    """
    arrayFlag: bool = Field(..., examples=[False])
    """
    Является ли переменная массивом
    """
    dataSourceType: DataSourceType2
    """
    Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)
    """
    minValue: Optional[float] = Field(None, examples=[5.0])
    """
    Минимальное значение переменной
    """
    maxValue: Optional[float] = Field(None, examples=[15.0])
    """
    Максимальное значение переменной
    """
    maxSize: Optional[int] = Field(None, examples=[100])
    """
    Максимальная длина переменной
    """
    dictionaryId: Optional[UUID] = Field(
        None, examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id справочника, в котором находятся допустимые значения переменной
    """
    dynamicListType: Optional[DynamicListType2] = None
    """
    Тип отображения динамического списка
    """
    mandatoryFlag: bool = Field(..., examples=[False])
    """
    Является ли переменная обязательной
    """


class OfferCreateUserVersionDto(BaseModel):
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    scriptVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор версии скрипта, связанного с шаблоном предложения в формате UUID 4
    """
    scriptName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Код создания предложения Автокредит']
    )
    """
    Имя скрипта, связанного с шаблоном предложения в формате UUID 4
    """
    scriptId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор скрипта, связанного с шаблоном предложения в формате UUID 4
    """
    offerComplexTypeVersionId: UUID = Field(
        ..., examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id комплексного типа предложения
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор шаблона предложения в формате UUID 4
    """
    versionName: Optional[constr(min_length=1, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """
    offerVariables: Optional[List[OfferVariableWithoutIdDto]] = None


class ObjectType(Enum):
    """
    Тип объекта
    """

    DEPLOY = 'DEPLOY'
    DIAGRAM = 'DIAGRAM'
    AGGREGATE = 'AGGREGATE'
    CUSTOM_CODE = 'CUSTOM_CODE'
    COMPLEX_TYPE = 'COMPLEX_TYPE'
    SERVICE = 'SERVICE'
    REST_SOURCE = 'REST_SOURCE'
    DATA_PROVIDER = 'DATA_PROVIDER'
    CUSTOM_ATTRIBUTE_DICTIONARY = 'CUSTOM_ATTRIBUTE_DICTIONARY'
    COMMUNICATION_CHANNEL = 'COMMUNICATION_CHANNEL'
    OFFER = 'OFFER'
    USER_FUNCTION = 'USER_FUNCTION'
    DATA_PROVIDER_RELATION = 'DATA_PROVIDER_RELATION'
    CATALOG = 'CATALOG'
    KAFKA = 'KAFKA'
    PYTHON_ENVIRONMENT = 'PYTHON_ENVIRONMENT'
    PYTHON_ENVIRONMENT_RELATION = 'PYTHON_ENVIRONMENT_RELATION'
    DIAGRAM_RELATION = 'DIAGRAM_RELATION'
    CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS = 'CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS'
    OFFER_RELATION = 'OFFER_RELATION'
    SERVICE_RELATION = 'SERVICE_RELATION'
    REST_SOURCE_RELATION = 'REST_SOURCE_RELATION'
    CUSTOM_CODE_RELATION = 'CUSTOM_CODE_RELATION'
    COMMUNICATION_RELATION = 'COMMUNICATION_RELATION'
    AGGREGATE_RELATION = 'AGGREGATE_RELATION'
    MESSAGE_BROKER = 'MESSAGE_BROKER'
    LOCKING = 'LOCKING'


class ObjectVersionType(Enum):
    """
    Тип версии объекта
    """

    TEMP = 'TEMP'
    DEPLOYED = 'DEPLOYED'
    LATEST = 'LATEST'
    USER_LOCAL = 'USER_LOCAL'
    USER_TEMP = 'USER_TEMP'
    USER_GLOBAL = 'USER_GLOBAL'
    TEST_DEPLOYED = 'TEST_DEPLOYED'


class ConfirmImportObjectInfo(BaseModel):
    """
    Список предложений
    """

    objectType: ObjectType
    """
    Тип объекта
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Диаграмма расчета платежа']
    )
    """
    Имя объекта
    """
    objectId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор объекта
    """
    objectVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор версии объекта
    """
    objectVersionName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Версия 1.0']
    )
    """
    Уникальный идентификатор версии объекта
    """
    objectVersionType: ObjectVersionType
    """
    Тип версии объекта
    """
    rootObjects: Optional[Dict[str, str]] = None
    isExists: bool = Field(..., examples=[True])
    """
    Признак наличия объекта или версии объекта на контуре импорта
    """


class Status1(Enum):
    """
    Статус операции над объектом
    """

    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    CANCELED = 'CANCELED'


class ImportObjectInfo(BaseModel):
    """
    Список предложений
    """

    objectType: ObjectType
    """
    Тип объекта
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Диаграмма расчета платежа']
    )
    """
    Имя объекта
    """
    objectId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор объекта
    """
    objectVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор версии объекта
    """
    objectVersionName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Версия 1.0']
    )
    """
    Уникальный идентификатор версии объекта
    """
    objectVersionType: ObjectVersionType
    """
    Тип версии объекта
    """
    rootObjects: Optional[Dict[str, str]] = None
    isExists: bool = Field(..., examples=[True])
    """
    Признак наличия объекта или версии объекта на контуре импорта
    """
    isSelected: bool = Field(..., examples=[True])
    """
    Признак выбранного объекта
    """
    status: Status1
    """
    Статус операции над объектом
    """


class SelectedImportStatusDto(BaseModel):
    deploys: Optional[List[ImportObjectInfo]] = None
    diagrams: Optional[List[ImportObjectInfo]] = None
    complexTypes: Optional[List[ImportObjectInfo]] = None
    dictionaries: Optional[List[ImportObjectInfo]] = None
    scripts: Optional[List[ImportObjectInfo]] = None
    externalServices: Optional[List[ImportObjectInfo]] = None
    aggregates: Optional[List[ImportObjectInfo]] = None
    dataProviders: Optional[List[ImportObjectInfo]] = None
    communications: Optional[List[ImportObjectInfo]] = None
    offers: Optional[List[ImportObjectInfo]] = None


class ObjectsType(Enum):
    """
    Тип экспортируемого объекта
    """

    DEPLOY = 'DEPLOY'
    DIAGRAM = 'DIAGRAM'
    AGGREGATE = 'AGGREGATE'
    CUSTOM_CODE = 'CUSTOM_CODE'
    COMPLEX_TYPE = 'COMPLEX_TYPE'
    SERVICE = 'SERVICE'
    REST_SOURCE = 'REST_SOURCE'
    DATA_PROVIDER = 'DATA_PROVIDER'
    CUSTOM_ATTRIBUTE_DICTIONARY = 'CUSTOM_ATTRIBUTE_DICTIONARY'
    COMMUNICATION_CHANNEL = 'COMMUNICATION_CHANNEL'
    OFFER = 'OFFER'
    USER_FUNCTION = 'USER_FUNCTION'
    DATA_PROVIDER_RELATION = 'DATA_PROVIDER_RELATION'
    CATALOG = 'CATALOG'
    KAFKA = 'KAFKA'
    PYTHON_ENVIRONMENT = 'PYTHON_ENVIRONMENT'
    PYTHON_ENVIRONMENT_RELATION = 'PYTHON_ENVIRONMENT_RELATION'
    DIAGRAM_RELATION = 'DIAGRAM_RELATION'
    CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS = 'CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS'
    OFFER_RELATION = 'OFFER_RELATION'
    SERVICE_RELATION = 'SERVICE_RELATION'
    REST_SOURCE_RELATION = 'REST_SOURCE_RELATION'
    CUSTOM_CODE_RELATION = 'CUSTOM_CODE_RELATION'
    COMMUNICATION_RELATION = 'COMMUNICATION_RELATION'
    AGGREGATE_RELATION = 'AGGREGATE_RELATION'
    MESSAGE_BROKER = 'MESSAGE_BROKER'
    LOCKING = 'LOCKING'


class GenerateConfirmExportDtoRequest(BaseModel):
    """
    Объект для запроса списка экспортируемых объектов
    """

    objectsType: ObjectsType
    """
    Тип экспортируемого объекта
    """
    objectIds: List[str]
    isIncludeAllVersions: bool = Field(..., examples=[False])
    """
    Признак экспорта всех версий объекта
    """
    isIncludeDependencies: bool = Field(..., examples=[False])
    """
    Признак включения зависимых объектов
    """


class BasicMigrationObjectInfo(BaseModel):
    """
    Список предложений
    """

    objectType: ObjectType
    """
    Тип объекта
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Диаграмма расчета платежа']
    )
    """
    Имя объекта
    """
    objectId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор объекта
    """
    objectVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор версии объекта
    """
    objectVersionName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Версия 1.0']
    )
    """
    Уникальный идентификатор версии объекта
    """
    objectVersionType: ObjectVersionType
    """
    Тип версии объекта
    """
    rootObjects: Optional[Dict[str, str]] = None


class ConfirmExportDto(BaseModel):
    deploys: Optional[List[BasicMigrationObjectInfo]] = None
    diagrams: Optional[List[BasicMigrationObjectInfo]] = None
    complexTypes: Optional[List[BasicMigrationObjectInfo]] = None
    dictionaries: Optional[List[BasicMigrationObjectInfo]] = None
    scripts: Optional[List[BasicMigrationObjectInfo]] = None
    externalServices: Optional[List[BasicMigrationObjectInfo]] = None
    aggregates: Optional[List[BasicMigrationObjectInfo]] = None
    dataProviders: Optional[List[BasicMigrationObjectInfo]] = None
    communications: Optional[List[BasicMigrationObjectInfo]] = None
    offers: Optional[List[BasicMigrationObjectInfo]] = None


class ExportObjectInfo(BaseModel):
    """
    Список предложений
    """

    objectType: ObjectType
    """
    Тип объекта
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Диаграмма расчета платежа']
    )
    """
    Имя объекта
    """
    objectId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор объекта
    """
    objectVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор версии объекта
    """
    objectVersionName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Версия 1.0']
    )
    """
    Уникальный идентификатор версии объекта
    """
    objectVersionType: ObjectVersionType
    """
    Тип версии объекта
    """
    rootObjects: Optional[Dict[str, str]] = None
    isSelected: bool = Field(..., examples=[True])
    """
    Признак выбранного объекта
    """
    status: Status1
    """
    Статус операции над объектом
    """


class ExportStatusDto(BaseModel):
    deploys: Optional[List[ExportObjectInfo]] = None
    diagrams: Optional[List[ExportObjectInfo]] = None
    complexTypes: Optional[List[ExportObjectInfo]] = None
    dictionaries: Optional[List[ExportObjectInfo]] = None
    scripts: Optional[List[ExportObjectInfo]] = None
    externalServices: Optional[List[ExportObjectInfo]] = None
    aggregates: Optional[List[ExportObjectInfo]] = None
    dataProviders: Optional[List[ExportObjectInfo]] = None
    communications: Optional[List[ExportObjectInfo]] = None
    offers: Optional[List[ExportObjectInfo]] = None


class ExportResponseDto(BaseModel):
    exportStatus: Optional[ExportStatusDto] = None
    totalNumberOfObjects: Optional[int] = None
    numberOfSelectedObjects: Optional[int] = None
    numberOfExportedObjects: Optional[int] = None
    fileName: Optional[str] = None


class LockingDtoShortView(BaseModel):
    timeStamp: AwareDatetime
    """
    Время ошибки
    """
    uuid: Optional[UUID] = Field(
        None, examples=['d8d6ba76-ea3f-4d9b-b7b7-a819ef0f5549']
    )
    """
    uuid присвоенный при работе с объектом
    """
    httpCode: int = Field(..., examples=[200])
    """
    Дублированный http код
    """
    module: str = Field(..., examples=['diagram'])
    """
    Модуль, в котором производилось действие
    """
    operation: Operation = Field(..., examples=['save'])
    """
    Совершаемая операция
    """
    message: Optional[str] = Field(
        None, examples=['Unable to find a model that matches key ModelKey']
    )
    """
    Trace ошибки
    """
    validationPayload: Optional[Dict[str, Any]] = None
    """
    Объект с ошибкой
    """
    objectName: constr(max_length=100) = Field(..., examples=['Тестовая диаграмма'])
    """
    Имя объекта
    """
    createByUser: Optional[str] = None


class ObjectType4(Enum):
    DEPLOY = 'DEPLOY'
    DIAGRAM = 'DIAGRAM'
    AGGREGATE = 'AGGREGATE'
    CUSTOM_CODE = 'CUSTOM_CODE'
    COMPLEX_TYPE = 'COMPLEX_TYPE'
    SERVICE = 'SERVICE'
    REST_SOURCE = 'REST_SOURCE'
    DATA_PROVIDER = 'DATA_PROVIDER'
    CUSTOM_ATTRIBUTE_DICTIONARY = 'CUSTOM_ATTRIBUTE_DICTIONARY'
    COMMUNICATION_CHANNEL = 'COMMUNICATION_CHANNEL'
    OFFER = 'OFFER'
    USER_FUNCTION = 'USER_FUNCTION'
    DATA_PROVIDER_RELATION = 'DATA_PROVIDER_RELATION'
    CATALOG = 'CATALOG'
    KAFKA = 'KAFKA'
    PYTHON_ENVIRONMENT = 'PYTHON_ENVIRONMENT'
    PYTHON_ENVIRONMENT_RELATION = 'PYTHON_ENVIRONMENT_RELATION'
    DIAGRAM_RELATION = 'DIAGRAM_RELATION'
    CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS = 'CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS'
    OFFER_RELATION = 'OFFER_RELATION'
    SERVICE_RELATION = 'SERVICE_RELATION'
    REST_SOURCE_RELATION = 'REST_SOURCE_RELATION'
    CUSTOM_CODE_RELATION = 'CUSTOM_CODE_RELATION'
    COMMUNICATION_RELATION = 'COMMUNICATION_RELATION'
    AGGREGATE_RELATION = 'AGGREGATE_RELATION'
    MESSAGE_BROKER = 'MESSAGE_BROKER'
    LOCKING = 'LOCKING'


class LockedObjectEntity(BaseModel):
    objectType: Optional[ObjectType4] = None
    objectId: Optional[str] = None


class KafkaAdditionalSettingsWithoutIdDto(BaseModel):
    """
    Список дополнительных настроек Kafka
    """

    propertyName: constr(max_length=100) = Field(
        ..., examples=['kafka.bootstrap.servers']
    )
    """
    Наименование параметра
    """
    propertyValue: constr(max_length=1000) = Field(
        ..., examples=['kafka-bootstrap.server.ru']
    )
    """
    Значение параметра
    """
    propertySecure: Optional[bool] = Field(None, examples=[False])
    """
    Признак конфиденциальности параметра
    """


class KafkaSettingsWithoutIdDto(BaseModel):
    """
    Список настроек Kafka по окружению
    """

    bootstrapServers: Optional[str] = Field(
        None, examples=['bootstrapServer1:9092,bootstrapServer2:9092']
    )
    """
    bootstrapServers kafka
    """
    environmentId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор окружения в формате UUID 4
    """
    kafkaAdditionalSettings: Optional[List[KafkaAdditionalSettingsWithoutIdDto]] = None


class KafkaEnvironmentCreateDto(BaseModel):
    """
    Параметры Kafka
    """

    kafkaUrl: constr(min_length=0, max_length=100) = Field(
        ..., examples=['http://localhost:29092']
    )
    """
    Url kafka
    """
    kafkaEnvironmentAdditionalSettings: Optional[
        List[KafkaAdditionalSettingsWithoutIdDto]
    ] = None


class DiagramCreateNewVersion(BaseModel):
    """
    Новая диаграмма
    """

    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    diagramId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор диаграммы в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'])
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """
    diagramDescription: Optional[constr(min_length=0, max_length=2000)] = Field(
        None, examples=['Диаграмма обладает функционалом и выполняет...']
    )
    """
    Описание диаграммы
    """
    errorResponseFlag: bool = Field(..., examples=[True])
    """
    Флаг обработки аварийного ответа
    """
    metaInfo: Optional[DiagramMetaInfo] = None


class VersionType(Enum):
    """
    Тип версии
    """

    TEMP = 'TEMP'
    DEPLOYED = 'DEPLOYED'
    LATEST = 'LATEST'
    USER_LOCAL = 'USER_LOCAL'
    USER_TEMP = 'USER_TEMP'
    USER_GLOBAL = 'USER_GLOBAL'
    TEST_DEPLOYED = 'TEST_DEPLOYED'


class LinkViewDto(BaseModel):
    linkId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор ребра диаграммы
    """
    prevNodeId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор предыдущего узла
    """
    nextNodeId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор последующего узла
    """


class DeployType(Enum):
    """
    Тип деплоя
    """

    REALTIME = 'REALTIME'
    MANUAL_BATCH = 'MANUAL_BATCH'
    AUTO_BATCH = 'AUTO_BATCH'


class DeployVariablesFullDto(BaseModel):
    id: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор в формате UUID 4
    """
    name: str = Field(..., examples=['name'])
    """
    Имя переменной
    """
    value: Dict[str, Any] = Field(..., examples=[2])
    """
    Значение переменной
    """
    primitiveTypeId: constr(min_length=0, max_length=36) = Field(..., examples=['1'])
    """
    Уникальный идентификатор примитивного типа
    """
    dictId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор справочника
    """


class DiagramVariableValidationDto(BaseModel):
    """
    Объект для валидации имени переменной
    """

    diagramVersionId: UUID = Field(
        ..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77']
    )
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """
    parameterName: constr(max_length=40) = Field(..., examples=['Client'])
    """
    Имя входного/выходного параметра
    """


class JsonNode(BaseModel):
    """
    JSON содержимое схемы
    """


class SchemaSaveDto(BaseModel):
    """
    Объект для сохранения схемы
    """

    name: str = Field(..., examples=['schema-name'])
    """
    Имя схемы
    """
    version: constr(pattern=r'([0-9]+\.)*[0-9]+') = Field(..., examples=['1'])
    """
    Версия схемы
    """
    schemaJson: JsonNode


class SchemaIdDto(BaseModel):
    id: int = Field(..., examples=[10])
    """
    Уникальный идентификатор схемы
    """


class NodesPasteRequestDto(BaseModel):
    """
    Тело запроса на вставку
    """

    copyId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор слепка
    """
    diagramVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор версии диаграммы, в которую вставляются узлы и линки
    """
    position: Position


class NodesCopyDto(BaseModel):
    """
    Тело запроса с перечнем копируемых узлов и линков
    """

    nodeIds: List[str]
    linkIds: Optional[List[str]] = None
    diagramVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор версии диаграммы, из которой копируются узлы и линки
    """


class LinkCreateDto(BaseModel):
    """
    Объект для создания ребра диаграммы
    """

    linkId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор ребра диаграммы
    """
    diagramVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор диаграммы
    """
    prevNodeId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор предыдущего узла
    """
    nextNodeId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор последующего узла
    """


class DiagramCreateAsNew(BaseModel):
    """
    Новая диаграмма
    """

    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    diagramId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор диаграммы в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'])
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """
    diagramDescription: Optional[constr(min_length=0, max_length=2000)] = Field(
        None, examples=['Диаграмма обладает функционалом и выполняет...']
    )
    """
    Описание диаграммы
    """
    errorResponseFlag: bool = Field(..., examples=[True])
    """
    Флаг обработки аварийного ответа
    """
    metaInfo: Optional[DiagramMetaInfo] = None
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """


class DiagramCreateAsLatest(BaseModel):
    """
    Новая диаграмма
    """

    diagramId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор диаграммы в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'])
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """


class DiagramCreateUserVersion(BaseModel):
    """
    Пользовательская версия диаграммы
    """

    diagramId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор диаграммы в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'])
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """
    versionName: constr(min_length=1, max_length=100) = Field(
        ..., examples=['имя версии']
    )
    """
    Имя версии
    """
    globalFlag: bool = Field(..., examples=[True])
    """
    Флаг хранения версий вложенных объектов
    """
    errorResponseFlag: bool = Field(..., examples=[True])
    """
    Флаг обработки аварийного ответа
    """


class BatchAdditionalParameterFullDto(BaseModel):
    id: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор в формате UUID 4
    """
    name: constr(min_length=0, max_length=255) = Field(..., examples=['Имя объекта'])
    """
    Имя для отображения на странице
    """
    primitiveTypeId: constr(min_length=0, max_length=36) = Field(..., examples=['1'])
    """
    Уникальный идентификатор примитивного типа
    """
    dictId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор справочника
    """
    dictFlag: bool = Field(..., examples=[False])
    """
    Признак справочника кастомных типов (true)
    """
    diagramVersionId: UUID = Field(
        ..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77']
    )
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """


class BatchTableCreateDto(BaseModel):
    tableName: constr(min_length=0, max_length=255) = Field(..., examples=['table'])
    """
    Название таблицы из источника данных
    """
    dataProviderUuid: UUID = Field(
        ..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c']
    )
    """
    Уникальный идентификатор источника данных в формате UUID 4
    """
    groupId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор группы атрибутов в формате UUID 4
    """
    diagramVersionId: UUID = Field(
        ..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77']
    )
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """


class BatchSqlCreateDto(BaseModel):
    groupId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор группы атрибутов в формате UUID 4
    """
    sqlSelect: Optional[constr(min_length=0, max_length=4000)] = Field(
        None, examples=['select a from b']
    )
    """
    SQL запрос для выборки данных
    """
    dataProviderUuid: UUID = Field(
        ..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c']
    )
    """
    Уникальный идентификатор источника данных в формате UUID 4
    """
    diagramVersionId: UUID = Field(
        ..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77']
    )
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """


class BatchMappingKeyCreateDto(BaseModel):
    batchVariablesId: Optional[UUID] = Field(
        None, examples=['29445f2b-89fa-4268-af3f-1b8160a7679c']
    )
    """
    Уникальный идентификатор переменной из списка батча в формате UUID 4
    """
    parentBatchVariablesId: Optional[UUID] = Field(
        None, examples=['29445f2b-89fa-4268-af3f-1b8160a7679c']
    )
    """
    Уникальный идентификатор верхнеуровневой переменной из списка батча в формате UUID 4
    """
    groupId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор группы атрибутов в формате UUID 4
    """


class ScoreMapping(BaseModel):
    variable: Optional[str] = None
    scoreValues: Optional[List[ScoreValue]] = None


class JsonGenerationDto(BaseModel):
    jsonVariables: Optional[List[JsonGenerationVariableDto]] = None


class JsonGenerationResultDto(BaseModel):
    json_: Optional[str] = Field(None, alias='json')
    """
    Сгенерированный json
    """


class DataProviderSettingsViewWithoutIdDto(BaseModel):
    """
    Список настроек подключения источника данных
    """

    environmentSettingsId: UUID = Field(
        ..., examples=['a0bb1b74-bb05-42a4-9d7d-15b3ae172180']
    )
    """
    Идентификатор внешнего сервиса в формате UUID 4
    """
    serverName: constr(min_length=0, max_length=200) = Field(
        ..., examples=['example.com']
    )
    """
    Hostname источника данных. Обязателен для jdbc, tarantool
    """
    hosts: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['rs0/127.0.0.1:51519,127.0.0.1:51518']
    )
    """
    Список хостов кластера Mongo DB или ClickHouse. В случае MongoDB обязательно указать Replica Set: rs0/<hosts>
    """
    port: Optional[constr(min_length=0, max_length=32)] = Field(None, examples=['5432'])
    """
    Порт для соединения с источником данных. Обязателен для jdbc, tarantool
    """
    username: Optional[constr(min_length=0, max_length=32)] = Field(
        None, examples=['login']
    )
    """
    Логин для соединения с источником данных
    """
    password: Optional[constr(min_length=0, max_length=32)] = Field(
        None, examples=['password']
    )
    """
    Логин для соединения с источником данных
    """
    scheme: Optional[constr(min_length=0, max_length=50)] = Field(
        None, examples=['test_scheme']
    )
    """
    Схема базы данных, которая будет использоваться в источнике данных
    """
    additionalProperties: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['fetchSize=1000&statement_timeout=90000']
    )
    """
    Дополнительные параметры подключения в формате соответствующей СУБД. Имя БД должно быть указано в другом параметре. В случае Oracle здесь указывается service name и, возможно, параметры, в обоих случаях без слэша.
    """
    zookeeperQuorum: Optional[str] = Field(None, examples=['localhost:2181'])
    """
    Zookeeper Quorum. Поле обязательно для HBase
    """
    zookeeperZnodeParent: Optional[str] = Field(None, examples=['/hbase'])
    """
    Zookeeper Znode Parent для источника HBase
    """
    additionalSettings: Optional[List[AdditionalSettingsWithIdDto]] = None
    token: Optional[str] = Field(
        None, examples=['4b7b0fbf-faf2-4545-84b7-3f8f8da5a8ce']
    )
    """
    Токен для доступа к данным. На текущий момент используется только для TDG
    """
    database: Optional[constr(min_length=0, max_length=50)] = Field(
        None, examples=['master']
    )
    """
    Имя базы данных в случае PostgreSQL, SQL Server, Mongo DB; SID в случае Oracle
    """
    inputType: Optional[InputType1] = Field(None, examples=['url'])
    """
    Способ указания параметров JDBC подключения
    """
    url: Optional[str] = Field(None, examples=['jdbc:postgresql://localhost/test'])
    """
    JDBC URL
    """


class TestConnectionRequestDto(BaseModel):
    sourceType: SourceType = Field(..., examples=['ORACLE'])
    """
    Тип источника данных
    """
    connectionType: ConnectionType = Field(..., examples=['JDBC'])
    """
    Тип соединения
    """
    settings: Optional[List[DataProviderSettingsViewWithoutIdDto]] = None


class TypesRetrieveType(Enum):
    """
    Стратегия извлечения доступных типов данных для колонки
    """

    TABLE = 'TABLE'
    QUERY = 'QUERY'
    TARANTOOL = 'TARANTOOL'


class AvailableTypesRequestDto(BaseModel):
    sourceId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор источника данных в формате UUID 4
    """
    typesRetrieveType: TypesRetrieveType = Field(..., examples=['TABLE'])
    """
    Стратегия извлечения доступных типов данных для колонки
    """
    tableName: Optional[str] = Field(None, examples=['test-table'])
    """
    Имя таблицы
    """
    scheme: Optional[constr(min_length=0, max_length=50)] = Field(
        None, examples=['test_scheme']
    )
    """
    Схема базы данных, которая будет использоваться в источнике данных
    """
    query: Optional[str] = Field(None, examples=['select column_name from table_name'])
    """
    SQL-запрос для для извлечения колонок и доступных для них типов данных
    """
    columnName: str = Field(..., examples=['column_name'])
    """
    Название колонки
    """


class CustomAttributeDictionaryValueCreate(BaseModel):
    """
    Список значений справочника
    """

    dictValue: Dict[str, Any] = Field(
        ..., examples=['Отображаемое наименование значения справочника']
    )
    """
    Значение справочника
    """
    dictValueDisplayName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Отображаемое наименование значения справочника']
    )
    """
    Отображаемое наименование значения справочникаа
    """


class ComplexTypeCreate(BaseModel):
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    displayName: constr(max_length=100) = Field(..., examples=['Имя объекта'])
    """
    Имя для отображения на странице
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None,
        examples=[
            'Объект пользователя, который включает в себя поля FirstName, SecondName, Phone...'
        ],
    )
    """
    Описание объекта комплексного типа
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    attributes: Optional[List[AttributeCreate]] = None


class CommunicationVariableViewWithoutIdDto(BaseModel):
    """
    Список переменных канала коммуникации
    """

    variableName: str = Field(..., examples=['имя_переменной'])
    """
    Имя переменной
    """
    scriptVariableName: str = Field(..., examples=['имя_переменной_скрипта'])
    """
    Имя переменной скрипта
    """
    primitiveTypeId: Optional[str] = Field(None, examples=['1'])
    """
    Id простого типа переменной
    """
    complexTypeVersionId: Optional[UUID] = Field(
        None, examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id комплексного типа переменной
    """
    arrayFlag: bool = Field(..., examples=[False])
    """
    Является ли переменная массивом
    """
    dataSourceType: DataSourceType2
    """
    Тип ввода для значений переменной (пользовательский ввод, справочник или элемент диаграммы)
    """
    minValue: Optional[float] = Field(None, examples=[5.0])
    """
    Минимальное значение переменной
    """
    maxValue: Optional[float] = Field(None, examples=[15.0])
    """
    Максимальное значение переменной
    """
    maxSize: Optional[int] = Field(None, examples=[100])
    """
    Максимальная длина переменной
    """
    dictionaryId: Optional[UUID] = Field(
        None, examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id справочника, в котором находятся допустимые значения переменной
    """
    dynamicListType: Optional[DynamicListType2] = None
    """
    Тип отображения динамического списка
    """
    mandatoryFlag: bool = Field(..., examples=[False])
    """
    Является ли переменная обязательной
    """


class CommunicationChannelCreateUserVersionDto(BaseModel):
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Канал коммуникации PUSH']
    )
    """
    Описание канала коммуникации
    """
    scriptVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор версии скрипта, связанного с каналом коммуникации в формате UUID 4
    """
    versionName: Optional[constr(min_length=1, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """
    communicationVariables: Optional[List[CommunicationVariableViewWithoutIdDto]] = None


class CatalogCreate(BaseModel):
    """
    Новая каталог
    """

    catalogName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Каталог №1']
    )
    """
    Имя Каталога
    """
    parentCatalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор родительского каталога в формате UUID 4
    """


class AggregateCreate(BaseModel):
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    aggregateDescription: Optional[constr(max_length=1000)] = Field(
        None, examples=['описание агрегата']
    )
    """
    Описание агрегата (бизнес наименование)
    """
    aggregateJson: AggregateJson
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """


class EnvironmentVersion(BaseModel):
    environmentId: Optional[str] = None
    environmentName: Optional[str] = None
    spVersion: Optional[str] = None
    integrationModuleVersion: Optional[str] = None


class VersionsDto(BaseModel):
    decisionBackendVersion: Optional[str] = None
    environments: Optional[List[EnvironmentVersion]] = None


class UserFullView(BaseModel):
    userId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор пользователя в формате UUID 4
    """
    userName: str = Field(..., examples=['Иванов Иван'])
    """
    Имя пользователя
    """


class DiagramDto(BaseModel):
    pass


class UserJarFullViewDto(BaseModel):
    id: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор в формате UUID 4
    """
    jarName: str = Field(..., examples=['user_jar_file.jar'])
    """
    Название jar-файла
    """
    jarPath: str = Field(..., examples=['opt/user-jars/user_jar_file.jar'])
    """
    Путь до jar-файла
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    createByUser: str = Field(..., examples=['Иванов Иван'])
    """
    Пользователь, загрузивший jar-файл
    """


class UserFunctionShortInfo(BaseModel):
    id: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    jarName: str = Field(..., examples=['jar_file.jar'])
    """
    Название jar-файла, в котором находится функция
    """
    resultType: Optional[str] = Field(None, examples=['Дробный'])
    """
    Тип возвращаемого пользовательской функцией значения
    """
    description: Optional[str] = Field(None, examples=['Описание'])
    """
    Описание пользовательской функции
    """
    lastChangeByUser: Optional[str] = Field(None, examples=['Иванов Иван'])
    """
    Последний пользователь, внесший изменения
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """


class UserFunctionShortWithIsUploadedView(BaseModel):
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    jarFunctionName: str = Field(..., examples=['myFunction(java.lang.Integer)'])
    """
    Имя пользовательской функции в jar-файле
    """
    functionClass: str = Field(..., examples=['com.package.SomeClass'])
    """
    Полный путь до класса, в котором содержится функция в jar-файле
    """
    isUploaded: Optional[bool] = Field(None, examples=[False])
    """
    Была ли функция загружена ранее>
    """


class UserFunctionCatalogShortInfo(BaseModel):
    id: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    jarName: str = Field(..., examples=['jar_file.jar'])
    """
    Название jar-файла, в котором находится функция
    """
    resultType: Optional[str] = Field(None, examples=['Дробный'])
    """
    Тип возвращаемого пользовательской функцией значения
    """
    description: Optional[str] = Field(None, examples=['Описание'])
    """
    Описание пользовательской функции
    """
    lastChangeByUser: Optional[str] = Field(None, examples=['Иван Иванов'])
    """
    Последний пользователь, изменивший объект
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    elementId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор элемента в формате UUID 4
    """
    catalogFlag: bool = Field(..., examples=[True])
    """
    Признак каталога
    """


class Status3(Enum):
    DEPLOYING = 'DEPLOYING'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCESS = 'SUCCESS'
    FAIL = 'FAIL'
    CREATED = 'CREATED'
    MANUAL_STOP = 'MANUAL_STOP'
    EMERGENCY_STOP = 'EMERGENCY_STOP'


class TestInfo(BaseModel):
    testId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор теста в формате UUID 4
    """
    testName: str = Field(..., examples=['test_01'])
    """
    Имя теста
    """
    testFile: Optional[str] = Field(None, examples=['/path/to/file'])
    """
    Путь к файлу с данными для теста
    """
    testDescription: Optional[str] = Field(None, examples=['test description'])
    """
    Описание теста
    """
    timeout: Optional[int] = Field(None, examples=[10])
    """
    Таймаут в секундах
    """
    lastExecutionDt: Optional[AwareDatetime] = None
    status: Optional[Status3] = None


class TestCaseInfo(BaseModel):
    caseId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор тест-кейса в формате UUID 4
    """
    caseResult: bool = Field(..., examples=[True])
    """
    Статус выполнения тест-кейса
    """


class TestStatusDto(BaseModel):
    testId: Optional[str] = None
    timeStart: Optional[AwareDatetime] = None
    timeFinish: Optional[AwareDatetime] = None
    timeout: Optional[AwareDatetime] = None
    status: Optional[Status3] = None


class TestCaseGetFullView(BaseModel):
    caseId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор тест-кейса в формате UUID 4
    """
    caseResult: bool = Field(..., examples=[True])
    """
    Статус выполнения тест-кейса
    """
    caseRequestJson: str = Field(..., examples=['{}'])
    """
    Json тест-кейса
    """
    caseExpResponseJson: str = Field(..., examples=['{}'])
    """
    Json ожидаемого ответа тест-кейса
    """
    caseFactResponseJson: str = Field(..., examples=['{}'])
    """
    Json фактического ответа тест-кейса
    """


class TestCaseNodeInputDataFullView(BaseModel):
    """
    Список входящих сообщений
    """

    nodeId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор узла, с которого пришли данные
    """
    nodeName: str = Field(..., examples=['Начало'])
    """
    Название узла, с которого пришли данные
    """
    inputData: Optional[str] = Field(None, examples=['{"vhod1":1,"vhod2":1}'])
    """
    Данные, пришедшие с узла
    """


class SwaggerResource(BaseModel):
    name: Optional[str] = None
    url: Optional[str] = None
    swaggerVersion: Optional[str] = None
    location: Optional[str] = None


class DefaultModelRendering(Enum):
    EXAMPLE = 'example'
    MODEL = 'model'


class DocExpansion(Enum):
    NONE = 'none'
    LIST = 'list'
    FULL = 'full'


class OperationsSorter(Enum):
    ALPHA = 'alpha'
    METHOD = 'method'


class TagsSorter(Enum):
    ALPHA = 'alpha'


class UiConfiguration(BaseModel):
    deepLinking: Optional[bool] = None
    displayOperationId: Optional[bool] = None
    defaultModelsExpandDepth: Optional[int] = None
    defaultModelExpandDepth: Optional[int] = None
    defaultModelRendering: Optional[DefaultModelRendering] = None
    displayRequestDuration: Optional[bool] = None
    docExpansion: Optional[DocExpansion] = None
    filter: Optional[Dict[str, Any]] = None
    maxDisplayedTags: Optional[int] = None
    operationsSorter: Optional[OperationsSorter] = None
    showExtensions: Optional[bool] = None
    showCommonExtensions: Optional[bool] = None
    tagsSorter: Optional[TagsSorter] = None
    validatorUrl: Optional[str] = None
    supportedSubmitMethods: Optional[List[str]] = None
    swaggerBaseUiUrl: Optional[str] = None


class SecurityConfiguration(BaseModel):
    apiKey: Optional[str] = None
    apiKeyVehicle: Optional[str] = None
    apiKeyName: Optional[str] = None
    clientId: Optional[str] = None
    clientSecret: Optional[str] = None
    realm: Optional[str] = None
    appName: Optional[str] = None
    scopeSeparator: Optional[str] = None
    additionalQueryStringParams: Optional[Dict[str, Dict[str, Any]]] = None
    useBasicAuthenticationWithAccessCodeGrant: Optional[bool] = None
    enableCsrfSupport: Optional[bool] = None


class ExternalServiceShortInfoDto(BaseModel):
    serviceId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор внешнего сервиса в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии внешнего сервиса в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None


class ExternalServiceFullViewDto(BaseModel):
    isAvailableInProperties: Optional[bool] = Field(None, examples=[True])
    """
    Флаг того, что характеристики ВС будут доступны в __PROPERTIES__
    """
    serviceId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор внешнего сервиса в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии внешнего сервиса в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Внешний сервис данных']
    )
    """
    Описание внешнего сервиса
    """
    syncType: SyncType = Field(..., examples=['SYNC'])
    """
    Тип взаимодействия
    """
    protocol: Protocol3 = Field(..., examples=['REST'])
    """
    Протокол доступа
    """
    method: Optional[Method] = Field(None, examples=['GET'])
    """
    Используемый метод взаимодействия
    """
    fileFormat: Optional[FileFormat] = Field(None, examples=['JSON'])
    """
    Формат сообщения
    """
    batchFlag: Optional[bool] = Field(None, examples=[False])
    """
    Признак пакетного взаимодействия
    """
    body: Optional[str] = Field(None, examples=['{request_id: {requestid}}'])
    """
    Тело запроса
    """
    serviceSettings: Optional[List[ExternalServiceSettingsFullViewDto]] = None
    headers: Optional[List[ExternalServiceHeaderFullViewDto]] = None
    variables: Optional[List[ExternalServiceVariableFullViewDto]] = None


class ExternalServiceGetIdWithVariables(BaseModel):
    serviceId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор внешнего сервиса в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии внешнего сервиса в формате UUID 4
    """
    variables: Optional[List[ExternalServiceVariableFullViewDto]] = None


class ExternalServiceShortInfoVersionDto(BaseModel):
    serviceId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор внешнего сервиса в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии внешнего сервиса в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None
    versionType: VersionType
    """
    Тип версии
    """
    versionName: Optional[constr(min_length=1, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """


class ExternalServiceTechDto(BaseModel):
    """
    Тип технического сервиса сервиса
    """


class ExternalServiceTechFullViewDto(BaseModel):
    serviceId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор внешнего сервиса в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии внешнего сервиса в формате UUID 4
    """
    variables: Optional[List[ExternalServiceVariableFullViewDto]] = None
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    serviceType: ExternalServiceTechDto


class ExternalServiceCatalogShortInfoDto(BaseModel):
    serviceId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор внешнего сервиса в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии внешнего сервиса в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = Field(None, examples=['Иван Иванов'])
    """
    Последний пользователь, изменивший объект
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    elementId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор элемента в формате UUID 4
    """
    catalogFlag: bool = Field(..., examples=[True])
    """
    Признак каталога
    """


class ScriptType3(Enum):
    """
    Язык скрипта
    """

    GROOVY = 'GROOVY'
    PYTHON = 'PYTHON'


class ScriptShortInfoDto(BaseModel):
    description: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание скрипта']
    )
    """
    Описание скрипта
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = Field(None, examples=['Иван Иванов'])
    """
    Последний пользователь, изменивший объект
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    scriptType: ScriptType3
    """
    Язык скрипта
    """
    scriptId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор скрипта в формате UUID
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии скрипта в формате UUID
    """


class ScriptWithIdWithVariables(BaseModel):
    variables: Optional[List[ScriptVariableFullView]] = None
    scriptId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор скрипта в формате UUID
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии скрипта в формате UUID
    """


class ScriptFullVersionView(BaseModel):
    description: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание скрипта']
    )
    """
    Описание скрипта
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = Field(None, examples=['Иван Иванов'])
    """
    Последний пользователь, изменивший объект
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    scriptType: ScriptType3
    """
    Язык скрипта
    """
    versionType: VersionType
    """
    Тип версии
    """
    versionName: Optional[constr(min_length=1, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """
    scriptId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор скрипта в формате UUID
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии скрипта в формате UUID
    """


class ScriptCatalogShortInfoDto(BaseModel):
    description: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание скрипта']
    )
    """
    Описание скрипта
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = Field(None, examples=['Иван Иванов'])
    """
    Последний пользователь, изменивший объект
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    scriptType: ScriptType3
    """
    Язык скрипта
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    elementId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор элемента в формате UUID 4
    """
    catalogFlag: bool = Field(..., examples=[True])
    """
    Признак каталога
    """
    scriptId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор скрипта в формате UUID
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии скрипта в формате UUID
    """


class PythonEnvironmentShortInfoDto(BaseModel):
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор окружения python в формате UUID
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии окружения python  в формате UUID
    """
    name: constr(min_length=1, max_length=100) = Field(..., examples=['питон'])
    """
    Имя окружения python
    """
    pythonVersionName: constr(min_length=1, max_length=100) = Field(
        ..., examples=['Python 3.6']
    )
    """
    Имя версии python
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None


class PythonEnvironmentGetFullViewDto(BaseModel):
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор окружения python в формате UUID
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии окружения python  в формате UUID
    """
    name: constr(min_length=1, max_length=100) = Field(..., examples=['питон'])
    """
    Имя окружения python
    """
    pythonVersionName: constr(min_length=1, max_length=100) = Field(
        ..., examples=['Python 3.6']
    )
    """
    Имя версии python
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    requirementsTxt: Optional[str] = Field(None, examples=['pandas==0.2.0'])
    """
    Текст файла requirements.txt
    """
    pythonVersionId: Optional[str] = None
    pythonEnvironmentSettings: Optional[List[PythonEnvironmentSettingsWithIdDto]] = None


class PythonEnvironmentVersionViewDto(BaseModel):
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор окружения python в формате UUID
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии окружения python  в формате UUID
    """
    name: constr(min_length=1, max_length=100) = Field(..., examples=['питон'])
    """
    Имя окружения python
    """
    pythonVersionName: constr(min_length=1, max_length=100) = Field(
        ..., examples=['Python 3.6']
    )
    """
    Имя версии python
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    versionType: VersionType
    """
    Тип версии
    """
    versionName: Optional[constr(min_length=1, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """
    rootObjectVersionId: UUID = Field(
        ..., examples=['9d4ade21-cf23-4819-ac9d-f052dba69002']
    )
    """
    Идентификатор родительского объекта версии окружения питона в формате UUID
    """


class RuleTypeGetFullView(BaseModel):
    typeName: constr(max_length=100) = Field(..., examples=['Name object'])
    """
    Системное имя в UTF-8
    """
    displayName: constr(max_length=100) = Field(..., examples=['Имя объекта'])
    """
    Имя для отображения на странице
    """
    typeId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор типа правила
    """
    createByUser: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Пользователь, который создал тип правила
    """
    lastChangeByUser: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Последний пользователь, который внес изменения в тип правила
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """


class RestSourceShortInfoDto(BaseModel):
    restSourceId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор REST источника в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None


class RestSourceFullViewDto(BaseModel):
    restSourceId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор REST источника в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['REST источник']
    )
    """
    Описание REST источника
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    restSourceSettings: Optional[List[RestSourceSettingsFullViewDto]] = None


class RestSourceCatalogShortInfoDto(BaseModel):
    restSourceId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор REST источника в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = Field(None, examples=['Иван Иванов'])
    """
    Последний пользователь, изменивший объект
    """
    createByUser: Optional[str] = Field(None, examples=['Иван Иванов'])
    """
    Последний пользователь, создавший объект
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    elementId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор элемента в формате UUID 4
    """
    catalogFlag: bool = Field(..., examples=[True])
    """
    Признак каталога
    """


class NodeTypeGetFullView(BaseModel):
    typeId: int = Field(..., examples=[2])
    """
    Уникальный идентификатор
    """
    typeName: constr(max_length=100) = Field(..., examples=['Name object'])
    """
    Системное имя в UTF-8
    """
    displayName: constr(max_length=100) = Field(..., examples=['Имя объекта'])
    """
    Имя для отображения на странице
    """


class FunctionGetFullView(BaseModel):
    functionId: UUID
    """
    Уникальный идентификатор списка функий. 
    """
    functionName: constr(max_length=100) = Field(..., examples=['Функция №1'])
    """
    Наименование функции
    """
    description: constr(max_length=200)
    """
    Описание функции в формате <Наименование функции>(<тип параметра 1>{, ...<тип параметра N>}) <Краткое описание что делает данная функция>
    """
    resultType: constr(max_length=15)
    """
    Тип результирующего значения функции
    """
    isExternal: Optional[bool] = None
    """
    Является ли функция загруженной пользователем
    """


class DataTypeGetFullView(BaseModel):
    typeId: UUID
    """
    Уникальный идентификатор списка типов данных. Объединяет в себе примитивные и комплексные списки. ID может принимать числовое значение в строковом формате, либо UUID
    """
    typeName: constr(max_length=100) = Field(..., examples=['Name object'])
    """
    Системное имя в UTF-8
    """
    displayName: constr(max_length=100) = Field(..., examples=['Имя объекта'])
    """
    Имя для отображения на странице
    """
    complexFlag: bool = Field(..., examples=[False])
    """
    Флаг, определяющий сложность типа. true - тип данных сложный, false - тип данных примитивный
    """


class AttributeValuesFullViewDto(BaseModel):
    """
    Список атрибутов
    """

    key: constr(max_length=100) = Field(..., examples=['Attribute key'])
    """
    Техническое название атрибута
    """
    name: constr(max_length=100) = Field(..., examples=['Attribute value'])
    """
    Название канала атрибута
    """


class OfferShortInfoDto(BaseModel):
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор шаблона предложения в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии шаблона предложения в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None


class OfferFullViewDto(BaseModel):
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор шаблона предложения в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии шаблона предложения в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    scriptVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор версии скрипта, связанного с шаблоном предложения в формате UUID 4
    """
    scriptId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор скрипта, связанного с шаблоном предложения в формате UUID 4
    """
    scriptName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Код создания предложения Автокредит']
    )
    """
    Имя скрипта, связанного с шаблоном предложения в формате UUID 4
    """
    offerComplexTypeVersionId: UUID = Field(
        ..., examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id комплексного типа предложения
    """
    offerVariables: Optional[List[OfferVariableFullViewDto]] = None
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """


class OfferWithVariablesDto(BaseModel):
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор шаблона предложения в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии шаблона предложения в формате UUID 4
    """
    offerComplexTypeVersionId: UUID = Field(
        ..., examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id комплексного типа предложения
    """
    offerVariables: Optional[List[OfferVariableFullViewDto]] = None


class OfferShortInfoVersionDto(BaseModel):
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор шаблона предложения в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии шаблона предложения в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None
    versionName: Optional[constr(min_length=1, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    versionType: VersionType
    """
    Тип версии
    """
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """


class DiagramShortInfoView(BaseModel):
    diagramId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор диаграммы в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'])
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """
    lastChangeByUser: Optional[str] = None
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    diagramDescription: Optional[constr(min_length=0, max_length=2000)] = Field(
        None, examples=['Диаграмма обладает функционалом и выполняет...']
    )
    """
    Описание диаграммы
    """


class OfferCatalogPage(BaseModel):
    content: Optional[List[DiagramShortInfoView]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class OfferStorageClientIdTypeFullDto(BaseModel):
    """
    Список типов клиентов
    """

    code: str = Field(..., examples=['1'])
    """
    Код типа идентификатора клиента
    """
    description: str = Field(..., examples=['subscriber'])
    """
    Описание типа идентификатора клиента
    """


class OfferStorageClientIdTypesFullDto(BaseModel):
    detail: Optional[str] = Field(
        None, examples=['Не передано обязательное для передачи поле']
    )
    """
    Детальное описание ошибки
    """
    title: Optional[str] = Field(None, examples=['Constraint Violation'])
    """
    Название ошибки
    """
    type: Optional[str] = Field(None, examples=['/problems/bad-request'])
    """
    Тип ошибки
    """
    instance: Optional[str] = Field(None, examples=['/api/campaign-runs'])
    """
    Инстанс
    """
    status: Optional[int] = Field(None, examples=[200])
    """
    HTTP-статус
    """
    clientIdTypes: Optional[List[OfferStorageClientIdTypeFullDto]] = None


class ObjectToVersionType(Enum):
    """
    Тип версии зависимого объекта
    """

    TEMP = 'TEMP'
    DEPLOYED = 'DEPLOYED'
    LATEST = 'LATEST'
    USER_LOCAL = 'USER_LOCAL'
    USER_TEMP = 'USER_TEMP'
    USER_GLOBAL = 'USER_GLOBAL'
    TEST_DEPLOYED = 'TEST_DEPLOYED'


class ObjectToType(Enum):
    """
    Тип объекта ребенка
    """

    DEPLOY = 'DEPLOY'
    DIAGRAM = 'DIAGRAM'
    AGGREGATE = 'AGGREGATE'
    CUSTOM_CODE = 'CUSTOM_CODE'
    COMPLEX_TYPE = 'COMPLEX_TYPE'
    SERVICE = 'SERVICE'
    REST_SOURCE = 'REST_SOURCE'
    DATA_PROVIDER = 'DATA_PROVIDER'
    CUSTOM_ATTRIBUTE_DICTIONARY = 'CUSTOM_ATTRIBUTE_DICTIONARY'
    COMMUNICATION_CHANNEL = 'COMMUNICATION_CHANNEL'
    OFFER = 'OFFER'
    USER_FUNCTION = 'USER_FUNCTION'
    DATA_PROVIDER_RELATION = 'DATA_PROVIDER_RELATION'
    CATALOG = 'CATALOG'
    KAFKA = 'KAFKA'
    PYTHON_ENVIRONMENT = 'PYTHON_ENVIRONMENT'
    PYTHON_ENVIRONMENT_RELATION = 'PYTHON_ENVIRONMENT_RELATION'
    DIAGRAM_RELATION = 'DIAGRAM_RELATION'
    CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS = 'CUSTOM_ATTRIBUTE_DICTIONARY_RELATIONS'
    OFFER_RELATION = 'OFFER_RELATION'
    SERVICE_RELATION = 'SERVICE_RELATION'
    REST_SOURCE_RELATION = 'REST_SOURCE_RELATION'
    CUSTOM_CODE_RELATION = 'CUSTOM_CODE_RELATION'
    COMMUNICATION_RELATION = 'COMMUNICATION_RELATION'
    AGGREGATE_RELATION = 'AGGREGATE_RELATION'
    MESSAGE_BROKER = 'MESSAGE_BROKER'
    LOCKING = 'LOCKING'


class AggregateType(Enum):
    """
    Тип агрегата
    """

    CALC = 'CALC'
    READ = 'READ'


class ObjectRelationsFullViewDto(BaseModel):
    objectFromVersionId: UUID = Field(
        ..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a']
    )
    """
    Идентификатор версии родителя в формате UUID 4
    """
    objectName: str = Field(..., examples=['Object display name'])
    """
    Название зависимого объекта
    """
    objectToVersionId: UUID = Field(
        ..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a']
    )
    """
    Идентификатор версии ребенка в формате UUID 4
    """
    objectToVersionType: ObjectToVersionType = Field(..., examples=['USER_GLOBAL'])
    """
    Тип версии зависимого объекта
    """
    objectToType: ObjectToType = Field(..., examples=['AGGREGATE'])
    """
    Тип объекта ребенка
    """
    nodeName: str = Field(..., examples=['Узел предложения'])
    """
    Имя узла, в котором вызывается объект
    """
    aggregateType: AggregateType = Field(..., examples=['Чтение'])
    """
    Тип агрегата
    """


class LockingDictionaryPage(BaseModel):
    content: Optional[List[LockingDtoShortView]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class LockingDto(BaseModel):
    pass


class KafkaShortInfoDto(BaseModel):
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор kafka в формате UUID 4
    """
    name: constr(min_length=0, max_length=100) = Field(..., examples=['local kafka'])
    """
    Имя kafka
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Kafka для тестирования']
    )
    """
    Описание kafka
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None


class KafkaGetFullViewDto(BaseModel):
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор kafka в формате UUID 4
    """
    name: constr(min_length=0, max_length=100) = Field(..., examples=['local kafka'])
    """
    Имя kafka
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Kafka для тестирования']
    )
    """
    Описание kafka
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    kafkaSettings: Optional[List[KafkaSettingsWithIdDto]] = None


class EnvironmentShortInfoDto(BaseModel):
    environmentId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор среды развертывания в формате UUID 4
    """
    environmentName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['prod']
    )
    """
    название среды развертывания
    """
    defaultFlag: Optional[bool] = Field(None, examples=[True])
    """
    Флаг дефолтного окружения
    """
    kafkaUrl: constr(min_length=0, max_length=100) = Field(
        ..., examples=['http://localhost:29092']
    )
    """
    Url kafka
    """
    stateStoreUrl: Optional[str] = Field(
        None,
        examples=['http://localhost:5432/decision_aggregate?currentSchema=decision'],
    )
    """
    Url базы данных state store агрегатов
    """
    integrationUrl: constr(min_length=0, max_length=100) = Field(
        ..., examples=['http://localhost:8081']
    )
    """
    Url модуля интеграции
    """
    streamingPlatformUrl: constr(min_length=0, max_length=1000) = Field(
        ..., examples=['http://localhost:8083']
    )
    """
    Url платформы
    """


class KafkaEnvironmentFullViewDto(BaseModel):
    """
    Параметры Kafka
    """

    kafkaUrl: constr(min_length=0, max_length=100) = Field(
        ..., examples=['http://localhost:29092']
    )
    """
    Url kafka
    """
    kafkaEnvironmentAdditionalSettings: Optional[
        List[KafkaAdditionalSettingsWithIdDto]
    ] = None


class DiagramPage(BaseModel):
    content: Optional[List[DiagramShortInfoView]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class DiagramShortInfoVersionsView(BaseModel):
    diagramId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор диаграммы в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'])
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """
    lastChangeByUser: Optional[str] = None
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    diagramDescription: Optional[constr(min_length=0, max_length=2000)] = Field(
        None, examples=['Диаграмма обладает функционалом и выполняет...']
    )
    """
    Описание диаграммы
    """
    versionType: VersionType
    """
    Тип версии
    """
    versionName: constr(min_length=1, max_length=100) = Field(
        ..., examples=['имя версии']
    )
    """
    Имя версии
    """
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """


class SchemaInfoDto(BaseModel):
    id: int = Field(..., examples=[10])
    """
    Уникальный идентификатор схемы
    """
    name: str = Field(..., examples=['schema-name'])
    """
    Имя схемы
    """
    version: constr(pattern=r'([0-9]+\.)*[0-9]+') = Field(..., examples=['1'])
    """
    Версия схемы
    """
    url: str = Field(..., examples=['http://sp:8083/schema/10/content'])
    """
    Url схемы
    """


class SchemaFullDto(BaseModel):
    id: int = Field(..., examples=[10])
    """
    Уникальный идентификатор схемы
    """
    name: str = Field(..., examples=['schema-name'])
    """
    Имя схемы
    """
    version: constr(pattern=r'([0-9]+\.)*[0-9]+') = Field(..., examples=['1'])
    """
    Версия схемы
    """
    url: str = Field(..., examples=['http://sp:8083/schema/10/content'])
    """
    Url схемы
    """
    schemaJson: JsonNode


class NodeValidationPayload(BaseModel):
    """
    JSON-детализаия валидации
    """

    nodeValidationMap: Optional[Dict[str, Dict[str, Any]]] = None
    commonNodeValidationMessages: Optional[List[str]] = None


class DiagramCatalogShortInfoView(BaseModel):
    diagramId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор диаграммы в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'])
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """
    lastChangeByUser: Optional[str] = Field(None, examples=['Иван Иванов'])
    """
    Последний пользователь, изменивший объект
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    diagramDescription: Optional[constr(min_length=0, max_length=2000)] = Field(
        None, examples=['Диаграмма обладает функционалом и выполняет...']
    )
    """
    Описание диаграммы
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    elementId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор элемента в формате UUID 4
    """
    catalogFlag: bool = Field(..., examples=[True])
    """
    Признак каталога
    """


class BatchOccupancyStatus(Enum):
    """
    Тип заполненности
    """

    IN_PROGRESS = 'IN_PROGRESS'
    FULL = 'FULL'
    EMPTY = 'EMPTY'


class BatchVariableGetDto(BaseModel):
    id: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор в формате UUID 4
    """
    diagramVersionId: UUID = Field(
        ..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c']
    )
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """
    groupId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор группы атрибутов в формате UUID 4
    """
    parentGroupId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор родительской группы атрибутов в формате UUID 4
    """
    primitiveTypeId: constr(min_length=0, max_length=36) = Field(..., examples=['1'])
    """
    Уникальный идентификатор примитивного типа в формате UUID 4
    """
    name: constr(min_length=36, max_length=36) = Field(..., examples=['Имя объекта'])
    """
    Имя для отображения на странице
    """
    parameterVersionId: Optional[str] = None
    complexTypeVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор пользовательского типа 
    """
    batchOccupancyStatus: BatchOccupancyStatus
    """
    Тип заполненности
    """
    batchVariableList: Optional[List[BatchVariableGetDto]] = None


class BatchTableGetFullView(BaseModel):
    id: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор таблицы в формате UUID 4
    """
    tableName: constr(min_length=0, max_length=255) = Field(..., examples=['table'])
    """
    Название таблицы из источника данных
    """
    dataProviderUuid: UUID = Field(
        ..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c']
    )
    """
    Уникальный идентификатор источника данных в формате UUID 4
    """
    groupId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор группы атрибутов в формате UUID 4
    """
    diagramVersionId: UUID = Field(
        ..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77']
    )
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """


class BatchMappingKeyGetDto(BaseModel):
    id: Optional[UUID] = Field(None, examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор в формате UUID 4
    """
    batchVariablesId: Optional[UUID] = Field(
        None, examples=['29445f2b-89fa-4268-af3f-1b8160a7679c']
    )
    """
    Уникальный идентификатор переменной из списка батча в формате UUID 4
    """
    parentBatchVariablesId: Optional[UUID] = Field(
        None, examples=['29445f2b-89fa-4268-af3f-1b8160a7679c']
    )
    """
    Уникальный идентификатор верхнеуровневой переменной из списка батча в формате UUID 4
    """
    groupId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор группы атрибутов в формате UUID 4
    """
    mapping: UUID
    """
    Маппинг элемента запроса на диаграмму
    """
    primitiveTypeId: constr(max_length=36) = Field(..., examples=['1'])
    """
    Уникальный идентификатор примитивного типа в формате UUID 4
    """
    name: constr(max_length=100) = Field(..., examples=['Имя объекта'])
    """
    Имя для отображения на странице
    """
    diagramVersionId: UUID = Field(
        ..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77']
    )
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """


class DeployStatus(Enum):
    """
    Статус деплоя
    """

    CREATED = 'CREATED'
    ERROR = 'ERROR'
    CANCELED = 'CANCELED'
    STOPPED = 'STOPPED'
    STOPPING = 'STOPPING'
    READY_FOR_DEPLOY = 'READY_FOR_DEPLOY'
    TEST_DEPLOYED = 'TEST_DEPLOYED'
    INHERIT_DEPLOYED = 'INHERIT_DEPLOYED'
    DEPLOYED_WITH_ERROR_IN_REPLICAS = 'DEPLOYED_WITH_ERROR_IN_REPLICAS'
    IN_PROGRESS = 'IN_PROGRESS'
    DEPLOYED = 'DEPLOYED'


class DiagramVersionNameView(BaseModel):
    """
    Информация о диаграмме
    """

    diagramId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор диаграммы в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    versionName: constr(min_length=1, max_length=100) = Field(
        ..., examples=['имя версии']
    )
    """
    Имя версии
    """
    versionId: UUID = Field(..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'])
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """


class IntegrationFullDto(BaseModel):
    inTopicName: str = Field(..., examples=['b73b4500-27f7-42b6-abbe-938f3705955e'])
    """
    Входящий топик диаграммы
    """
    outTopicName: str = Field(..., examples=['b73b4500-27f7-42b6-abbe-938f3705955e'])
    """
    Входящий топик диаграммы
    """
    callUri: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор вызова диаграммы в формате UUID 4
    """
    timeout: Optional[int] = Field(None, examples=[100])
    """
    Тайм-аут исполнения диаграммы
    """
    deployType: DeployType
    """
    Тип деплоя
    """
    jobId: int = Field(..., examples=[1])
    """
    Id джоба в оркестраторе
    """


class IntegrationMapDto(RootModel[Optional[Dict[str, IntegrationFullDto]]]):
    root: Optional[Dict[str, IntegrationFullDto]] = None


class DataProviderGetFullView(BaseModel):
    sourceId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор источника данных в формате UUID 4
    """
    sourceName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Витрина данных']
    )
    """
    Имя источника данных
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Операционная БД']
    )
    """
    Описание источника данных
    """
    sourceType: SourceType = Field(..., examples=['ORACLE'])
    """
    Тип источника данных
    """
    connectionType: ConnectionType = Field(..., examples=['JDBC'])
    """
    Тип соединения
    """
    settings: Optional[List[DataProviderSettingsFullViewDto]] = None


class TablesDto(BaseModel):
    tableName: str = Field(..., examples=['RTDM_APPLICATIONS'])
    """
    Название таблицы
    """
    schemaName: Optional[str] = Field(None, examples=['public'])
    """
    Название схемы
    """


class IndexDto(BaseModel):
    indexName: str = Field(..., examples=['primary'])
    """
    Название индекса
    """
    columns: Optional[List[str]] = None
    isUnique: bool = Field(..., examples=[True])
    """
    Признак уникального индекса
    """
    isPrimary: bool = Field(..., examples=[True])
    """
    Признак первичного индекса
    """


class ColumnsDto(BaseModel):
    columnName: str = Field(..., examples=['RUN_ID'])
    """
    Название поля в таблице
    """
    dataType: str = Field(..., examples=['VARCHAR'])
    """
    Тип поля
    """
    isPrimary: Optional[bool] = Field(None, examples=[True])
    """
    Признак первичного ключа
    """
    isNullable: Optional[bool] = Field(None, examples=[True])
    """
    Признак возможности null-значения
    """
    isAutoIncrement: Optional[bool] = Field(None, examples=[True])
    """
    Признак авто-увеличения значения
    """
    haveDefault: Optional[bool] = Field(None, examples=[True])
    """
    Признак наличия значения по умолчанию
    """


class FunctionsDto(BaseModel):
    name: Optional[str] = Field(None, examples=['sum'])
    """
    Название функции
    """
    body: Optional[str] = Field(None, examples=['function(a, b) return a + b end'])
    """
    Тело функции
    """
    arguments: Optional[List[str]] = None


class CustomAttributeDictionaryShortInfo(BaseModel):
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор справочника в формате UUID 4
    """
    dictName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Справочник №1']
    )
    """
    Имя справочника
    """
    dictValueTypeId: constr(min_length=1, max_length=1) = Field(..., examples=['1'])
    """
    Идентификатор типа значений справочника
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None


class CustomAttributeDictionaryValueFullView(BaseModel):
    """
    Список значений справочника
    """

    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор значения справочника в формате UUID 4
    """
    dictExpression: constr(min_length=0, max_length=2000) = Field(
        ..., examples=['Выражение значения справочника']
    )
    """
    Выражение значения справочника
    """
    dictValue: Dict[str, Any] = Field(
        ..., examples=['Отображаемое наименование значения справочника']
    )
    """
    Значение справочника
    """
    dictValueDisplayName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Отображаемое наименование значения справочника']
    )
    """
    Отображаемое наименование значения справочникаа
    """


class CounterFullViewDto(BaseModel):
    successCounter: int = Field(..., examples=[123])
    """
    Счетчик успешных прохождений заявки
    """


class AttributeShortView(BaseModel):
    """
    Лист атрибутов входящий в состав комплексного типа
    """

    attributeId: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Уникальный идентификатор в формате UUID 4
    """
    attributeName: constr(min_length=1, max_length=100) = Field(..., examples=['name'])
    """
    Имя атрибута
    """
    complexFlag: bool = Field(..., examples=[True])
    """
    Флаг отображающий тип данных, к которым относится атрибут
    """
    arrayFlag: bool = Field(..., examples=[False])
    """
    Флаг отображающий тип объекта данных, к которым относится атрибут
    """
    primitiveTypeId: Optional[str] = Field(None, examples=['1'])
    """
    Уникальный идентификатор примитивного типа. Может принимать null значения
    """
    complexTypeVersionId: Optional[UUID] = Field(
        None, examples=['a190d64d-ef84-4d17-b05b-096f4b82365a']
    )
    """
    Уникальный идентификатор комплексного типа, на который ссылается атрибут в формате UUID 4
    """


class ComplexTypeGetFullView(BaseModel):
    typeId: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    displayName: constr(max_length=100) = Field(..., examples=['Имя объекта'])
    """
    Имя для отображения на странице
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None,
        examples=[
            'Объект пользователя, который включает в себя поля FirstName, SecondName, Phone...'
        ],
    )
    """
    Описание объекта комплексного типа
    """
    createByUser: Optional[str] = None
    attributes: Optional[List[AttributeShortView]] = None


class ComplexTypePage(BaseModel):
    content: Optional[List[ComplexTypeGetFullView]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class ComplexTypeMap(BaseModel):
    typeId: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    displayName: constr(max_length=100) = Field(..., examples=['Имя объекта'])
    """
    Имя для отображения на странице
    """
    attributes: Optional[List[AttributeCreate]] = None


class AttributeGetFullView(BaseModel):
    attributeId: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Уникальный идентификатор в формате UUID 4
    """
    attributeName: constr(min_length=1, max_length=100) = Field(..., examples=['name'])
    """
    Имя атрибута
    """
    complexFlag: bool = Field(..., examples=[True])
    """
    Флаг отображающий тип данных, к которым относится атрибут
    """
    arrayFlag: bool = Field(..., examples=[False])
    """
    Флаг отображающий тип объекта данных, к которым относится атрибут
    """
    primitiveTypeId: Optional[str] = Field(None, examples=['1'])
    """
    Уникальный идентификатор примитивного типа. Может принимать null значения
    """
    complexTypeVersionId: Optional[UUID] = Field(
        None, examples=['a190d64d-ef84-4d17-b05b-096f4b82365a']
    )
    """
    Уникальный идентификатор комплексного типа, на который ссылается атрибут в формате UUID 4
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Имя клиента']
    )
    """
    Описание атрибута
    """
    parentId: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Уникальный идентификатор комплексного типа, от которого произведен атрибут, в формате UUID 4
    """


class ComplexTypeGetFullVersionView(BaseModel):
    typeId: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    displayName: constr(max_length=100) = Field(..., examples=['Имя объекта'])
    """
    Имя для отображения на странице
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None
    versionType: VersionType
    """
    Тип версии
    """
    versionName: Optional[constr(min_length=0, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    versionDescription: Optional[constr(min_length=1, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """


class ComplexTypeCatalogShortView(BaseModel):
    typeId: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    displayName: constr(max_length=100) = Field(..., examples=['Имя объекта'])
    """
    Имя для отображения на странице
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = Field(None, examples=['Иван Иванов'])
    """
    Последний пользователь, изменивший объект
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    elementId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор элемента в формате UUID 4
    """
    catalogFlag: bool = Field(..., examples=[True])
    """
    Признак каталога
    """


class CommunicationChannelShortInfoDto(BaseModel):
    communicationChannelId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор канала коммуникации в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии канала коммуникации в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None


class CommunicationPage(BaseModel):
    content: Optional[List[CommunicationChannelShortInfoDto]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class CommunicationChannelFullViewDto(BaseModel):
    communicationChannelId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор канала коммуникации в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии канала коммуникации в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Канал коммуникации PUSH']
    )
    """
    Описание канала коммуникации
    """
    scriptId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор скрипта, связанного с каналом коммуникации в формате UUID 4
    """
    scriptVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор версии скрипта, связанного с каналом коммуникации в формате UUID 4
    """
    scriptName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Код вызова канала коммуникации PUSH']
    )
    """
    Имя скрипта, связанного с каналом коммуникации в формате UUID 4
    """
    communicationVariables: Optional[List[CommunicationVariableFullViewDto]] = None


class CommunicationChannelWithVariablesDto(BaseModel):
    communicationChannelId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор канала коммуникации в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии канала коммуникации в формате UUID 4
    """
    communicationVariables: Optional[List[CommunicationVariableFullViewDto]] = None
    communicationScriptVariables: List[ScriptVariableFullView]


class CommunicationChannelShortInfoVersionDto(BaseModel):
    communicationChannelId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор канала коммуникации в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии канала коммуникации в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None
    versionName: Optional[constr(min_length=1, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    versionType: VersionType
    """
    Тип версии
    """
    versionDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """


class ChannelFullViewDto(BaseModel):
    key: constr(max_length=100) = Field(..., examples=['SMS'])
    """
    Техническое название канала коммуникации
    """
    name: constr(max_length=100) = Field(..., examples=['СМС'])
    """
    Название канала коммуникации
    """


class CommunicationChannelCatalogShortInfoDto(BaseModel):
    communicationChannelId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор канала коммуникации в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии канала коммуникации в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = Field(None, examples=['Иван Иванов'])
    """
    Последний пользователь, изменивший объект
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    elementId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор элемента в формате UUID 4
    """
    catalogFlag: bool = Field(..., examples=[True])
    """
    Признак каталога
    """


class CatalogShortView(BaseModel):
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    catalogName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Каталог №1']
    )
    """
    Имя Каталога
    """


class AggregateShortView(BaseModel):
    aggregateId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор агрегата в формате UUID
    """
    versionId: UUID = Field(..., examples=['9d4ade21-cf23-4819-ac9d-f052dba69002'])
    """
    Уникальный идентификатор версии агрегата в формате UUID
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    aggregateDescription: Optional[constr(max_length=1000)] = Field(
        None, examples=['описание агрегата']
    )
    """
    Описание агрегата (бизнес наименование)
    """
    aggregateJson: AggregateJson
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """


class AggregateGetFullView(BaseModel):
    aggregateId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор агрегата в формате UUID
    """
    versionId: UUID = Field(..., examples=['9d4ade21-cf23-4819-ac9d-f052dba69002'])
    """
    Уникальный идентификатор версии агрегата в формате UUID
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    aggregateDescription: Optional[constr(max_length=1000)] = Field(
        None, examples=['описание агрегата']
    )
    """
    Описание агрегата (бизнес наименование)
    """
    aggregateJson: AggregateJson
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    createByUser: Optional[str] = None
    lastChangeByUser: Optional[str] = None


class AggregateGetFullVersionView(BaseModel):
    aggregateId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор агрегата в формате UUID
    """
    versionId: UUID = Field(..., examples=['9d4ade21-cf23-4819-ac9d-f052dba69002'])
    """
    Уникальный идентификатор версии агрегата в формате UUID
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    aggregateDescription: Optional[constr(max_length=1000)] = Field(
        None, examples=['описание агрегата']
    )
    """
    Описание агрегата (бизнес наименование)
    """
    aggregateJson: AggregateJson
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    createByUser: Optional[str] = None
    lastChangeByUser: Optional[str] = None
    versionType: VersionType
    """
    Тип версии
    """
    versionName: Optional[constr(min_length=1, max_length=100)] = Field(
        None, examples=['имя версии']
    )
    """
    Имя версии
    """
    versionDescription: Optional[constr(min_length=1, max_length=1000)] = Field(
        None, examples=['описание версии']
    )
    """
    Описание версии
    """
    rootObjectVersionId: UUID = Field(
        ..., examples=['9d4ade21-cf23-4819-ac9d-f052dba69002']
    )
    """
    Идентификатор родительского объекта версии агрегата в формате UUID
    """


class AggregateCatalogGetFullView(BaseModel):
    aggregateId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор агрегата в формате UUID
    """
    versionId: UUID = Field(..., examples=['9d4ade21-cf23-4819-ac9d-f052dba69002'])
    """
    Уникальный идентификатор версии агрегата в формате UUID
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    aggregateDescription: Optional[constr(max_length=1000)] = Field(
        None, examples=['описание агрегата']
    )
    """
    Описание агрегата (бизнес наименование)
    """
    aggregateJson: AggregateJson
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    elementId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор элемента в формате UUID 4
    """
    catalogFlag: bool = Field(..., examples=[True])
    """
    Признак каталога
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """


class AggregateCatalogPage(BaseModel):
    content: Optional[List[AggregateCatalogGetFullView]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class ExternalServiceUpdateDto(BaseModel):
    """
    Объект для обновления внешнего сервиса
    """

    isAvailableInProperties: Optional[bool] = Field(None, examples=[True])
    """
    Флаг того, что характеристики ВС будут доступны в __PROPERTIES__
    """
    batchFlag: Optional[bool] = Field(None, examples=[False])
    """
    Признак пакетного взаимодействия
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Внешний сервис данных']
    )
    """
    Описание внешнего сервиса
    """
    fileFormat: Optional[FileFormat] = Field(None, examples=['JSON'])
    """
    Формат сообщения
    """
    method: Optional[Method] = Field(None, examples=['GET'])
    """
    Используемый метод взаимодействия
    """
    protocol: Protocol = Field(..., examples=['REST'])
    """
    Протокол доступа
    """
    syncType: SyncType = Field(..., examples=['SYNC'])
    """
    Тип взаимодействия
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    body: Optional[str] = Field(None, examples=['{request_id: {requestid}}'])
    """
    Тело запроса
    """
    serviceSettings: Optional[List[ExternalServiceSettingsFullViewDto]] = None
    headers: Optional[List[ExternalServiceHeaderFullViewDto]] = None
    variables: Optional[List[ExternalServiceVariableFullViewDto]] = None
    versionId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор версии внешнего сервиса в формате UUID 4
    """


class PythonUpdate(BaseModel):
    """
    Объект для обновления скрипта
    """

    scriptText: str = Field(..., examples=['Текст скрипта'])
    """
    Текст скрипта
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    description: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание скрипта']
    )
    """
    Описание скрипта
    """
    variables: Optional[List[ScriptVariableFullView]] = None
    scriptType: ScriptType
    """
    Язык скрипта
    """
    pythonEnvironmentVersionId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор версии окружения python в формате UUID
    """
    scriptId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор скрипта в формате UUID
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии скрипта в формате UUID
    """


class OfferUpdateDto(BaseModel):
    """
    Объект для обновления шаблона предложения
    """

    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    scriptVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор версии скрипта, связанного с шаблоном предложения в формате UUID 4
    """
    scriptName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Код создания предложения Автокредит']
    )
    """
    Имя скрипта, связанного с шаблоном предложения в формате UUID 4
    """
    scriptId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор скрипта, связанного с шаблоном предложения в формате UUID 4
    """
    offerComplexTypeVersionId: UUID = Field(
        ..., examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id комплексного типа предложения
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    offerVariables: Optional[List[OfferVariableFullViewDto]] = None
    versionId: str


class EnvironmentUpdateDto(BaseModel):
    """
    Объект для обновления полей среды развертывания
    """

    environmentName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['prod']
    )
    """
    название среды развертывания
    """
    integrationPlatformEnvSettings: IntegrationPlatformEnvironmentFullViewDto
    stateStoreEnvSettings: StateStoreEnvironmentFullViewDto
    streamingPlatformEnvSettings: StreamingPlatformEnvironmentFullViewDto
    defaultFlag: Optional[bool] = Field(None, examples=[True])
    """
    Флаг дефолтного окружения
    """
    kafkaEnvSettings: KafkaEnvironmentUpdateDto


class DiagramInOutParameterFullViewDto(BaseModel):
    parameterVersionId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор версии входного/выходного параметра
    """
    parameterId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор входного/выходного параметра
    """
    parameterName: constr(max_length=40) = Field(..., examples=['Client'])
    """
    Имя входного/выходного параметра
    """
    dictName: Optional[constr(max_length=100)] = Field(None, examples=['Справочник №1'])
    """
    Наименование справочника
    """
    typeId: constr(min_length=1, max_length=36) = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор примитивного или пользовательского типа входного/выходного параметра.
    """
    dictId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор справочника
    """
    arrayFlag: bool = Field(..., examples=[False])
    """
    Признак массива (true)
    """
    complexFlag: bool = Field(..., examples=[False])
    """
    Признак комплексного типа (true)
    """
    dictFlag: bool = Field(..., examples=[False])
    """
    Признак справочника кастомных типов (true)
    """
    parameterType: ParameterType
    """
    Тип параметра (входной, выходной)
    """
    defaultValue: Optional[str] = Field(None, examples=['12.89'])
    """
    Значение по умолчанию
    """
    functionIds: Optional[List[str]] = Field(
        None, examples=[['f8df6383-c59e-45bb-bc0e-1fe052fe1a68']]
    )
    """
    Множество идентификаторов пользовательских функций, использующихся в поле аварийного ответа
    """
    metaInfo: Optional[InOutParamMetaInfo] = None


class DiagramParameterDto(BaseModel):
    inOutParameters: Optional[List[DiagramInOutParameterFullViewDto]] = None
    innerVariables: Optional[List[DiagramInnerVariableFullViewDto]] = None


class AdditionalParameters(BaseModel):
    key: Optional[str] = None
    rowKey: Optional[str] = None
    isValueFromDict: Optional[bool] = None
    value: Optional[SimpleVariableProperties] = None


class AggregateComputeOutputVariableMapping(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    aggregate: Optional[AggregateComputeProperties] = None


class AggregateReadOutputVariableMapping(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    aggregate: Optional[AggregateReadingProperties] = None


class AggregateReading(Properties):
    parallelism: Optional[int] = None
    groupingElements: Optional[List[GroupingElementsMapping]] = None
    outputVariablesMapping: Optional[List[AggregateReadOutputVariableMapping]] = None


class AggregationNode(Properties):
    partition_by: List[str]
    retention_type: RetentionType
    window_interval: TimeInterval
    time_attribute: Optional[TimeAttribute] = None
    watermark: Optional[Watermark] = None
    mappings: List[FlinkAggregate]


class Calculates(Properties):
    parallelism: Optional[int] = None
    calculate: List[CalculateNodeVariable]


class Catalog(BaseModel):
    name: Optional[str] = None
    type: Type
    warehouse: Optional[str] = None
    uri: Optional[str] = None
    table: Table
    properties: Optional[List[Property]] = None


class CdcMultiTable(BaseModel):
    target_fields: Optional[CdcTargetFields] = None
    type: Optional[Type1] = None


class CdcSimple(BaseModel):
    target_fields: Optional[CdcTargetFields] = None
    type: Optional[Type1] = None


class ColumnFamily(BaseModel):
    name: str
    alias: Optional[str] = None
    qualifiers: List[Qualifier]


class Communication(Properties):
    parallelism: Optional[int] = None
    communicationChannelName: Optional[str] = None
    channelId: Optional[str] = None
    channelVersionId: Optional[str] = None
    communicationFields: Optional[List[TemplateMappingVariable]] = None
    nodeVariablesMapping: Optional[List[ChannelNodeMappingVariable]] = None
    outputVariablesMapping: Optional[List[NodeMappingVariable]] = None


class CommunicationHub(Properties):
    parallelism: Optional[int] = None
    serviceId: Optional[str] = None
    versionId: Optional[str] = None
    inputVariableMapping: Optional[NodeMappingVariable] = None
    errorVariablesMapping: Optional[List[NodeMappingVariable]] = None


class CommunicationHubRead(Properties):
    parallelism: Optional[int] = None
    serviceId: Optional[str] = None
    versionId: Optional[str] = None
    outputVariableMapping: Optional[NodeMappingVariable] = None
    clientId: Optional[VariablePropertiesBase] = None
    clientIdType: Optional[str] = None
    isControlGroup: Optional[bool] = None
    isTargetGroup: Optional[bool] = None
    createdAtBefore: Optional[str] = None
    createdAtAfter: Optional[str] = None
    source: Optional[str] = None
    channel: Optional[List[str]] = None
    embed: Optional[List[EmbedEnum]] = None
    errorVariablesMapping: Optional[List[NodeMappingVariable]] = None
    inputVariablesMapping: Optional[List[NodeMappingVariable]] = None


class CustomCode(Properties):
    parallelism: Optional[int] = None
    customCodeId: Optional[str] = None
    versionId: Optional[str] = None
    scriptType: Optional[ScriptType2] = None
    inputVariablesMapping: Optional[List[NodeMappingVariable]] = None
    outputVariablesMapping: Optional[List[NodeMappingVariable]] = None


class Debezium(BaseModel):
    properties: Optional[List[Property]] = None


class DecisionTable(Properties):
    pass


class Decoding(BaseModel):
    plugin: Optional[Plugin] = None


class ExternalService(Properties):
    parallelism: Optional[int] = None
    serviceId: Optional[str] = None
    versionId: Optional[str] = None
    inputVariablesMapping: Optional[List[NodeMappingVariable]] = None
    outputVariablesMapping: Optional[List[NodeMappingVariable]] = None
    errorVariablesMapping: Optional[List[NodeMappingVariable]] = None


class FileSinkNode(Properties):
    file: Optional[File] = None


class FilterNode(Properties):
    filter: str


class FinishNodeVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    parameter: OutParameterShortInfo


class FlatMapNodeConfig(BaseModel):
    type: Optional[Type3] = None
    debatch: Optional[bool] = None
    missing_data_strategy: Optional[MissingDataStrategy] = None
    output: Optional[Output] = None
    input: Optional[Input] = None


class Fork(Properties):
    branches: Optional[List[DefaultBranch]] = None
    defaultJoinPath: Optional[DefaultBranch] = None


class GroovyNode(Properties):
    script_text: str
    additional_schema: str
    in_: List[str] = Field(..., alias='in')
    out: List[str]
    execution_options: Optional[ExecutionOptions] = None


class GroupingNode(Properties):
    mapping: List[MappingOperation]
    group_by: str
    having: Optional[str] = None
    window: Optional[GroupingWindow] = None


class HBaseLookupNode(Properties):
    connection_uuid: UUID
    enrichment_type: EnrichmentType
    table_name: str
    key: str
    column_family_list: List[ColumnFamily]
    execution_options: Optional[ExecutionOptions] = None


class HBaseSinkNode(Properties):
    connection_uuid: UUID
    table_name: str
    key: str
    column_family_list: List[ColumnFamily]
    execution_options: Optional[ExecutionOptions] = None


class IcebergSinkNode(Properties):
    catalog: Catalog
    write: Optional[Write] = None


class JoinFlowNodeVariableMapping(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    variableToMergeName: Optional[str] = None
    arrayVariable: Optional[SimpleVariableProperties] = None
    variablePathWithOutRoot: Optional[str] = None


class JoinNode(Properties):
    join_type: JoinType
    mapping: List[MappingOperation]
    join_condition: str
    left_stream: JoinStream
    right_stream: JoinStream


class KafkaSinkKafkaNodeCfg(BaseModel):
    producer: KafkaSinkProducerCfg


class MappingNode(Properties):
    mapping: List[MappingOperation]


class NodeMetaInfo(BaseModel):
    """
    JSON-настройки отображения
    """

    position: Optional[Position] = None
    shape: Optional[Shape] = None
    extent: Optional[str] = None
    """
    Параметр для группировки
    """
    parentNode: Optional[str] = None
    """
    Указатель на родителя
    """
    blockInnerMeta: Optional[str] = None
    """
    Внутренняя метаинформация узла
    """


class Offer(Properties):
    parallelism: Optional[int] = None
    offerId: Optional[str] = None
    offerName: Optional[str] = None
    versionId: Optional[str] = None
    offerComplexTypeVersionId: Optional[str] = None
    offerVariables: Optional[List[TemplateMappingVariable]] = None
    nodeVariablesMapping: Optional[List[OfferNodeMappingVariable]] = None
    outputVariableMapping: Optional[NodeMappingVariable] = None


class OfferStorageRead(Properties):
    parallelism: Optional[int] = None
    serviceId: Optional[str] = None
    versionId: Optional[str] = None
    serviceType: Optional[ServiceType1] = None
    offerReadOutputVariableMapping: Optional[NodeMappingVariable] = None
    externalOfferId: Optional[NodeMappingVariable] = None
    clientId: Optional[NodeMappingVariable] = None
    clientIdType: Optional[str] = None
    activeChannel: Optional[bool] = None
    active: Optional[bool] = None
    control: Optional[bool] = None
    getDefaultOffers: Optional[bool] = None
    offerCount: Optional[int] = None
    errorVariablesMapping: Optional[List[NodeMappingVariable]] = None


class OfferStorageWrite(Properties):
    parallelism: Optional[int] = None
    serviceId: Optional[str] = None
    versionId: Optional[str] = None
    offerVariableMapping: Optional[NodeMappingVariable] = None
    continueWithPartialWrittenOffers: Optional[bool] = None
    errorVariablesMapping: Optional[List[NodeMappingVariable]] = None


class Partition(BaseModel):
    partition_type: Optional[PartitionType] = None
    values: Optional[List[List[str]]] = None
    field_name: Optional[str] = None
    range: Optional[Range] = None


class PolicyRead(Properties):
    parallelism: Optional[int] = None
    serviceId: Optional[str] = None
    versionId: Optional[str] = None
    outputVariableMapping: Optional[VariablePropertiesBase] = None
    dryRun: Optional[bool] = None
    weak: Optional[bool] = None
    isInstantDispatch: Optional[bool] = None
    contactDateTime: Optional[ContactDateTimeNodeVariable] = None
    additionalParameters: Optional[List[AdditionalParameters]] = None
    clientParameters: Optional[List[AdditionalParameters]] = None
    errorVariablesMapping: Optional[List[NodeMappingVariable]] = None


class ReadMappingVariable(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: Optional[bool] = None
    isComplex: Optional[bool] = None
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    nodeVariable: Optional[str] = None
    externalId: Optional[str] = None
    isJdbcArrayKey: Optional[bool] = None
    arrayVariable: Optional[WriteReadVariableProperties] = None
    nodeVariableType: Optional[str] = None


class Ruleset(Properties):
    parallelism: Optional[int] = None
    ruleVariable: Optional[RulesetVariableProperties] = None
    rules: Optional[List[RulesetProperties]] = None


class Scorecard(Properties):
    outputVariable: Optional[ScorecardOutputVariable] = None
    inputVariablesMapping: Optional[List[ScorecardInputVariable]] = None


class Server(BaseModel):
    time: Optional[Time] = None


class Ssl(BaseModel):
    truststore: Optional[Store] = None
    keystore: Optional[Store] = None
    key: Optional[Key] = None


class Start(Properties):
    parallelism: Optional[int] = None
    mappingVariables: Optional[List[StartNodeVariable]] = None


class Statement(BaseModel):
    query: constr(
        pattern=r'^\s*insert\s+into\s+[a-z\d._]+\s*(\(.*?\))?\s+values\s*\(.*?\)\s*$'
    )
    table: Table


class TarantoolReadByIndexInputMappingVariable(BaseModel):
    rowKey: Optional[str] = None
    indexName: Optional[str] = None
    predicate: Optional[Predicate] = None
    order: Optional[int] = None
    inputVariablesMapping: Optional[List[TarantoolReadInputMappingVariable]] = None


class WriteFilterVariableProperties(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    expression: Optional[str] = None
    filterSign: Optional[FilterSign] = None
    arrayVariable: Optional[WriteReadVariableProperties] = None


class WriteNodeVariableMapping(BaseModel):
    id: Optional[str] = None
    rowKey: Optional[str] = None
    variableName: Optional[str] = None
    typeId: Optional[str] = None
    dictId: Optional[str] = None
    isArray: bool
    isComplex: bool
    isDict: Optional[bool] = None
    isLiteral: Optional[bool] = None
    variablePath: Optional[str] = None
    variableRootId: Optional[str] = None
    arrayVariable: Optional[WriteReadVariableProperties] = None
    nodeVariable: Optional[DataSourceVariable] = None


class CustomAttributeDictionaryUpdate(BaseModel):
    """
    Объект для обновления справочника
    """

    dictName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Справочник №1']
    )
    """
    Имя справочника
    """
    dictValueTypeId: constr(min_length=1, max_length=1) = Field(..., examples=['1'])
    """
    Идентификатор типа значений справочника
    """
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор справочника в формате UUID 4
    """
    values: List[CustomAttributeDictionaryValueUpdate]


class CommunicationChannelUpdateDto(BaseModel):
    """
    Объект для обновления канала коммуникации
    """

    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Канал коммуникации PUSH']
    )
    """
    Описание канала коммуникации
    """
    scriptVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор версии скрипта, связанного с каналом коммуникации в формате UUID 4
    """
    communicationVariables: Optional[List[CommunicationVariableFullViewDto]] = None


class JsonGenerationValidationDto(BaseModel):
    expression: str
    """
    Валидируемое выражение
    """
    functionIds: Optional[List[str]] = None
    """
    Идентификаторы используемых в выражении пользовательских функций
    """
    json_: Optional[str] = Field(None, alias='json')
    """
    Заполненный json
    """
    calculatedParameter: JsonGenerationVariableDto
    jsonVariables: Optional[List[JsonGenerationVariableDto]] = None
    """
    Параметры, используемые в выражении
    """


class ExternalServiceCreateDto(BaseModel):
    isAvailableInProperties: Optional[bool] = Field(None, examples=[True])
    """
    Флаг того, что характеристики ВС будут доступны в __PROPERTIES__
    """
    batchFlag: Optional[bool] = Field(None, examples=[False])
    """
    Признак пакетного взаимодействия
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Внешний сервис данных']
    )
    """
    Описание внешнего сервиса
    """
    fileFormat: Optional[FileFormat] = Field(None, examples=['JSON'])
    """
    Формат сообщения
    """
    method: Optional[Method] = Field(None, examples=['GET'])
    """
    Используемый метод взаимодействия
    """
    protocol: Protocol3 = Field(..., examples=['REST'])
    """
    Протокол доступа
    """
    syncType: SyncType = Field(..., examples=['SYNC'])
    """
    Тип взаимодействия
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    body: Optional[str] = Field(None, examples=['{request_id: {requestid}}'])
    """
    Тело запроса
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    serviceSettings: Optional[List[ExternalServiceSettingsViewWithoutIdDto]] = None
    headers: Optional[List[ExternalServiceHeaderViewWithoutIdDto]] = None
    variables: Optional[List[ExternalServiceVariableViewWithoutIdDto]] = None


class PythonCreate(BaseModel):
    scriptText: str = Field(..., examples=['Текст скрипта'])
    """
    Текст скрипта
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    description: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['описание скрипта']
    )
    """
    Описание скрипта
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    variables: Optional[List[ScriptVariableViewWithoutVersionIdDto]] = None
    pythonEnvironmentVersionId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор версии окружения python в формате UUID
    """


class PythonEnvironmentCreateDto(BaseModel):
    name: constr(min_length=1, max_length=100) = Field(..., examples=['питон'])
    """
    Имя окружения python
    """
    pythonVersionId: constr(min_length=36, max_length=36) = Field(
        ..., examples=['597e4cc3-98d2-42a6-9209-e803417fcba7']
    )
    """
    Идентификатор версии python
    """
    requirementsTxt: Optional[str] = Field(None, examples=['pandas==0.2.0'])
    """
    Текст файла requirements.txt
    """
    pythonEnvironmentSettings: Optional[List[PythonEnvironmentSettingsWithoutIdDto]] = (
        None
    )


class RestSourceCreateDto(BaseModel):
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['REST источник']
    )
    """
    Описание REST источника
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    restSourceSettings: Optional[List[RestSourceSettingsViewWithoutIdDto]] = None
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """


class OfferCreateDto(BaseModel):
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    scriptVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор версии скрипта, связанного с шаблоном предложения в формате UUID 4
    """
    scriptName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Код создания предложения Автокредит']
    )
    """
    Имя скрипта, связанного с шаблоном предложения в формате UUID 4
    """
    scriptId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор скрипта, связанного с шаблоном предложения в формате UUID 4
    """
    offerComplexTypeVersionId: UUID = Field(
        ..., examples=['8b0a1ac9-d33e-4d33-8f7f-30e17c82a80d']
    )
    """
    Id комплексного типа предложения
    """
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """
    offerVariables: Optional[List[OfferVariableWithoutIdDto]] = None


class ConfirmImportAllObjectInfo(BaseModel):
    deploys: Optional[List[ConfirmImportObjectInfo]] = None
    diagrams: Optional[List[ConfirmImportObjectInfo]] = None
    complexTypes: Optional[List[ConfirmImportObjectInfo]] = None
    dictionaries: Optional[List[ConfirmImportObjectInfo]] = None
    scripts: Optional[List[ConfirmImportObjectInfo]] = None
    externalServices: Optional[List[ConfirmImportObjectInfo]] = None
    aggregates: Optional[List[ConfirmImportObjectInfo]] = None
    dataProviders: Optional[List[ConfirmImportObjectInfo]] = None
    communications: Optional[List[ConfirmImportObjectInfo]] = None
    offers: Optional[List[ConfirmImportObjectInfo]] = None


class ConfirmImportResponseDto(BaseModel):
    objectsInfo: Optional[ConfirmImportAllObjectInfo] = None
    fileName: Optional[str] = None


class SelectedImportDto(BaseModel):
    objectsInfo: SelectedImportStatusDto
    fileName: str


class ImportResponseDto(BaseModel):
    importStatus: Optional[SelectedImportDto] = None
    totalNumberOfObjects: Optional[int] = None
    numberOfSelectedObjects: Optional[int] = None
    numberOfImportedObjects: Optional[int] = None


class KafkaCreateDto(BaseModel):
    name: constr(min_length=0, max_length=100) = Field(..., examples=['local kafka'])
    """
    Имя kafka
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Kafka для тестирования']
    )
    """
    Описание kafka
    """
    kafkaSettings: Optional[List[KafkaSettingsWithoutIdDto]] = None


class EnvironmentCreateDto(BaseModel):
    environmentName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['prod']
    )
    """
    название среды развертывания
    """
    integrationPlatformEnvSettings: IntegrationPlatformEnvironmentFullViewDto
    stateStoreEnvSettings: StateStoreEnvironmentFullViewDto
    streamingPlatformEnvSettings: StreamingPlatformEnvironmentFullViewDto
    defaultFlag: Optional[bool] = Field(None, examples=[True])
    """
    Флаг дефолтного окружения
    """
    kafkaEnvSettings: KafkaEnvironmentCreateDto


class NodeViewShortInfo(BaseModel):
    nodeId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор узла
    """
    nodeName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Узел первичной фильтрации']
    )
    """
    Имя узла
    """
    validFlag: bool = Field(..., examples=[False])
    """
    Признак корректности узла
    """
    nodeTypeId: int = Field(..., examples=[10])
    """
    Уникальный идентификатор типа узла
    """
    inputLinks: Optional[List[str]] = None
    outputLinks: Optional[List[str]] = None
    metaInfo: Optional[NodeMetaInfo] = None


class DeployConfigurationFullDto(BaseModel):
    deployType: DeployType
    """
    Тип деплоя
    """
    deployId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор деплоя в формате UUID 4
    """
    diagramId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор диаграммы в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    lastConfigDeployId: Optional[str] = None
    parallelism: int = Field(..., examples=[2])
    """
    Параллелизм
    """
    detailedLogging: Optional[bool] = Field(None, examples=[True])
    """
    Включение подробного логирования
    """
    taskManagerMemory: int = Field(..., examples=[512])
    """
    Память task manager в мегабайтах
    """
    jobManagerMemory: int = Field(..., examples=[512])
    """
    Память job manager в мегабайтах
    """
    arguments: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['-Djob.manager.key=value']
    )
    """
    Параметры запуска Флинк
    """
    taskManagerCpuLimit: Optional[float] = Field(None, examples=[1])
    """
    Выделяемый ресурс ядер на диаграмму task manager (верхняя граница)
    """
    taskManagerCpu: Optional[float] = Field(None, examples=[1])
    """
    Выделяемый ресурс ядер на диаграмму task manager (базово-запрашиваемое число)
    """
    jobManagerCpuLimit: Optional[float] = Field(None, examples=[1])
    """
    Выделяемый ресурс ядер на диаграмму job manager (верхняя граница)
    """
    jobManagerCpu: Optional[float] = Field(None, examples=[1])
    """
    Выделяемый ресурс ядер на диаграмму job manager (базово-запрашиваемое число)
    """
    parallelDeployFlag: Optional[bool] = Field(None, examples=[True])
    """
    Параметр параллельного деплоя
    """
    callUri: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор вызова диаграммы в формате UUID 4
    """
    timeout: Optional[int] = Field(None, examples=[100])
    """
    Тайм-аут исполнения диаграммы
    """
    replicationCount: conint(ge=1) = Field(..., examples=[2])
    """
    Количество репликаций
    """
    useLastTopics: Optional[bool] = Field(None, examples=[True])
    """
    Использовать последние топики
    """
    deployVariables: Optional[List[DeployVariablesFullDto]] = None
    subDiagramConfigurations: Optional[List[DeployConfigurationFullDto]] = None


class DiagramInOutParametersViewDto(BaseModel):
    diagramId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор диаграммы в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'])
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """
    lastChangeByUser: Optional[str] = None
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    diagramDescription: Optional[constr(min_length=0, max_length=2000)] = Field(
        None, examples=['Диаграмма обладает функционалом и выполняет...']
    )
    """
    Описание диаграммы
    """
    createByUser: Optional[str] = None
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    inOutParameters: Optional[List[DiagramInOutParameterFullViewDto]] = None
    errorResponseFlag: bool = Field(..., examples=[True])
    """
    Флаг обработки аварийного ответа
    """
    id: Optional[str] = None


class DataProviderCreateDto(BaseModel):
    sourceName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Витрина данных']
    )
    """
    Имя источника данных
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Операционная БД']
    )
    """
    Описание источника данных
    """
    sourceType: SourceType = Field(..., examples=['ORACLE'])
    """
    Тип источника данных
    """
    connectionType: ConnectionType = Field(..., examples=['JDBC'])
    """
    Тип соединения
    """
    settings: Optional[List[DataProviderSettingsViewWithoutIdDto]] = None


class CustomAttributeDictionaryCreate(BaseModel):
    dictName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Справочник №1']
    )
    """
    Имя справочника
    """
    dictValueTypeId: constr(min_length=1, max_length=1) = Field(..., examples=['1'])
    """
    Идентификатор типа значений справочника
    """
    values: List[CustomAttributeDictionaryValueCreate]


class CommunicationChannelCreateDto(BaseModel):
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Канал коммуникации PUSH']
    )
    """
    Описание канала коммуникации
    """
    scriptVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор версии скрипта, связанного с каналом коммуникации в формате UUID 4
    """
    communicationVariables: Optional[List[CommunicationVariableViewWithoutIdDto]] = None
    catalogId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор каталога в формате UUID 4
    """


class UserFunctionPage(BaseModel):
    content: Optional[List[UserFunctionShortInfo]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class UserFunctionCatalogPage(BaseModel):
    content: Optional[List[UserFunctionCatalogShortInfo]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class TestCaseDebugNodeInfoFullView(BaseModel):
    """
    Отладочная информация по узлам (ключ - уникальный идентификатор узла)
    """

    successFlag: bool = Field(..., examples=[True])
    """
    Признак успешного прохождения заявки через узел (в случае ошибки - false)
    """
    inputData: Optional[List[TestCaseNodeInputDataFullView]] = None
    calculatedData: Optional[str] = Field(None, examples=['{"vyhod1":1,"vyhod2":1}'])
    """
    Рассчитанные на узле данные
    """
    errorMessage: Optional[str] = Field(None, examples=['Exception occurred'])
    """
    Информация об ошибке
    """


class ExternalServicePage(BaseModel):
    content: Optional[List[ExternalServiceShortInfoDto]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class ExternalServiceCatalogPage(BaseModel):
    content: Optional[List[ExternalServiceCatalogShortInfoDto]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class ScriptPage(BaseModel):
    content: Optional[List[ScriptShortInfoDto]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class ScriptCatalogPage(BaseModel):
    content: Optional[List[ScriptCatalogShortInfoDto]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class PythonEnvironmentPage(BaseModel):
    content: Optional[List[PythonEnvironmentShortInfoDto]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class RestSourcePage(BaseModel):
    content: Optional[List[RestSourceShortInfoDto]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class RestSourceCatalogPage(BaseModel):
    content: Optional[List[RestSourceCatalogShortInfoDto]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class AttributeFullViewDto(BaseModel):
    key: constr(max_length=100) = Field(..., examples=['Attribute key'])
    """
    Техническое название атрибута
    """
    name: constr(max_length=100) = Field(..., examples=['Attribute value'])
    """
    Название канала атрибута
    """
    type: constr(max_length=100) = Field(..., examples=['IDENTIFIER'])
    """
    Название типа атрибута
    """
    values: List[AttributeValuesFullViewDto]


class OfferPage(BaseModel):
    content: Optional[List[OfferShortInfoDto]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class ObjectRelationPage(BaseModel):
    content: Optional[List[ObjectRelationsFullViewDto]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class KafkaPage(BaseModel):
    content: Optional[List[KafkaShortInfoDto]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class EnvironmentFullViewDto(BaseModel):
    environmentId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор среды развертывания в формате UUID 4
    """
    environmentName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['prod']
    )
    """
    название среды развертывания
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    createByUser: Optional[str] = None
    lastChangeByUser: str
    defaultFlag: Optional[bool] = Field(None, examples=[True])
    """
    Флаг дефолтного окружения
    """
    streamingPlatformEnvSettings: StreamingPlatformEnvironmentFullViewDto
    integrationPlatformEnvSettings: IntegrationPlatformEnvironmentFullViewDto
    kafkaEnvSettings: KafkaEnvironmentFullViewDto
    stateStoreEnvSettings: StateStoreEnvironmentFullViewDto


class NodeViewWithVariablesDto(BaseModel):
    nodeId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор узла
    """
    nodeName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Узел первичной фильтрации']
    )
    """
    Имя узла
    """
    nodeDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['Узел фильтрации данных по первичному признаку']
    )
    """
    Описание узла
    """
    validFlag: bool = Field(..., examples=[False])
    """
    Признак корректности узла
    """
    nodeTypeId: int = Field(..., examples=[10])
    """
    Уникальный идентификатор типа узла
    """
    properties: Optional[Properties] = None
    inputLinks: Optional[List[str]] = None
    outputLinks: Optional[List[str]] = None
    metaInfo: Optional[NodeMetaInfo] = None
    validationPayload: Optional[NodeValidationPayload] = None
    availableToMap: Optional[List[VariableViewDto]] = None
    availableToCalc: Optional[List[VariableViewDto]] = None


class DiagramCatalogPage(BaseModel):
    content: Optional[List[DiagramCatalogShortInfoView]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class DeployInnerInfo(BaseModel):
    deployId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор деплоя в формате UUID 4
    """
    diagram: Optional[DiagramVersionNameView] = None
    deployStatus: DeployStatus
    """
    Статус деплоя
    """


class DeployViewDto(BaseModel):
    deployId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор деплоя в формате UUID 4
    """
    diagram: Optional[DiagramVersionNameView] = None
    deployStatus: DeployStatus
    """
    Статус деплоя
    """
    deployDt: AwareDatetime
    """
    Дата Время деплоя
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    deployUser: str = Field(..., examples=['Иван Иванов'])
    """
    Пользователь, задеплоивший диаграмму
    """
    createUser: str = Field(..., examples=['Иван Иванов'])
    """
    Пользователь, задеплоивший диаграмму
    """
    deployType: DeployType
    """
    Тип деплоя
    """
    callUri: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Идентификатор вызова диаграммы в формате UUID 4
    """
    flinkTrackingUrl: Optional[str] = None
    childDeploys: Optional[List[DeployInnerInfo]] = None
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None


class DataProviderGetFullViewWithTables(BaseModel):
    sourceId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор источника данных в формате UUID 4
    """
    sourceName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Витрина данных']
    )
    """
    Имя источника данных
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    description: Optional[constr(min_length=0, max_length=200)] = Field(
        None, examples=['Операционная БД']
    )
    """
    Описание источника данных
    """
    sourceType: SourceType = Field(..., examples=['ORACLE'])
    """
    Тип источника данных
    """
    connectionType: ConnectionType = Field(..., examples=['JDBC'])
    """
    Тип соединения
    """
    settings: Optional[List[DataProviderSettingsFullViewDto]] = None
    tables: Optional[List[TablesDto]] = None
    isConnectionSucceeded: Optional[bool] = Field(None, examples=[True])
    """
    Признак успещного соединения
    """


class CustomAttributeDictionaryPage(BaseModel):
    content: Optional[List[CustomAttributeDictionaryShortInfo]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class CustomAttributeDictionaryFullView(BaseModel):
    id: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор справочника в формате UUID 4
    """
    dictName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Справочник №1']
    )
    """
    Имя справочника
    """
    dictValueTypeId: constr(min_length=1, max_length=1) = Field(..., examples=['1'])
    """
    Идентификатор типа значений справочника
    """
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    lastChangeByUser: Optional[str] = None
    createByUser: Optional[str] = None
    values: List[CustomAttributeDictionaryValueFullView]


class ComplexTypeCatalogPage(BaseModel):
    content: Optional[List[ComplexTypeCatalogShortView]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class CommunicationCatalogPage(BaseModel):
    content: Optional[List[CommunicationChannelCatalogShortInfoDto]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class CatalogPage(BaseModel):
    content: Optional[List[CatalogShortView]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class AggregatePage(BaseModel):
    content: Optional[List[AggregateShortView]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class AggregateCompute(Properties):
    parallelism: Optional[int] = None
    groupingElements: Optional[List[GroupingElementsMapping]] = None
    outputVariablesMapping: Optional[List[AggregateComputeOutputVariableMapping]] = None
    retentionTimeField: Optional[str] = None
    retentionType: Optional[RetentionType] = None
    retentionTimeValue: Optional[int] = None
    retentionTimeUnit: Optional[RetentionTimeUnit] = None
    watermarkType: Optional[WatermarkType] = None
    duration: Optional[int] = None
    coefficient: Optional[float] = None


class CdcApplyMultiTableNode(Properties):
    jdbc_connection_uuid: Optional[UUID] = None
    cdc: Optional[CdcMultiTable] = None
    execution_options: Optional[ExecutionOptions] = None


class CdcMongoDbNode(Properties):
    connection_uuid: UUID
    table_name: str
    timezone: Optional[str] = None
    debezium: Optional[Debezium] = None


class CdcMsSqlNode(Properties):
    jdbc_connection_uuid: UUID
    timezone: Optional[str] = None
    table_schema: Optional[str] = None
    table_name: str
    debezium: Optional[Debezium] = None


class Finish(Properties):
    mappingVariables: Optional[List[FinishNodeVariable]] = None


class FlatMapNode(Properties):
    flatmap: Optional[FlatMapNodeConfig] = None


class Jdbc(BaseModel):
    statement: Statement


class JdbcLookupNode(Properties):
    jdbc_connection_uuid: str
    lookup: Lookup
    query_type: QueryType
    jdbc: Jdbc
    key_mappings: Optional[List[FieldMapping]] = Field(None, max_length=1, min_length=1)
    field_mappings: Optional[List[FieldMapping]] = Field(
        None, max_length=2147483647, min_length=1
    )
    execution_options: Optional[ExecutionOptions] = None


class JdbcParallelSourceNode(Properties):
    jdbc_connection_uuid: UUID
    jdbc: Jdbc
    execution_options: Optional[ExecutionOptions] = None


class JdbcPostgresSourceNode(Properties):
    jdbc_connection_uuid: UUID
    jdbc: Jdbc
    execution_options: Optional[ExecutionOptions] = None


class JdbcRead(Properties):
    parallelism: Optional[int] = None
    dataProviderUuid: Optional[str] = None
    timeout: Optional[int] = None
    maxRetries: Optional[int] = None
    selectedTableNames: Optional[List[str]] = None
    allowMultiResultResponse: Optional[bool] = None
    outputVariablesMapping: List[ReadMappingVariable]
    query: Optional[str] = None


class JdbcSinkNode(Properties):
    jdbc_connection_uuid: UUID
    execution_options: Optional[ExecutionOptions] = None
    jdbc: Jdbc


class JdbcStatement(BaseModel):
    input_type: InputType
    parameter_types: Optional[List[str]] = None
    query: Optional[str] = None
    fetch_size: Optional[int] = None
    table: Optional[TableWithFilter] = None
    partition: Optional[Partition] = None


class JdbcWrite(Properties):
    parallelism: Optional[int] = None
    dataProviderUuid: Optional[str] = None
    timeout: Optional[int] = None
    maxRetries: Optional[int] = None
    tableName: Optional[str] = None
    schemaName: Optional[str] = None
    queryType: Optional[QueryType1] = None
    arrayFlag: Optional[bool] = None
    syncWriteFlag: Optional[bool] = None
    inputVariablesUpdateMapping: Optional[List[WriteNodeVariableMapping]] = None
    inputVariablesConditionMapping: Optional[List[WriteNodeVariableMapping]] = None
    filterVariables: Optional[List[WriteFilterVariableProperties]] = None


class JoinFlow(Properties):
    parallelism: Optional[int] = None
    joinConditionType: Optional[JoinConditionType] = None
    timeout: Optional[int] = None
    mergeArrays: Optional[bool] = None
    specifyKeys: Optional[bool] = None
    branches: Optional[List[Branch]] = None
    keyVariableMapping: Optional[List[JoinFlowNodeVariableMapping]] = None


class Postgres(BaseModel):
    server: Optional[Server] = None
    changelog: Optional[Changelog] = None
    slot: Optional[Slot] = None
    decoding: Optional[Decoding] = None
    table: Table
    username: Optional[str] = None
    password: Optional[str] = None
    url: Optional[str] = None


class SecurityCfg(BaseModel):
    protocol: Optional[Protocol2] = None
    ssl: Optional[Ssl] = None


class TarantoolRead(Properties):
    parallelism: Optional[int] = None
    dataProviderUuid: Optional[str] = None
    timeout: Optional[int] = None
    maxRetries: Optional[int] = None
    selectedTableNames: Optional[List[str]] = None
    allowMultiResultResponse: Optional[bool] = None
    outputVariablesMapping: List[ReadMappingVariable]
    searchType: Optional[SearchType] = None
    dataProviderName: Optional[str] = None
    selectedSearcherName: Optional[str] = None
    inputVariablesMapping: Optional[List[TarantoolReadInputMappingVariable]] = None
    readByIndexInputMappingVariables: Optional[
        List[TarantoolReadByIndexInputMappingVariable]
    ] = None
    luaResultType: Optional[LuaResultType] = None


class TarantoolWrite(Properties):
    parallelism: Optional[int] = None
    dataProviderUuid: Optional[str] = None
    timeout: Optional[int] = None
    maxRetries: Optional[int] = None
    tableName: Optional[str] = None
    schemaName: Optional[str] = None
    queryType: Optional[QueryType1] = None
    arrayFlag: Optional[bool] = None
    syncWriteFlag: Optional[bool] = None
    inputVariablesUpdateMapping: Optional[List[WriteNodeVariableMapping]] = None
    inputVariablesConditionMapping: Optional[List[WriteNodeVariableMapping]] = None
    filterVariables: Optional[List[WriteFilterVariableProperties]] = None
    selectedIndexName: Optional[str] = None


class DiagramViewDto(BaseModel):
    diagramId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Идентификатор диаграммы в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['7d96348c-0724-4eab-a0d6-8706b1acfa77'])
    """
    Уникальный идентификатор версии диаграммы в формате UUID 4
    """
    lastChangeByUser: Optional[str] = None
    changeDt: AwareDatetime
    """
    Дата Время обновления
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    diagramDescription: Optional[constr(min_length=0, max_length=2000)] = Field(
        None, examples=['Диаграмма обладает функционалом и выполняет...']
    )
    """
    Описание диаграммы
    """
    versionType: VersionType
    """
    Тип версии
    """
    nodes: Optional[Dict[str, NodeViewShortInfo]] = None
    links: Optional[Dict[str, LinkViewDto]] = None
    metaInfo: Optional[DiagramMetaInfo] = None
    createByUser: Optional[str] = None
    createDt: AwareDatetime
    """
    Дата Время создания
    """
    errorResponseFlag: bool = Field(..., examples=[True])
    """
    Флаг обработки аварийного ответа
    """


class NodesPasteResponseDto(BaseModel):
    diagram: Optional[DiagramViewDto] = None
    nodeIds: Optional[List[str]] = None
    """
    Идентификаторы вставленных узлов
    """
    linkIds: Optional[List[str]] = None
    """
    Идентификаторы вставленных линков
    """
    oldParameters: Optional[List[DiagramInOutParameterFullViewDto]] = None
    """
    Параметры диаграммы до вставки в нее новых узлов
    """


class TestCaseDebugFullView(BaseModel):
    diagramVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор версии диаграммы
    """
    testName: str = Field(..., examples=['test_01'])
    """
    Имя теста
    """
    testCaseNumber: Optional[int] = Field(None, examples=[22])
    """
    Номер тестового набора
    """
    debugNodeInfo: Optional[Dict[str, TestCaseDebugNodeInfoFullView]] = None
    """
    Отладочная информация по узлам (ключ - уникальный идентификатор узла)
    """


class DeployPage(BaseModel):
    content: Optional[List[DeployViewDto]] = None
    currentPageNumber: Optional[int] = None
    totalElements: Optional[int] = None
    totalPages: Optional[int] = None


class Cdc(BaseModel):
    postgres: Postgres


class CdcOracleMultiTableNode(Properties):
    jdbc_connection_uuid: UUID
    cdc: Cdc
    debezium: Optional[Debezium] = None


class CdcOracleNode(Properties):
    jdbc_connection_uuid: UUID
    cdc: Cdc
    debezium: Optional[Debezium] = None


class CdcPostgresMultiTableNode(Properties):
    jdbc_connection_uuid: UUID
    cdc: Cdc
    debezium: Optional[Debezium] = None


class CdcPostgresNode(Properties):
    jdbc_connection_uuid: UUID
    cdc: Cdc
    debezium: Optional[Debezium] = None


class ClickHouseSinkNode(Properties):
    connection_uuid: UUID
    jdbc: Jdbc
    execution_options: Optional[ExecutionOptions] = None


class JdbcSimple(BaseModel):
    connection: Optional[JdbcConnection] = None
    statement: Optional[JdbcStatement] = None


class KafkaSinkNode(Properties):
    kafka_connection_uuid: UUID
    execution_options: Optional[ExecutionOptions] = None
    serde: Optional[SinkSerde] = None
    kafka: KafkaSinkKafkaNodeCfg
    security: Optional[SecurityCfg] = None


class KafkaSourceNode(Properties):
    kafka_connection_uuid: UUID
    schema_: str = Field(..., alias='schema')
    execution_options: Optional[ExecutionOptions] = None
    boundedness: Boundedness
    serde: Optional[SourceSerde] = None
    kafka: KafkaSourceKafkaNodeCfg
    security: Optional[SecurityCfg] = None


class CdcApplyNode(Properties):
    jdbc_connection_uuid: Optional[UUID] = None
    cdc: Optional[CdcSimple] = None
    execution_options: Optional[ExecutionOptions] = None
    jdbc: Optional[JdbcSimple] = None


class NodeUpdateDto(BaseModel):
    """
    Объект для обновления узла диаграммы
    """

    nodeTypeId: int = Field(..., examples=[10])
    """
    Уникальный идентификатор типа узла
    """
    diagramVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор диаграммы в формате UUID 4
    """
    nodeName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Узел первичной фильтрации']
    )
    """
    Имя узла
    """
    nodeDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['Узел фильтрации данных по первичному признаку']
    )
    """
    Описание узла
    """
    properties: Optional[
        Union[
            AggregateCompute,
            AggregateReading,
            AggregationNode,
            Calculates,
            CdcApplyMultiTableNode,
            CdcApplyNode,
            CdcMongoDbNode,
            CdcMsSqlNode,
            CdcOracleMultiTableNode,
            CdcOracleNode,
            CdcPostgresMultiTableNode,
            CdcPostgresNode,
            ClickHouseSinkNode,
            Communication,
            CommunicationHub,
            CommunicationHubRead,
            CustomCode,
            DecisionTable,
            ExternalService,
            FileSinkNode,
            FilterNode,
            Finish,
            FlatMapNode,
            Fork,
            GroovyNode,
            GroupingNode,
            HBaseLookupNode,
            HBaseSinkNode,
            IcebergSinkNode,
            JdbcLookupNode,
            JdbcParallelSourceNode,
            JdbcPostgresSourceNode,
            JdbcRead,
            JdbcSinkNode,
            JdbcWrite,
            JoinFlow,
            JoinNode,
            KafkaSinkNode,
            KafkaSourceNode,
            MappingNode,
            Offer,
            OfferStorageRead,
            OfferStorageWrite,
            PolicyRead,
            PythonNode,
            RestSourceNode,
            Ruleset,
            Scorecard,
            Start,
            Subdiagram,
            TarantoolRead,
            TarantoolWrite,
            UnionNode,
        ]
    ] = None
    metaInfo: Optional[NodeMetaInfo] = None
    validFlag: bool = Field(..., examples=[False])
    """
    Признак корректности узла
    """
    addedVariables: Optional[List[VariableViewDto]] = None


class NodeValidateDto(BaseModel):
    """
    Объект для валидации узла диаграммы
    """

    nodeTypeId: int = Field(..., examples=[10])
    """
    Уникальный идентификатор типа узла
    """
    properties: Optional[
        Union[
            AggregateCompute,
            AggregateReading,
            AggregationNode,
            Calculates,
            CdcApplyMultiTableNode,
            CdcApplyNode,
            CdcMongoDbNode,
            CdcMsSqlNode,
            CdcOracleMultiTableNode,
            CdcOracleNode,
            CdcPostgresMultiTableNode,
            CdcPostgresNode,
            ClickHouseSinkNode,
            Communication,
            CommunicationHub,
            CommunicationHubRead,
            CustomCode,
            DecisionTable,
            ExternalService,
            FileSinkNode,
            FilterNode,
            Finish,
            FlatMapNode,
            Fork,
            GroovyNode,
            GroupingNode,
            HBaseLookupNode,
            HBaseSinkNode,
            IcebergSinkNode,
            JdbcLookupNode,
            JdbcParallelSourceNode,
            JdbcPostgresSourceNode,
            JdbcRead,
            JdbcSinkNode,
            JdbcWrite,
            JoinFlow,
            JoinNode,
            KafkaSinkNode,
            KafkaSourceNode,
            MappingNode,
            Offer,
            OfferStorageRead,
            OfferStorageWrite,
            PolicyRead,
            PythonNode,
            RestSourceNode,
            Ruleset,
            Scorecard,
            Start,
            Subdiagram,
            TarantoolRead,
            TarantoolWrite,
            UnionNode,
        ]
    ] = None
    addedVariables: Optional[List[VariableViewDto]] = None


class NodeRemapDto(BaseModel):
    """
    Объект для ремапинга свойств узла диаграммы
    """

    nodeTypeId: int = Field(..., examples=[10])
    """
    Уникальный идентификатор типа узла
    """
    properties: Optional[
        Union[
            AggregateCompute,
            AggregateReading,
            AggregationNode,
            Calculates,
            CdcApplyMultiTableNode,
            CdcApplyNode,
            CdcMongoDbNode,
            CdcMsSqlNode,
            CdcOracleMultiTableNode,
            CdcOracleNode,
            CdcPostgresMultiTableNode,
            CdcPostgresNode,
            ClickHouseSinkNode,
            Communication,
            CommunicationHub,
            CommunicationHubRead,
            CustomCode,
            DecisionTable,
            ExternalService,
            FileSinkNode,
            FilterNode,
            Finish,
            FlatMapNode,
            Fork,
            GroovyNode,
            GroupingNode,
            HBaseLookupNode,
            HBaseSinkNode,
            IcebergSinkNode,
            JdbcLookupNode,
            JdbcParallelSourceNode,
            JdbcPostgresSourceNode,
            JdbcRead,
            JdbcSinkNode,
            JdbcWrite,
            JoinFlow,
            JoinNode,
            KafkaSinkNode,
            KafkaSourceNode,
            MappingNode,
            Offer,
            OfferStorageRead,
            OfferStorageWrite,
            PolicyRead,
            PythonNode,
            RestSourceNode,
            Ruleset,
            Scorecard,
            Start,
            Subdiagram,
            TarantoolRead,
            TarantoolWrite,
            UnionNode,
        ]
    ] = None
    objectId: UUID = Field(..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339'])
    """
    Уникальный идентификатор объекта в формате UUID 4
    """
    objectVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор версии объекта в формате UUID 4
    """


class NodeAutoMappingDto(BaseModel):
    """
    Объект для ремапинга свойств узла диаграммы
    """

    forceAutoMappingVariableIds: Optional[List[str]] = None
    skipAutoMappingVariableIds: Optional[List[str]] = None
    collectionName: str = Field(..., examples=['inputVariablesMapping'])
    """
    Наименовании коллекции маппинга на узле
    """
    properties: Optional[
        Union[
            AggregateCompute,
            AggregateReading,
            AggregationNode,
            Calculates,
            CdcApplyMultiTableNode,
            CdcApplyNode,
            CdcMongoDbNode,
            CdcMsSqlNode,
            CdcOracleMultiTableNode,
            CdcOracleNode,
            CdcPostgresMultiTableNode,
            CdcPostgresNode,
            ClickHouseSinkNode,
            Communication,
            CommunicationHub,
            CommunicationHubRead,
            CustomCode,
            DecisionTable,
            ExternalService,
            FileSinkNode,
            FilterNode,
            Finish,
            FlatMapNode,
            Fork,
            GroovyNode,
            GroupingNode,
            HBaseLookupNode,
            HBaseSinkNode,
            IcebergSinkNode,
            JdbcLookupNode,
            JdbcParallelSourceNode,
            JdbcPostgresSourceNode,
            JdbcRead,
            JdbcSinkNode,
            JdbcWrite,
            JoinFlow,
            JoinNode,
            KafkaSinkNode,
            KafkaSourceNode,
            MappingNode,
            Offer,
            OfferStorageRead,
            OfferStorageWrite,
            PolicyRead,
            PythonNode,
            RestSourceNode,
            Ruleset,
            Scorecard,
            Start,
            Subdiagram,
            TarantoolRead,
            TarantoolWrite,
            UnionNode,
        ]
    ] = None
    nodeTypeId: int = Field(..., examples=[10])
    """
    Уникальный идентификатор типа узла
    """


class NodeCreateDto(BaseModel):
    """
    Объект для создания узла диаграммы
    """

    nodeTypeId: int = Field(..., examples=[10])
    """
    Уникальный идентификатор типа узла
    """
    diagramVersionId: UUID = Field(
        ..., examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор диаграммы в формате UUID 4
    """
    nodeName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Узел первичной фильтрации']
    )
    """
    Имя узла
    """
    nodeDescription: Optional[constr(min_length=0, max_length=1000)] = Field(
        None, examples=['Узел фильтрации данных по первичному признаку']
    )
    """
    Описание узла
    """
    properties: Optional[
        Union[
            AggregateCompute,
            AggregateReading,
            AggregationNode,
            Calculates,
            CdcApplyMultiTableNode,
            CdcApplyNode,
            CdcMongoDbNode,
            CdcMsSqlNode,
            CdcOracleMultiTableNode,
            CdcOracleNode,
            CdcPostgresMultiTableNode,
            CdcPostgresNode,
            ClickHouseSinkNode,
            Communication,
            CommunicationHub,
            CommunicationHubRead,
            CustomCode,
            DecisionTable,
            ExternalService,
            FileSinkNode,
            FilterNode,
            Finish,
            FlatMapNode,
            Fork,
            GroovyNode,
            GroupingNode,
            HBaseLookupNode,
            HBaseSinkNode,
            IcebergSinkNode,
            JdbcLookupNode,
            JdbcParallelSourceNode,
            JdbcPostgresSourceNode,
            JdbcRead,
            JdbcSinkNode,
            JdbcWrite,
            JoinFlow,
            JoinNode,
            KafkaSinkNode,
            KafkaSourceNode,
            MappingNode,
            Offer,
            OfferStorageRead,
            OfferStorageWrite,
            PolicyRead,
            PythonNode,
            RestSourceNode,
            Ruleset,
            Scorecard,
            Start,
            Subdiagram,
            TarantoolRead,
            TarantoolWrite,
            UnionNode,
        ]
    ] = None
    metaInfo: Optional[NodeMetaInfo] = None
    nodeId: Optional[UUID] = Field(
        None, examples=['ae61e4be-8402-43dc-bcdb-5f12d0ddf339']
    )
    """
    Уникальный идентификатор узла
    """


class AttributeTreeView(BaseModel):
    """
    Лист атрибутов входящий в состав комплексного типа
    """

    attributeId: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Уникальный идентификатор в формате UUID 4
    """
    attributeName: constr(min_length=1, max_length=100) = Field(..., examples=['name'])
    """
    Имя атрибута
    """
    complexFlag: bool = Field(..., examples=[True])
    """
    Флаг отображающий тип данных, к которым относится атрибут
    """
    arrayFlag: bool = Field(..., examples=[False])
    """
    Флаг отображающий тип объекта данных, к которым относится атрибут
    """
    primitiveTypeId: Optional[str] = Field(None, examples=['1'])
    """
    Уникальный идентификатор примитивного типа. Может принимать null значения
    """
    complexTypeVersionId: Optional[UUID] = Field(
        None, examples=['a190d64d-ef84-4d17-b05b-096f4b82365a']
    )
    """
    Уникальный идентификатор комплексного типа, на который ссылается атрибут в формате UUID 4
    """
    complexTypeVersion: Optional[ComplexTypeGetTreeView] = None


class ComplexTypeGetTreeView(BaseModel):
    typeId: UUID = Field(..., examples=['a190d64d-ef84-4d17-b05b-096f4b82365a'])
    """
    Идентификатор в формате UUID 4
    """
    versionId: UUID = Field(..., examples=['29445f2b-89fa-4268-af3f-1b8160a7679c'])
    """
    Уникальный идентификатор версии в формате UUID 4
    """
    objectName: constr(min_length=0, max_length=100) = Field(
        ..., examples=['Объект №1']
    )
    """
    Имя объекта
    """
    attributes: Optional[List[AttributeTreeView]] = None


ExternalServiceVariableFullViewDto.model_rebuild()
ExternalServiceVariableViewWithoutIdDto.model_rebuild()
BatchVariableGetDto.model_rebuild()
DeployConfigurationFullDto.model_rebuild()
AttributeTreeView.model_rebuild()
